<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>BST</title>
    <url>/posts/7069/</url>
    <content><![CDATA[<h2 id="判断-中序遍历"><a href="#判断-中序遍历" class="headerlink" title="判断: 中序遍历"></a>判断: 中序遍历</h2><figure class="highlight py"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">inorder</span>(<span class="params">root, prev</span>):</span><br><span class="line">    <span class="keyword">if</span> root <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">if</span> inorder(root.left, prev) == <span class="literal">False</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">if</span> root.val &lt;= prev[<span class="number">0</span>]:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    prev[<span class="number">0</span>] = root.val</span><br><span class="line">    <span class="keyword">if</span> inorder(root.right, prev) == <span class="literal">False</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_bst</span>(<span class="params">root</span>):</span><br><span class="line">    prev = [<span class="built_in">float</span>(<span class="string">'-inf'</span>)]</span><br><span class="line">    <span class="keyword">return</span> inorder(root, prev)</span><br></pre></td></tr></tbody></table></figure>

<h2 id="判断-先序遍历-向下传递"><a href="#判断-先序遍历-向下传递" class="headerlink" title="判断: 先序遍历 (向下传递)"></a>判断: 先序遍历 (向下传递)</h2><figure class="highlight py"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">helper</span>(<span class="params">root, m, M</span>):</span><br><span class="line">    <span class="keyword">if</span> root <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> (m &lt; root.val &lt; M):</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> helper(root.left, m, root.val) <span class="keyword">and</span> helper(root.right, root.val, M)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_bst</span>(<span class="params">root</span>):</span><br><span class="line">    <span class="keyword">return</span> helper(root, <span class="built_in">float</span>(<span class="string">'-inf'</span>), <span class="built_in">float</span>(<span class="string">'inf'</span>))</span><br></pre></td></tr></tbody></table></figure>

<h2 id="搜索-递归"><a href="#搜索-递归" class="headerlink" title="搜索: 递归"></a>搜索: 递归</h2><figure class="highlight py"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">query</span>(<span class="params">root, target</span>):</span><br><span class="line">    <span class="keyword">if</span> root <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    <span class="keyword">if</span> root.key == target:</span><br><span class="line">        <span class="keyword">return</span> root</span><br><span class="line">    <span class="keyword">if</span> root.key &gt; target:</span><br><span class="line">        <span class="keyword">return</span> query(root.left, target)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> query(root.right, target)</span><br></pre></td></tr></tbody></table></figure>
<p>时间: $O(h)$</p>
<p>空间: $O(h)$</p>
<h2 id="搜索-迭代"><a href="#搜索-迭代" class="headerlink" title="搜索: 迭代"></a>搜索: 迭代</h2><figure class="highlight py"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">query</span>(<span class="params">root, target</span>):</span><br><span class="line">    cur = root</span><br><span class="line">    <span class="keyword">while</span> cur <span class="keyword">and</span> cur.key != target:</span><br><span class="line">        <span class="keyword">if</span> cur.key &gt; target:</span><br><span class="line">            cur = cur.left</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            cur = cur.right</span><br><span class="line">    <span class="keyword">return</span> cur</span><br></pre></td></tr></tbody></table></figure>
<p>时间: $O(h)$</p>
<p>空间: $O(1)$</p>
<h2 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h2><figure class="highlight py"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">insert</span>(<span class="params">root, key</span>):</span><br><span class="line">    <span class="keyword">if</span> root <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">return</span> Node(key)</span><br><span class="line">    <span class="keyword">if</span> key &lt; root.key:</span><br><span class="line">        root.left = insert(root.left, key)</span><br><span class="line">    <span class="keyword">elif</span> key &gt; root.key:</span><br><span class="line">        root.right = insert(root.right, key)</span><br><span class="line">    <span class="keyword">return</span> root</span><br></pre></td></tr></tbody></table></figure>
<p>时间: $O(h)$</p>
<p>空间: $O(h)$</p>
]]></content>
      <categories>
        <category>计算机</category>
        <category>算法</category>
      </categories>
  </entry>
  <entry>
    <title>Attribution Model</title>
    <url>/posts/53003/</url>
    <content><![CDATA[<p>客户在从看到产品广告到完成购买经历了很多事件，怎么给这些事件的重要性分配 credit？</p>
<span id="more"></span>

<h2 id="Single-Source-Touch-Attribution"><a href="#Single-Source-Touch-Attribution" class="headerlink" title="Single Source (Touch) Attribution"></a>Single Source (Touch) Attribution</h2><p>把所有的 credit 分给一个事件。比如 3 days last touch：往回看三天，分给最近的 marketing vehicle 。</p>
<p>缺点：</p>
<ul>
<li>鼓励频繁发邮件，长期不利</li>
<li>一次折扣有帮助，长期不利</li>
<li>新用户需要很多次点击才会购买，会忽视初始几次事件</li>
</ul>
<h2 id="Fractioned-Attribution"><a href="#Fractioned-Attribution" class="headerlink" title="Fractioned Attribution"></a>Fractioned Attribution</h2><p>多个事件有权重。比如：首末两个事件占 40%，中间的事件平分 20%。</p>
<p>缺点是难以确定最佳权重。</p>
<h2 id="Machine-Learning"><a href="#Machine-Learning" class="headerlink" title="Machine Learning"></a>Machine Learning</h2><p>比如有两个 action，构建 feature：</p>
<ol>
<li>action 1 出现的位置是 1</li>
<li>action 1 出现的位置是 2</li>
<li>action 2 出现的位置是 1</li>
<li>action 2 出现的位置是 2</li>
</ol>
<p>如果一个顾客经历了 action 1 -&gt; action 2 后买了，那么 $x=(1, 0, 0, 1),\ y=1$。</p>
<p>如果一个顾客经历了 action 2 就买了，那么 $x=(0, 0, 1, 0),\ y=0$。</p>
<p>如果有 $n$ 个 action，就要有 $n^2$ 个 binary feature。</p>
<p>逻辑回归之后，设它们的系数是 $k_1,\ldots,k_n$。那么 action 1 的 credit 就是 $\frac{k_1+\cdots+k_n}{\sum k_i}$，action 2 的 credit 就是 $\frac{k_{n+1}+\cdots+k_{2n}}{\sum k_i}$，以此类推。</p>
]]></content>
      <categories>
        <category>计算机</category>
        <category>机器学习</category>
      </categories>
  </entry>
  <entry>
    <title>BST中的第二大元素</title>
    <url>/posts/32090/</url>
    <content><![CDATA[<h2 id="解法一"><a href="#解法一" class="headerlink" title="解法一"></a>解法一</h2><p>反向的中序遍历, 第二个节点就是第二大的.</p>
<figure class="highlight py"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">second_largest</span>(<span class="params">self</span>):</span><br><span class="line">        self.count = <span class="number">0</span></span><br><span class="line">        self.result = <span class="literal">None</span></span><br><span class="line">        self.traverse(root)</span><br><span class="line">        <span class="keyword">return</span> self.result</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">traverse</span>(<span class="params">self, root</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        self.traverse(root.right)</span><br><span class="line">        self.count += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> self.count == <span class="number">2</span>:</span><br><span class="line">            self.result = root.val</span><br><span class="line">            <span class="keyword">return</span>       </span><br><span class="line">        <span class="keyword">if</span> self.count &gt; <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        self.traverse(root.left)</span><br></pre></td></tr></tbody></table></figure>
<p>时间: $O(h)$<br>空间: $O(h)$</p>
<h2 id="解法二"><a href="#解法二" class="headerlink" title="解法二"></a>解法二</h2><p>分类讨论.</p>
<figure class="highlight py"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">find_largest</span>(<span class="params">root</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> root.right:  <span class="comment"># 没有右子树时, 根是最大的</span></span><br><span class="line">        <span class="keyword">return</span> root</span><br><span class="line">    <span class="keyword">return</span> find_largest(root.right)  <span class="comment"># 有右子树时, 找其中最大的</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find_2nd_largest</span>(<span class="params">root</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> root.right:  <span class="comment"># 没有右子树, 根最大; 左子树的最大就是第二大</span></span><br><span class="line">        <span class="keyword">return</span> find_largest(root.left)</span><br><span class="line">    <span class="comment"># 有右子树, 此时最大元素在右子树中</span></span><br><span class="line">    right = root.right</span><br><span class="line">    <span class="comment"># 右子树只有一个节点, 它是最大的, 根第二大</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> right.left <span class="keyword">and</span> <span class="keyword">not</span> right.right:  </span><br><span class="line">        <span class="keyword">return</span> root</span><br><span class="line">    <span class="comment"># 右子树还有子树, 在这里面找第二大的</span></span><br><span class="line">    <span class="keyword">return</span> find_2nd_largest(right)</span><br></pre></td></tr></tbody></table></figure>]]></content>
      <categories>
        <category>计算机</category>
        <category>算法</category>
      </categories>
  </entry>
  <entry>
    <title>控制收敛定理 (DCT)</title>
    <url>/posts/34980/</url>
    <content><![CDATA[<p>$$\lim_{n\to\infty}\int_S f_n ,d\mu=\int_S f,d\mu$$</p>
<span id="more"></span>

<p>条件: </p>
<ul>
<li>$f_n$ 可测, 逐点收敛到 $f$. </li>
<li>$f_n$ 被可积函数 $g$ 控制: $|f_n(x)|\leq g(x)$, 且 $\int_S|g|,d\mu&lt;\infty.$</li>
</ul>
<p>结论:</p>
<ul>
<li>$f$ 可积</li>
<li>$\lim_{n\to\infty}\int_S|f_n-f|,d\mu=0$</li>
<li>$\lim_{n\to\infty}\int_S f_n ,d\mu=\int_S f,d\mu$</li>
</ul>
]]></content>
      <categories>
        <category>数学</category>
        <category>分析</category>
        <category>实变函数</category>
      </categories>
  </entry>
  <entry>
    <title>Fraud Detection</title>
    <url>/posts/22475/</url>
    <content><![CDATA[<iframe src="/file/fraud.html" width="100%" height="11000"></iframe>

]]></content>
      <categories>
        <category>计算机</category>
        <category>机器学习</category>
      </categories>
  </entry>
  <entry>
    <title>常见的ODE解法</title>
    <url>/posts/65228/</url>
    <content><![CDATA[<h3 id="1-可分离变量-y’-x3D-p-y-q-x"><a href="#1-可分离变量-y’-x3D-p-y-q-x" class="headerlink" title="1. 可分离变量 $y’=p(y)q(x)$"></a>1. 可分离变量 $y’=p(y)q(x)$</h3><p>分离变量后两边积分.</p>
<h3 id="2-一阶齐次线性-y’-p-x-y-x3D-0"><a href="#2-一阶齐次线性-y’-p-x-y-x3D-0" class="headerlink" title="2. 一阶齐次线性 $y’+p(x)y=0$"></a>2. 一阶齐次线性 $y’+p(x)y=0$</h3><p>$$<br>y=Ce^{-\int p(x)\d x}<br>$$</p>
<h3 id="3-一阶非齐次线性-y’-p-x-y-x3D-q-x"><a href="#3-一阶非齐次线性-y’-p-x-y-x3D-q-x" class="headerlink" title="3. 一阶非齐次线性 $y’+p(x)y=q(x)$"></a>3. 一阶非齐次线性 $y’+p(x)y=q(x)$</h3><ul>
<li><p>$y=e^{-\int p(x)\d x}\left(C+\int q(x)e^{\int p(x)\d x}\d x\right)$</p>
</li>
<li><p>取积分因子 $\mu(x)=e^{\int p(x)\d x}$.</p>
</li>
</ul>
<blockquote>
<p>🌰    $y’-2y/x=0$.<br>$$\begin{aligned}<br>    &amp;\mu(x)=e^{\int-\frac2x \d x}=e^{-2\ln x}=\frac{1}{x^2}\<br>    &amp;\implies{1\over x^2}y’-{2\over x^3}y=0\<br>    &amp;\implies\left({y\over x^2}\right)’=0\<br>    &amp;\implies y=Cx^2<br>\end{aligned}<br>$$</p>
</blockquote>
]]></content>
      <categories>
        <category>数学</category>
        <category>分析</category>
        <category>微分方程</category>
      </categories>
  </entry>
  <entry>
    <title>Confusion Matrix</title>
    <url>/posts/39658/</url>
    <content><![CDATA[<p>对于二分类问题, 结果被分为真阳, 假阳, 真阴, 假阴四种情况.</p>
<table>
<thead>
<tr>
<th align="center"></th>
<th align="center">P</th>
<th align="center">N</th>
</tr>
</thead>
<tbody><tr>
<td align="center">Y</td>
<td align="center">TP</td>
<td align="center">FP</td>
</tr>
<tr>
<td align="center">N</td>
<td align="center">FN</td>
<td align="center">TN</td>
</tr>
</tbody></table>
<span id="more"></span>

<p><strong>accuracy</strong>: 有多少预测是正确的?<br>$$<br>\text{accuracy}={TP+TN\over TP+FP+TN+FN}={T\over\text{all}}<br>$$</p>
<p><strong>precision</strong>: 所有的预测阳性中多少是真的?<br>$$<br>\text{precision}={TP\over TP+FP}={TP\over Y}<br>$$</p>
<p><strong>recall</strong>: 所有的阳性中有多少被预测出来?<br>$$<br>\text{recall}={TP\over TP+FN}={TP\over P}<br>$$</p>
<p><strong>F1 score</strong>: recall 和 precision 的调和平均.<br>$$<br>\text{F}_1={2\over{1\over\text{recall}}+{1\over\text{precision}}}<br>$$</p>
<p><strong>FPR (False Positive Rate)</strong>: 假阳率, 假阳占阴性的比率.<br>$$<br>\text{FPR}={FP\over N}<br>$$</p>
<p><strong>TPR (True Positive Rate)</strong>: 真阳率, 真阳占阳性的比率.<br>$$<br>\text{TPR}={TP\over P}=\text{recall}<br>$$</p>
<p><strong>ROC (Receiver Operating Characteristic) 曲线</strong>: TPR-FPR 图, 两者都随 threshold 变化.</p>
<img src="/posts/39658/ROC_curve.png" width="50%">

<p><strong>AUC (Area Under Curve)</strong>: ROC 曲线下的面积, 取值范围 $[0,1]$.</p>
]]></content>
      <categories>
        <category>计算机</category>
        <category>机器学习</category>
      </categories>
  </entry>
  <entry>
    <title>Gauss 积分</title>
    <url>/posts/48382/</url>
    <content><![CDATA[<p>证明<br>$$<br>I=\int_{-\infty}^\infty\e^{-x^2}\d x=\sqrt{\pi}.<br>$$</p>
<span id="more"></span>

<h2 id="二重积分（泊松的方法）"><a href="#二重积分（泊松的方法）" class="headerlink" title="二重积分（泊松的方法）"></a>二重积分（泊松的方法）</h2><p>$$<br>\begin{align*}<br>I^2 &amp;= \left(\int_{-\infty}^\infty\e^{-x^2}\d x\right)\left(\int_{-\infty}^\infty\e^{-y^2}\d y\right) \<br>&amp;= \int_{-\infty}^{\infty}\int_{-\infty}^{\infty}\e^{-(x^2+y^2)}\d x\d y<br>\end{align*}<br>$$</p>
<p>利用<a href="/posts/26639/" title="极坐标换元">极坐标换元</a>可以得到<br>$$<br>\begin{align*}<br>I^2&amp;=\int_{0}^{2\pi}\int_0^\infty\e^{-r^2}r\d r\d\theta\<br>&amp;= 2\pi\int_0^\infty\e^{-r^2}r\d r\<br>&amp;= 2\pi\cdot\frac12\int_0^\infty\e^{-r^2}\d(r^2)\<br>&amp;= -\pi\cdot\left[\e^{-r^2}\right]_0^\infty\<br>&amp;= -\pi\cdot(0-1)\<br>&amp;= \pi.<br>\end{align*}<br>$$<br>显然 $I&gt;0$, 于是<br>$$<br>I=\sqrt{\pi}.<br>$$</p>
<blockquote>
<p>注：其中需要严格证明反常重积分与累次积分是相等的。首先，利用比较判别法说明 $I$ 是绝对收敛的，就可以说明 $I$ 与其柯西主值相等。即<br>$$<br>I=\lim_{a\to+\infty}I(a)=\lim_{a\to+\infty}\int_{-a}^a\e^{-x^2}\d x.<br>$$<br>利用 Fubini 定理可以说明对于 $I(a)$，二重积分与累次积分是相等的。此时积分区域是一个正方形，边长为 $2a$。</p>
<p>之后，我们利用该正方形的<strong>外接圆</strong>和<strong>内切圆</strong>来用极坐标代换算两个重积分，这两个重积分最终都收敛于 $\sqrt{\pi}$。最后利用夹逼准则说明结果成立。</p>
</blockquote>
<h2 id="笛卡尔坐标系（拉普拉斯的方法）"><a href="#笛卡尔坐标系（拉普拉斯的方法）" class="headerlink" title="笛卡尔坐标系（拉普拉斯的方法）"></a>笛卡尔坐标系（拉普拉斯的方法）</h2><p>由于被积函数是偶函数，可以利用对称性得到<br>$$<br>I=2\int_0^\infty\e^{-x^2}\d x,<br>$$<br>那么<br>$$<br>I^2=4\int_0^\infty\left(\int_0^\infty\e^{-(x^2+y^2)}\d y\right)\d x.<br>$$<br>这里关键的代换是在 $y$ 的积分里让 $y=xs$ （此时把 $x$ 看作常数，积分关于 $s$），如果 $x$ 和 $y$ 都可正可负，会让 $s$ 的范围难以确定，所以之前都换成了正的范围。</p>
<p>接下来<br>$$<br>\begin{align*}<br>I^2&amp;=4\int_0^\infty\left(\int_0^\infty\e^{-(x^2+x^2s^2)}x\d s\right)\d x\<br>&amp;= 4\int_0^\infty\left(\int_0^\infty\e^{-x^2(1+s^2)}x\d x\right)\d s\<br>&amp;= 4\int_0^\infty\left(\frac12\int_0^\infty\e^{-x^2(1+s^2)}\d (x^2)\right)\d s\<br>&amp;= 2\int_0^\infty\left(\left.-\frac{1}{1+s^2}\e^{-x^2(1+s^2)}\right|_{x=0}^{x=\infty}\right)\d s\<br>&amp;=2\int_0^\infty\frac{1}{1+s^2}\d s\<br>&amp;= 2\ \left.\arctan s\right|_0^\infty\<br>&amp;=2\times\frac\pi2\<br>&amp;= \pi,<br>\end{align*}<br>$$<br>同样 $I=\sqrt\pi$.</p>
<blockquote>
<p>注：我们同样利用 Fubini 定理保障了积分换序不影响结果。</p>
</blockquote>
<h2 id="Gamma-函数"><a href="#Gamma-函数" class="headerlink" title="Gamma 函数"></a>Gamma 函数</h2><p>做变量代换 $x=\sqrt{t}$ 可以得到<br>$$<br>I=2\int_0^\infty\e^{-x^2}\d x=2\int_0^\infty\e^{-t}\cdot\frac12t^{-\frac12}\d t=\Gamma\left(\frac12\right).<br>$$<br>之后可以利用 Gamma 函数的性质比如</p>
<ul>
<li><p>余元公式<br>$$<br>\Gamma(1-z)\Gamma(z)={\pi\over\sin\pi z}<br>$$<br>中令 $z=\frac12$.</p>
</li>
<li><p>倍乘公式<br>$$<br>\Gamma(2z)={2^{2z-1}\over\sqrt\pi}\Gamma(z)\Gamma\left(z+\frac12\right)<br>$$<br>中令 $z=\frac12$.</p>
</li>
<li><p>Beta 函数<br>$$<br>B(x,y)={\Gamma(x)\Gamma(y)\over\Gamma(x+y)}<br>$$<br>中令 $x=y=\frac12$，那么<br>$$<br>\Gamma\left(\frac12\right)=\sqrt {B\left(\frac12, \frac12\right)}.<br>$$<br>其中<br>$$<br>\begin{align*}<br>B\left(\frac12, \frac12\right)&amp;=\int_0^1x^{-\frac12}(1-x)^{-\frac12}\d x\<br>&amp;=\int_0^{1}(t^2)^{-\frac12}(1- t^2)^{-\frac12}\cdot2t\d t\qquad (x=t^2)\<br>&amp;=2\int_0^1(1-t^2)^{-\frac12}\d t\<br>&amp;=2\left.\arcsin t\right|_0^1\<br>&amp;=\pi.<br>\end{align*}<br>$$</p>
</li>
<li><p>递推公式<br>$$<br>\Gamma\left(n+\frac12\right)=\Gamma\left(\frac12\right)\times\frac12\times\frac32\times\cdots\times{2n-1\over2}=\Gamma\left(\frac12\right)\cdot{(2n)!\over2^{2n}n!}<br>$$<br>中令 $n\to\infty$ 并利用 Stirling 公式。</p>
</li>
</ul>
<h2 id="积分号下求导"><a href="#积分号下求导" class="headerlink" title="积分号下求导"></a>积分号下求导</h2><h3 id="法一"><a href="#法一" class="headerlink" title="法一"></a>法一</h3><p>令<br>$$<br>A(t)=\left(\int_0^t\e^{-x^2}\d x\right)^2,\ B(t)=\int_0^1{\e^{-t^2(1+x^2)}\over1+x^2}\d x<br>$$<br>可以得到 $A’(t)=-B’(t)$，其中 $t&gt;0$。之后可以得到<br>$$<br>A(t)=B(t)+\frac\pi4,<br>$$<br>这个常数是通过让 $t\to0^+$ 得出的。</p>
<p>再让 $t\to+\infty$ 便得到了<br>$$<br>\left(\int_0^\infty\e^{-x^2}\d x\right)^2=\frac\pi4.<br>$$</p>
<h3 id="法二"><a href="#法二" class="headerlink" title="法二"></a>法二</h3><p>令<br>$$<br>F(t)=\int_0^\infty{\e^{-t^2(1+x^2)}\over 1+x^2}\d x,<br>$$<br>可得<br>$$<br>F’(t)=-I\e^{-t^2}<br>$$<br>那么<br>$$<br>F(+\infty)-F(0)=\int_0^\infty F’(t)\d t=\int_0^\infty -I\e^{-t^2}\d t=-\frac12I^2,<br>$$<br>所以<br>$$<br>I^2=2\left(F(0)-F(+\infty)\right)=2\int_0^\infty{1\over1+x^2}\d x=\pi.<br>$$</p>
<h2 id="留数定理（奇葩的方法）"><a href="#留数定理（奇葩的方法）" class="headerlink" title="留数定理（奇葩的方法）"></a>留数定理（奇葩的方法）</h2><p>令<br>$$<br>f(z)={\e^{-\frac{z^2}{2}}\over 1+\e^{-\tau z}},<br>$$<br>其中 $\tau=\sqrt{\pi}(1+\i)$.</p>
<p>这样的取值满足<br>$$<br>\begin{equation}\label{shift}<br>f(z)-f(z+\tau)=\e^{-\frac{z^2}{2}}.<br>\end{equation}<br>$$<br>$f$ 的奇点落在 $y=x$ 上，围道与奇点如图：</p>
<p>![](截屏2022-10-04 21.12.16.png)</p>
<p>由留数定理，可得<br>$$<br>\oint_{\gamma_R}f(z)\d z=2\pi\i\cdot\mathrm{Res}\left(f;z=\frac\tau2\right)=\sqrt{2\pi}.<br>$$<br>令 $R\to\infty$，只剩下上下两条边对积分有贡献，于是<br>$$<br>\begin{align*}<br>\sqrt{2\pi}&amp;=\int_{-\infty}^\infty f(x)\d x-\int_{-\infty}^\infty f(x+\i\sqrt\pi)\d x\<br>&amp;=\int_{-\infty}^\infty f(x)\d x-\int_{-\infty}^\infty f(x+\tau-\pi)\d x\<br>&amp;=\int_{-\infty}^\infty f(x)\d x-\int_{-\infty}^\infty f(x+\tau)\d x\<br>&amp;=\int_{-\infty}^\infty \left(f(x)-f(x+\tau)\right)\d x\<br>\end{align*}<br>$$<br>利用性质 $\eqref{shift}$​ 可得<br>$$<br>\sqrt{2\pi}=\int_{-\infty}^\infty\e^{-\frac{x^2}{2}}\d x,<br>$$<br>再代换 $x=\sqrt 2t$ 即可得 $I=\sqrt\pi$.</p>
]]></content>
      <categories>
        <category>数学</category>
        <category>分析</category>
        <category>微积分</category>
        <category>单变量微积分</category>
      </categories>
  </entry>
  <entry>
    <title>OR-Tools 之 scheduling</title>
    <url>/posts/52763/</url>
    <content><![CDATA[<h2 id="倒班问题"><a href="#倒班问题" class="headerlink" title="倒班问题"></a>倒班问题</h2><h3 id="基础版"><a href="#基础版" class="headerlink" title="基础版"></a>基础版</h3><p>在一个 3 天的时间窗里, 每天有三班倒. 一共 4 名员工来安排倒班.</p>
<p>每班只给一个人, 每天一个人最多做一班 (这个人也可以放假).</p>
<span id="more"></span>

<hr>
<p>准备工作…</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> ortools.sat.python <span class="keyword">import</span> cp_model</span><br><span class="line"></span><br><span class="line">num_nurses = <span class="number">4</span></span><br><span class="line">num_shifts = <span class="number">3</span></span><br><span class="line">num_days = <span class="number">3</span></span><br><span class="line"></span><br><span class="line">all_nurses = <span class="built_in">range</span>(num_nurses)</span><br><span class="line">all_shifts = <span class="built_in">range</span>(num_shifts)</span><br><span class="line">all_days = <span class="built_in">range</span>(num_days)</span><br><span class="line"></span><br><span class="line"><span class="comment"># creat the model</span></span><br><span class="line">model = cp_model.CpModel()</span><br><span class="line"></span><br><span class="line"><span class="comment"># create the variables</span></span><br><span class="line">shifts = {}</span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> all_nurses:</span><br><span class="line">    <span class="keyword">for</span> d <span class="keyword">in</span> all_days:</span><br><span class="line">        <span class="keyword">for</span> s <span class="keyword">in</span> all_shifts:</span><br><span class="line">            shifts[(n, d, s)] = model.NewBoolVar(<span class="string">'shift_n%id%is%i'</span> % (n, d, s))</span><br></pre></td></tr></tbody></table></figure>
<p>约束:</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># each shift is assigned to a single nurse per day</span></span><br><span class="line"><span class="keyword">for</span> d <span class="keyword">in</span> all_days:</span><br><span class="line">    <span class="keyword">for</span> s <span class="keyword">in</span> all_shifts:</span><br><span class="line">        model.AddExactlyOne(shifts[(n, d, s)] <span class="keyword">for</span> n <span class="keyword">in</span> all_nurses)</span><br><span class="line"></span><br><span class="line"><span class="comment"># each nurse works at most one shift per day</span></span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> all_nurses:</span><br><span class="line">    <span class="keyword">for</span> d <span class="keyword">in</span> all_days:</span><br><span class="line">        model.AddAtMostOne(shifts[(n, d, s)] <span class="keyword">for</span> s <span class="keyword">in</span> all_shifts)</span><br><span class="line"></span><br><span class="line"><span class="comment"># distribute as evenly as possible</span></span><br><span class="line">min_shifts_per_nurse = (num_shifts * num_days) // num_nurses</span><br><span class="line"><span class="keyword">if</span> num_shifts * num_days % num_nurses == <span class="number">0</span>:</span><br><span class="line">    max_shifts_per_nurse = min_shifts_per_nurse</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    max_shifts_per_nurse = min_shifts_per_nurse + <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> all_nurses:</span><br><span class="line">    num_shifts_worked = []</span><br><span class="line">    <span class="keyword">for</span> d <span class="keyword">in</span> all_days:</span><br><span class="line">        <span class="keyword">for</span> s <span class="keyword">in</span> all_shifts:</span><br><span class="line">            num_shifts_worked.append(shifts[(n, d, s)])</span><br><span class="line">    model.Add(min_shifts_per_nurse &lt;= <span class="built_in">sum</span>(num_shifts_worked))</span><br><span class="line">    model.Add(<span class="built_in">sum</span>(num_shifts_worked) &lt;= max_shifts_per_nurse)</span><br></pre></td></tr></tbody></table></figure>
<p>模型参数设定…</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># update solver para</span></span><br><span class="line">solver = cp_model.CpSolver()</span><br><span class="line">solver.parameters.linearization_level = <span class="number">0</span></span><br><span class="line"><span class="comment"># enumerate all solutions</span></span><br><span class="line">solver.parameters.enumerate_all_solutions = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NursesPartialSolutionPrinter</span>(cp_model.CpSolverSolutionCallback):</span><br><span class="line">    <span class="string">"""Print intermediate solutions."""</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, shifts, num_nurses, num_days, num_shifts, limit</span>):</span><br><span class="line">        cp_model.CpSolverSolutionCallback.__init__(self)</span><br><span class="line">        self._shifts = shifts</span><br><span class="line">        self._num_nurses = num_nurses</span><br><span class="line">        self._num_days = num_days</span><br><span class="line">        self._num_shifts = num_shifts</span><br><span class="line">        self._solution_count = <span class="number">0</span></span><br><span class="line">        self._solution_limit = limit</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">on_solution_callback</span>(<span class="params">self</span>):</span><br><span class="line">        self._solution_count += <span class="number">1</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">'Solution %i'</span> % self._solution_count)</span><br><span class="line">        <span class="keyword">for</span> d <span class="keyword">in</span> <span class="built_in">range</span>(self._num_days):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">'Day %i'</span> % d)</span><br><span class="line">            <span class="keyword">for</span> n <span class="keyword">in</span> <span class="built_in">range</span>(self._num_nurses):</span><br><span class="line">                is_working = <span class="literal">False</span></span><br><span class="line">                <span class="keyword">for</span> s <span class="keyword">in</span> <span class="built_in">range</span>(self._num_shifts):</span><br><span class="line">                    <span class="keyword">if</span> self.Value(self._shifts[(n, d, s)]):</span><br><span class="line">                        is_working = <span class="literal">True</span></span><br><span class="line">                        <span class="built_in">print</span>(<span class="string">'\tNurse %i works shift %i'</span> % (n, s))</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> is_working:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">'\tNurse {} does not work'</span>.<span class="built_in">format</span>(n))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">'='</span>*<span class="number">50</span>)</span><br><span class="line">        <span class="keyword">if</span> self._solution_count &gt;= self._solution_limit:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">'Stop search after %i solutions'</span> % self._solution_limit)</span><br><span class="line">            self.StopSearch()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">solution_count</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self._solution_count</span><br></pre></td></tr></tbody></table></figure>
<p>求解与输出…</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># Display the first five solutions.</span></span><br><span class="line">solution_limit = <span class="number">5</span></span><br><span class="line">solution_printer = NursesPartialSolutionPrinter(shifts, num_nurses,</span><br><span class="line">                                                num_days, num_shifts,</span><br><span class="line">                                                solution_limit)</span><br><span class="line"></span><br><span class="line"><span class="comment"># solve</span></span><br><span class="line">solver.Solve(model, solution_printer)</span><br></pre></td></tr></tbody></table></figure>
<p>输出</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">Solution 1</span><br><span class="line">Day 0</span><br><span class="line">        Nurse 0 does not work</span><br><span class="line">        Nurse 1 works shift 0</span><br><span class="line">        Nurse 2 works shift 1</span><br><span class="line">        Nurse 3 works shift 2</span><br><span class="line">Day 1</span><br><span class="line">        Nurse 0 works shift 2</span><br><span class="line">        Nurse 1 does not work</span><br><span class="line">        Nurse 2 works shift 1</span><br><span class="line">        Nurse 3 works shift 0</span><br><span class="line">Day 2</span><br><span class="line">        Nurse 0 works shift 2</span><br><span class="line">        Nurse 1 works shift 1</span><br><span class="line">        Nurse 2 works shift 0</span><br><span class="line">        Nurse 3 does not work</span><br><span class="line">==================================================</span><br><span class="line">Solution 2</span><br><span class="line">Day 0</span><br><span class="line">        Nurse 0 works shift 0</span><br><span class="line">        Nurse 1 does not work</span><br><span class="line">        Nurse 2 works shift 1</span><br><span class="line">        Nurse 3 works shift 2</span><br><span class="line">Day 1</span><br><span class="line">        Nurse 0 does not work</span><br><span class="line">        Nurse 1 works shift 2</span><br><span class="line">        Nurse 2 works shift 1</span><br><span class="line">        Nurse 3 works shift 0</span><br><span class="line">Day 2</span><br><span class="line">        Nurse 0 works shift 2</span><br><span class="line">        Nurse 1 works shift 1</span><br><span class="line">        Nurse 2 works shift 0</span><br><span class="line">        Nurse 3 does not work</span><br><span class="line">==================================================</span><br><span class="line">Solution 3</span><br><span class="line">Day 0</span><br><span class="line">        Nurse 0 works shift 0</span><br><span class="line">        Nurse 1 does not work</span><br><span class="line">        Nurse 2 works shift 1</span><br><span class="line">        Nurse 3 works shift 2</span><br><span class="line">Day 1</span><br><span class="line">        Nurse 0 works shift 1</span><br><span class="line">        Nurse 1 works shift 2</span><br><span class="line">        Nurse 2 does not work</span><br><span class="line">        Nurse 3 works shift 0</span><br><span class="line">Day 2</span><br><span class="line">        Nurse 0 works shift 2</span><br><span class="line">        Nurse 1 works shift 1</span><br><span class="line">        Nurse 2 works shift 0</span><br><span class="line">        Nurse 3 does not work</span><br><span class="line">==================================================</span><br><span class="line">Solution 4</span><br><span class="line">Day 0</span><br><span class="line">        Nurse 0 works shift 0</span><br><span class="line">        Nurse 1 does not work</span><br><span class="line">        Nurse 2 works shift 1</span><br><span class="line">        Nurse 3 works shift 2</span><br><span class="line">Day 1</span><br><span class="line">        Nurse 0 works shift 2</span><br><span class="line">        Nurse 1 works shift 1</span><br><span class="line">        Nurse 2 does not work</span><br><span class="line">        Nurse 3 works shift 0</span><br><span class="line">Day 2</span><br><span class="line">        Nurse 0 works shift 2</span><br><span class="line">        Nurse 1 works shift 1</span><br><span class="line">        Nurse 2 works shift 0</span><br><span class="line">        Nurse 3 does not work</span><br><span class="line">==================================================</span><br><span class="line">Solution 5</span><br><span class="line">Day 0</span><br><span class="line">        Nurse 0 does not work</span><br><span class="line">        Nurse 1 works shift 0</span><br><span class="line">        Nurse 2 works shift 1</span><br><span class="line">        Nurse 3 works shift 2</span><br><span class="line">Day 1</span><br><span class="line">        Nurse 0 works shift 2</span><br><span class="line">        Nurse 1 works shift 1</span><br><span class="line">        Nurse 2 does not work</span><br><span class="line">        Nurse 3 works shift 0</span><br><span class="line">Day 2</span><br><span class="line">        Nurse 0 works shift 2</span><br><span class="line">        Nurse 1 works shift 1</span><br><span class="line">        Nurse 2 works shift 0</span><br><span class="line">        Nurse 3 does not work</span><br><span class="line">==================================================</span><br><span class="line">Stop search after 5 solutions</span><br></pre></td></tr></tbody></table></figure>

<h3 id="进阶版"><a href="#进阶版" class="headerlink" title="进阶版"></a>进阶版</h3><p>上面的问题有很多组解, 这一节中引入一个 <code>request</code>, 也就是每一个护士的志愿.</p>
<p>在下面的例子中, <code>shift_requests</code> 记录了 5 个护士的 7 天志愿, 比如 <code>[0, 0, 1]</code> 就表示希望这一天轮到第 3 班.</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">num_nurses = <span class="number">5</span></span><br><span class="line">num_shifts = <span class="number">3</span></span><br><span class="line">num_days = <span class="number">7</span></span><br><span class="line">all_nurses = <span class="built_in">range</span>(num_nurses)</span><br><span class="line">all_shifts = <span class="built_in">range</span>(num_shifts)</span><br><span class="line">all_days = <span class="built_in">range</span>(num_days)</span><br><span class="line">shift_requests = [[[<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>], [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>],</span><br><span class="line">                   [<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>]],</span><br><span class="line">                  [[<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>], [<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">                   [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>]],</span><br><span class="line">                  [[<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>], [<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">                   [<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]],</span><br><span class="line">                  [[<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>], [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>], [<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">                   [<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]],</span><br><span class="line">                  [[<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>], [<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>], [<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">                   [<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]]]</span><br></pre></td></tr></tbody></table></figure>
<p>建模和约束是一样的…</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># create model and variables</span></span><br><span class="line">model = cp_model.CpModel()</span><br><span class="line"></span><br><span class="line">shifts = {}</span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> all_nurses:</span><br><span class="line">    <span class="keyword">for</span> d <span class="keyword">in</span> all_days:</span><br><span class="line">        <span class="keyword">for</span> s <span class="keyword">in</span> all_shifts:</span><br><span class="line">            shifts[(n, d, s)] = model.NewBoolVar(<span class="string">'shift_n%id%is%i'</span> % (n, d, s))</span><br><span class="line"></span><br><span class="line"><span class="comment"># constraints</span></span><br><span class="line"><span class="keyword">for</span> d <span class="keyword">in</span> all_days:</span><br><span class="line">    <span class="keyword">for</span> s <span class="keyword">in</span> all_shifts:</span><br><span class="line">        model.AddExactlyOne(shifts[(n, d, s)] <span class="keyword">for</span> n <span class="keyword">in</span> all_nurses)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> all_nurses:</span><br><span class="line">    <span class="keyword">for</span> d <span class="keyword">in</span> all_days:</span><br><span class="line">        model.AddAtMostOne(shifts[(n, d, s)] <span class="keyword">for</span> s <span class="keyword">in</span> all_shifts)</span><br><span class="line"></span><br><span class="line"><span class="comment"># distribute the shifts evenly</span></span><br><span class="line">min_shifts_per_nurse = (num_shifts * num_days) // num_nurses</span><br><span class="line"><span class="keyword">if</span> num_shifts * num_days % num_nurses == <span class="number">0</span>:</span><br><span class="line">    max_shifts_per_nurse = min_shifts_per_nurse</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    max_shifts_per_nurse = min_shifts_per_nurse + <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> all_nurses:</span><br><span class="line">    num_shifts_worked = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> d <span class="keyword">in</span> all_days:</span><br><span class="line">        <span class="keyword">for</span> s <span class="keyword">in</span> all_shifts:</span><br><span class="line">            num_shifts_worked += shifts[(n, d, s)]</span><br><span class="line">    model.Add(min_shifts_per_nurse &lt;= num_shifts_worked)</span><br><span class="line">    model.Add(num_shifts_worked &lt;= max_shifts_per_nurse)</span><br></pre></td></tr></tbody></table></figure>
<p>不过现在有一个目标函数, 希望被满足的志愿最大化:</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># objective</span></span><br><span class="line">model.Maximize(</span><br><span class="line">    <span class="built_in">sum</span>(</span><br><span class="line">        shift_requests[n][d][s] * shifts[(n, d, s)] </span><br><span class="line">        <span class="keyword">for</span> n <span class="keyword">in</span> all_nurses </span><br><span class="line">        <span class="keyword">for</span> d <span class="keyword">in</span> all_days </span><br><span class="line">        <span class="keyword">for</span> s <span class="keyword">in</span> all_shifts</span><br><span class="line">    )</span><br><span class="line">)</span><br></pre></td></tr></tbody></table></figure>
<p>求解与输出…</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">solver = cp_model.CpSolver()</span><br><span class="line">status = solver.Solve(model)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> status == cp_model.OPTIMAL:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'Solution:'</span>)</span><br><span class="line">    <span class="keyword">for</span> d <span class="keyword">in</span> all_days:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">'Day'</span>, d)</span><br><span class="line">        <span class="keyword">for</span> n <span class="keyword">in</span> all_nurses:</span><br><span class="line">            <span class="keyword">for</span> s <span class="keyword">in</span> all_shifts:</span><br><span class="line">                <span class="keyword">if</span> solver.Value(shifts[(n, d, s)]) == <span class="number">1</span>:</span><br><span class="line">                    <span class="keyword">if</span> shift_requests[n][d][s] == <span class="number">1</span>:</span><br><span class="line">                        <span class="built_in">print</span>(<span class="string">'Nurse'</span>, n, <span class="string">'works shift'</span>, s, <span class="string">'(requested).'</span>)</span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        <span class="built_in">print</span>(<span class="string">'Nurse'</span>, n, <span class="string">'works shift'</span>, s, <span class="string">'(not requested).'</span>)</span><br><span class="line">        <span class="built_in">print</span>()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f'Number of shift requests met = <span class="subst">{solver.ObjectiveValue()}</span>'</span>, <span class="string">f'(out of <span class="subst">{num_nurses*min_shifts_per_nurse}</span>)'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'No optimal solution found.'</span>)</span><br></pre></td></tr></tbody></table></figure>
<p>输出</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">Solution:</span><br><span class="line">Day 0</span><br><span class="line">Nurse 1 works shift 0 (not requested).</span><br><span class="line">Nurse 2 works shift 1 (requested).</span><br><span class="line">Nurse 3 works shift 2 (requested).</span><br><span class="line"></span><br><span class="line">Day 1</span><br><span class="line">Nurse 1 works shift 0 (not requested).</span><br><span class="line">Nurse 2 works shift 1 (requested).</span><br><span class="line">Nurse 4 works shift 2 (requested).</span><br><span class="line"></span><br><span class="line">Day 2</span><br><span class="line">Nurse 0 works shift 2 (not requested).</span><br><span class="line">Nurse 3 works shift 0 (requested).</span><br><span class="line">Nurse 4 works shift 1 (requested).</span><br><span class="line"></span><br><span class="line">Day 3</span><br><span class="line">Nurse 0 works shift 2 (not requested).</span><br><span class="line">Nurse 2 works shift 0 (requested).</span><br><span class="line">Nurse 3 works shift 1 (requested).</span><br><span class="line"></span><br><span class="line">Day 4</span><br><span class="line">Nurse 0 works shift 2 (requested).</span><br><span class="line">Nurse 1 works shift 1 (not requested).</span><br><span class="line">Nurse 4 works shift 0 (requested).</span><br><span class="line"></span><br><span class="line">Day 5</span><br><span class="line">Nurse 0 works shift 2 (not requested).</span><br><span class="line">Nurse 3 works shift 0 (requested).</span><br><span class="line">Nurse 4 works shift 1 (requested).</span><br><span class="line"></span><br><span class="line">Day 6</span><br><span class="line">Nurse 0 works shift 2 (requested).</span><br><span class="line">Nurse 1 works shift 1 (not requested).</span><br><span class="line">Nurse 2 works shift 0 (not requested).</span><br><span class="line"></span><br><span class="line">Number of shift requests met = 13.0 (out of 20)</span><br></pre></td></tr></tbody></table></figure>

<h2 id="工程分配问题"><a href="#工程分配问题" class="headerlink" title="工程分配问题"></a>工程分配问题</h2><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>一个 job 由几个 task 组成, 它们之间有先后次序的要求. 每个 task 有对应的机器, 其中一个机器只能一次完成一个 task.</p>
<p>每个 task 有自己的完成时间, 而这个 task 一旦在机器上开始就必须做完.</p>
<p>比如下面这个例子:</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">job0 = [(<span class="number">0</span>, <span class="number">3</span>), (<span class="number">1</span>, <span class="number">2</span>), (<span class="number">2</span>, <span class="number">2</span>)]</span><br><span class="line">job1 = [(<span class="number">0</span>, <span class="number">2</span>), (<span class="number">2</span>, <span class="number">1</span>), (<span class="number">1</span>, <span class="number">4</span>)]</span><br><span class="line">job2 = [(<span class="number">1</span>, <span class="number">4</span>), (<span class="number">2</span>, <span class="number">3</span>)]</span><br></pre></td></tr></tbody></table></figure>
<p>意思是 <code>job0</code> 由三个 task 组成, 第一个在机器 0 上完成, 需要 3 个时间单位; 第二个在机器 1 上完成, 需要 2 个时间单位; 第三个在机器 2 上完成, 需要 2 个时间单位. 同理对 <code>job1</code> 和 <code>job2</code>. </p>
<p>一个可能的方案如图:<br><img src="/posts/52763/schedule1.png"></p>
<p>这个并不是最优解, 我们希望最小化总时间.</p>
<h3 id="建模"><a href="#建模" class="headerlink" title="建模"></a>建模</h3><p>我们记 $t_{i,j}$ 为 task (i, j) 的开始时间, 其中 task (i, j) 指的是 job i 的第 j 个 task. 比如上面的例子中, task (0, 2) 对应的是 <code>(1, 2)</code>, task (0, 3) 对应的是 <code>(2, 2)</code>.</p>
<p><strong>优先级约束</strong></p>
<p>必须先完成 task (0, 2), 再开始 task (0, 3). 而 task (0, 2) 需要 2 个时间单位来完成, 所以有<br>$$<br>t_{0,2} + 2 \le t_{0,3}<br>$$</p>
<p><strong>不重叠约束</strong></p>
<p>task (0, 2) 和 task (2, 1) 都在机器 1 上完成, 而工作时间分别为 2 和 4. 所以, 以下两个约束中的一个成立:</p>
<p>$$<br>t_{0,2} + 2 \le t_{2,1}<br>$$<br>或<br>$$<br>t_{2,1} + 4 \le t_{0,2}.<br>$$</p>
<p><strong>目标函数</strong></p>
<p>最小化时间跨度, 也就是从最早的开始时间到最晚的结束时间.</p>
<h3 id="求解"><a href="#求解" class="headerlink" title="求解"></a>求解</h3><p>导包与数据…</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> collections</span><br><span class="line"><span class="keyword">from</span> ortools.sat.python <span class="keyword">import</span> cp_model</span><br><span class="line"></span><br><span class="line"><span class="comment"># data...</span></span><br><span class="line">jobs_data = [</span><br><span class="line">    [(<span class="number">0</span>, <span class="number">3</span>), (<span class="number">1</span>, <span class="number">2</span>), (<span class="number">2</span>, <span class="number">2</span>)],</span><br><span class="line">    [(<span class="number">0</span>, <span class="number">2</span>), (<span class="number">2</span>, <span class="number">1</span>), (<span class="number">1</span>, <span class="number">4</span>)],</span><br><span class="line">    [(<span class="number">1</span>, <span class="number">4</span>), (<span class="number">2</span>, <span class="number">3</span>)]</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">machines_count = <span class="number">1</span> + <span class="built_in">max</span>(task[<span class="number">0</span>] <span class="keyword">for</span> job <span class="keyword">in</span> jobs_data <span class="keyword">for</span> task <span class="keyword">in</span> job)</span><br><span class="line">all_machines = <span class="built_in">range</span>(machines_count)</span><br><span class="line"><span class="comment"># the sum of all durations</span></span><br><span class="line">horizon = <span class="built_in">sum</span>(task[<span class="number">1</span>] <span class="keyword">for</span> job <span class="keyword">in</span> jobs_data <span class="keyword">for</span> task <span class="keyword">in</span> job)</span><br></pre></td></tr></tbody></table></figure>
<p>建模与变量…</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">model = cp_model.CpModel()</span><br><span class="line"></span><br><span class="line"><span class="comment"># variables...</span></span><br><span class="line">task_type = collections.namedtuple(<span class="string">'task_type'</span>, <span class="string">'start end interval'</span>)</span><br><span class="line">assigned_task_type = collections.namedtuple(<span class="string">'assigned_task_type'</span>, <span class="string">'start job index duration'</span>)</span><br><span class="line"></span><br><span class="line">all_tasks = {}</span><br><span class="line">machine_to_intervals = collections.defaultdict(<span class="built_in">list</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> job_id, job <span class="keyword">in</span> <span class="built_in">enumerate</span>(jobs_data):</span><br><span class="line">    <span class="keyword">for</span> task_id, task <span class="keyword">in</span> <span class="built_in">enumerate</span>(job):</span><br><span class="line">        machine = task[<span class="number">0</span>]</span><br><span class="line">        duration = task[<span class="number">1</span>]</span><br><span class="line">        suffix = <span class="string">'_%i_%i'</span> % (job_id, task_id)</span><br><span class="line">        start_var = model.NewIntVar(<span class="number">0</span>, horizon, <span class="string">'start'</span> + suffix)</span><br><span class="line">        end_var = model.NewIntVar(<span class="number">0</span>, horizon, <span class="string">'end'</span> + suffix)</span><br><span class="line">        interval_var = model.NewIntervalVar(start_var, duration, end_var, <span class="string">'interval'</span> + suffix)</span><br><span class="line">        all_tasks[job_id, task_id] = task_type(start=start_var, end=end_var, interval=interval_var)</span><br><span class="line">        machine_to_intervals[machine].append(interval_var)</span><br></pre></td></tr></tbody></table></figure>
<p>约束…</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># disjunctive constraints</span></span><br><span class="line"><span class="keyword">for</span> machine <span class="keyword">in</span> all_machines:</span><br><span class="line">    model.AddNoOverlap(machine_to_intervals[machine])</span><br><span class="line"></span><br><span class="line"><span class="comment"># precidences inside a job</span></span><br><span class="line"><span class="keyword">for</span> job_id, job <span class="keyword">in</span> <span class="built_in">enumerate</span>(jobs_data):</span><br><span class="line">    <span class="keyword">for</span> task_id <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(job)-<span class="number">1</span>):</span><br><span class="line">        model.Add(all_tasks[job_id, task_id+<span class="number">1</span>].start &gt;= all_tasks[job_id, task_id].end)</span><br></pre></td></tr></tbody></table></figure>
<p>目标函数…</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># objective...</span></span><br><span class="line">obj_var = model.NewIntVar(<span class="number">0</span>, horizon, <span class="string">'makespan'</span>)</span><br><span class="line">model.AddMaxEquality(obj_var, [</span><br><span class="line">    all_tasks[job_id, <span class="built_in">len</span>(job)-<span class="number">1</span>].end <span class="keyword">for</span> job_id, job <span class="keyword">in</span> <span class="built_in">enumerate</span>(jobs_data)</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line">model.Minimize(obj_var)</span><br></pre></td></tr></tbody></table></figure>
<p>求解与输出…</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># solve...</span></span><br><span class="line">solver = cp_model.CpSolver()</span><br><span class="line">status = solver.Solve(model)</span><br><span class="line"></span><br><span class="line"><span class="comment"># results...</span></span><br><span class="line"><span class="keyword">if</span> status == cp_model.OPTIMAL <span class="keyword">or</span> status == cp_model.FEASIBLE:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'Solution:'</span>)</span><br><span class="line">    <span class="comment"># create one list of assigned tasks per machine</span></span><br><span class="line">    assigned_jobs = collections.defaultdict(<span class="built_in">list</span>)</span><br><span class="line">    <span class="keyword">for</span> job_id, job <span class="keyword">in</span> <span class="built_in">enumerate</span>(jobs_data):</span><br><span class="line">        <span class="keyword">for</span> task_id, task <span class="keyword">in</span> <span class="built_in">enumerate</span>(job):</span><br><span class="line">            machine = task[<span class="number">0</span>]</span><br><span class="line">            assigned_jobs[machine].append(</span><br><span class="line">                assigned_task_type(start=solver.Value(all_tasks[job_id, task_id].start),</span><br><span class="line">                job=job_id,</span><br><span class="line">                index=task_id,</span><br><span class="line">                duration=task[<span class="number">1</span>])</span><br><span class="line">            )</span><br><span class="line">    <span class="comment"># create per machine output lines</span></span><br><span class="line">    output = <span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> machine <span class="keyword">in</span> all_machines:</span><br><span class="line">        <span class="comment"># sort by starting time</span></span><br><span class="line">        assigned_jobs[machine].sort()</span><br><span class="line">        sol_line_tasks = <span class="string">'Machine '</span> + <span class="built_in">str</span>(machine) + <span class="string">': '</span></span><br><span class="line">        sol_line = <span class="string">'\t'</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> assigned_task <span class="keyword">in</span> assigned_jobs[machine]:</span><br><span class="line">            name = <span class="string">'job_%i_task_%i'</span> % (assigned_task.job, assigned_task.index)</span><br><span class="line">            <span class="comment"># align columns</span></span><br><span class="line">            sol_line_tasks += <span class="string">'%-15s'</span> % name</span><br><span class="line"></span><br><span class="line">            start = assigned_task.start</span><br><span class="line">            duration = assigned_task.duration</span><br><span class="line">            sol_tmp = <span class="string">'[%i, %i]'</span> % (start, start + duration)</span><br><span class="line">            <span class="comment"># align columns</span></span><br><span class="line">            sol_line += <span class="string">'%-15s'</span> % sol_tmp</span><br><span class="line"></span><br><span class="line">        sol_line += <span class="string">'\n'</span></span><br><span class="line">        sol_line_tasks += <span class="string">'\n'</span></span><br><span class="line">        output += sol_line_tasks</span><br><span class="line">        output += sol_line</span><br><span class="line"></span><br><span class="line">    <span class="comment"># print the solution</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f'Optimal Schedule Length: <span class="subst">{solver.ObjectiveValue()}</span>'</span>)</span><br><span class="line">    <span class="built_in">print</span>(output)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'No solution found.'</span>)</span><br></pre></td></tr></tbody></table></figure>
<p>输出:</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">Solution:</span><br><span class="line">Optimal Schedule Length: 11.0</span><br><span class="line">Machine 0: job_1_task_0   job_0_task_0   </span><br><span class="line">        [0, 2]         [2, 5]         </span><br><span class="line">Machine 1: job_2_task_0   job_0_task_1   job_1_task_2   </span><br><span class="line">        [0, 4]         [5, 7]         [7, 11]        </span><br><span class="line">Machine 2: job_1_task_1   job_2_task_1   job_0_task_2   </span><br><span class="line">        [2, 3]         [4, 7]         [7, 9]    </span><br></pre></td></tr></tbody></table></figure>
<img src="/posts/52763/schedule2.png">]]></content>
      <categories>
        <category>计算机</category>
        <category>OR-Tools</category>
      </categories>
  </entry>
  <entry>
    <title>OR-Tools 入门</title>
    <url>/posts/59457/</url>
    <content><![CDATA[<p>$$<br>\max~ 3x+y,\quad<br>\text{subject to}\ \begin{cases}<br>0\le x\le 1\<br>0\le y\le 2\<br>x+y\le 2<br>\end{cases}<br>$$</p>
<span id="more"></span>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> ortools.linear_solver <span class="keyword">import</span> pywraplp</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="comment"># Create the linear solver with the GLOP backend.</span></span><br><span class="line">    solver = pywraplp.Solver.CreateSolver(<span class="string">'GLOP'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Create the variables x and y.</span></span><br><span class="line">    x = solver.NumVar(<span class="number">0</span>, <span class="number">1</span>, <span class="string">'x'</span>)</span><br><span class="line">    y = solver.NumVar(<span class="number">0</span>, <span class="number">2</span>, <span class="string">'y'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'Number of variables ='</span>, solver.NumVariables())</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Create a linear constraint, 0 &lt;= x + y &lt;= 2.</span></span><br><span class="line">    ct = solver.Constraint(<span class="number">0</span>, <span class="number">2</span>, <span class="string">'ct'</span>)</span><br><span class="line">    ct.SetCoefficient(x, <span class="number">1</span>)</span><br><span class="line">    ct.SetCoefficient(y, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'Number of constraints ='</span>, solver.NumConstraints())</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Create the objective function, 3 * x + y.</span></span><br><span class="line">    objective = solver.Objective()</span><br><span class="line">    objective.SetCoefficient(x, <span class="number">3</span>)</span><br><span class="line">    objective.SetCoefficient(y, <span class="number">1</span>)</span><br><span class="line">    objective.SetMaximization()</span><br><span class="line"></span><br><span class="line">    solver.Solve()</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'='</span>*<span class="number">25</span>+<span class="string">' Solution '</span>+<span class="string">'='</span>*<span class="number">25</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'Objective value ='</span>, objective.Value())</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'x ='</span>, x.solution_value())</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'y ='</span>, y.solution_value())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></tbody></table></figure>
<p>输出</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">Number of variables = 2</span><br><span class="line">Number of constraints = 1</span><br><span class="line">========================= Solution =========================</span><br><span class="line">Objective value = 4.0</span><br><span class="line">x = 1.0</span><br><span class="line">y = 1.0</span><br></pre></td></tr></tbody></table></figure>]]></content>
      <categories>
        <category>计算机</category>
        <category>OR-Tools</category>
      </categories>
  </entry>
  <entry>
    <title>Fourier 级数</title>
    <url>/posts/22351/</url>
    <content><![CDATA[<p>$$<br>f\colon[-L,L]\to\mathbb{R}<br>$$<br>$$F(x)=a_0+\sum_{n=1}^\infty \left(a_n\cos\left(\frac{n\pi x}{L}\right)+b_n\sin\left(\frac{n\pi x}{L}\right)\right)$$<br>其中<br>$$a_0=\frac{1}{2L}\int_{-L}^Lf(x),\mathrm{d}x$$<br>$$a_n=\frac{1}{L}\int_{-L}^Lf(x)\cos\left(\frac{n\pi x}{L}\right),\mathrm{d}x$$<br>$$b_n=\frac{1}{L}\int_{-L}^Lf(x)\sin\left(\frac{n\pi x}{L}\right),\mathrm{d}x$$</p>
]]></content>
      <categories>
        <category>数学</category>
        <category>分析</category>
        <category>微积分</category>
        <category>级数</category>
      </categories>
  </entry>
  <entry>
    <title>Search Engine Marketing</title>
    <url>/posts/49742/</url>
    <content><![CDATA[<h2 id="TF-IDF（Term-Frequency-Inverse-Document-Frequency）"><a href="#TF-IDF（Term-Frequency-Inverse-Document-Frequency）" class="headerlink" title="TF-IDF（Term Frequency, Inverse Document Frequency）"></a>TF-IDF（Term Frequency, Inverse Document Frequency）</h2><p>$$<br>\text{IDF}=\frac{1}{\text{document frequency}}<br>$$</p>
<p>一个词在越多个文档中出现，说明它越不重要，对应的IDF越低。</p>
<span id="more"></span>

<p>比如用户查询 <code>croquets and bitterballen</code>，在我们所有文档中，有 2 个包含 <code>croquets</code>，100 个包含 <code>and</code>，2 个包含 <code>bitterballen</code>。那么它们对应的 IDF 就分别为 0.5，0.01，0.5。</p>
<p>假设第一个文档中出现 8 次 <code>croquets</code>，10 次 <code>and</code>，2 次 <code>bitterballen</code>；第二个文档中只出现 100 次 <code>and</code>。</p>
<p>那么第一个文档的评分为 $8\times 0.5 + 10\times 0.01 + 2\times 0.5=5.1$，第二个文档的评分为 $0.01\times 100=1$。</p>
<p>这本质上就是利用 IDF 降低了一些无关词的权重。</p>
<h2 id="Google-Ad-Rank"><a href="#Google-Ad-Rank" class="headerlink" title="Google Ad Rank"></a>Google Ad Rank</h2><p>$$<br>\text{ad rank}=\text{max cpc bid}\times\text{quality score}<br>$$</p>
<p>前一项是广告商出价（CPC，cost per click），后一项是网站质量评分。</p>
<p>还有一个 threshold 来决定广告的个数。</p>
<h2 id="Actual-CPC"><a href="#Actual-CPC" class="headerlink" title="Actual CPC"></a>Actual CPC</h2><p>$$<br>\text{Actual CPC}={\text{next ad rank}\over\text{your quality score}}+0.01<br>$$</p>
<h2 id="Measurement"><a href="#Measurement" class="headerlink" title="Measurement"></a>Measurement</h2><p>$$<br>\text{CTR (Click-Through Rate)}={\text{clicks}\over\text{impressions}}<br>$$</p>
<p>$$<br>\text{Conversion Rate}=\frac{\text{conversion}}{\text{clicks}}<br>$$</p>
<p>$$<br>\text{Cost Per Acquisition}=\frac{\text{total cost}}{\text{conversions}}<br>$$</p>
<h2 id="AB-Testing"><a href="#AB-Testing" class="headerlink" title="AB Testing"></a>AB Testing</h2><p>假设 A 有 30000 次 impression，CTR 为 0.1，点击量 3000；B 有 20000 次 impression，CTR 为 0.099，点击量为 1998 。如何比较 CTR？</p>
<p>原假设：两个 CTR 相等。<br>$$<br>p={n_1p_1+n_2p_2\over n_1+n_2}<br>$$</p>
<p>$$<br>z={p_1-p_2\over\sqrt{p(1-p)\left(\frac{1}{n_1}+\frac{1}{n_2}\right)}}<br>$$</p>
<p>见 <a href="/posts/24350/" title="假设性检验">假设性检验</a>。</p>
<h2 id="Customer’s-Journey"><a href="#Customer’s-Journey" class="headerlink" title="Customer’s Journey"></a>Customer’s Journey</h2><ol>
<li>Trigger：电视广告、朋友推荐等</li>
<li>Initial Consideration Set：对比产品</li>
<li>Zero Moment of Truth：根据信息调整结果</li>
<li>First Moment of Truth：实体店、网店，第一印象</li>
<li>Purchase Decision：决定买或者不买</li>
<li>Second Moment of Truth：用户体验</li>
</ol>
]]></content>
      <categories>
        <category>计算机</category>
      </categories>
  </entry>
  <entry>
    <title>SQL 基础</title>
    <url>/posts/19528/</url>
    <content><![CDATA[<h2 id="SELECT"><a href="#SELECT" class="headerlink" title="SELECT"></a>SELECT</h2><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="keyword">DISTINCT</span> Country) <span class="keyword">FROM</span> Customers;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> Customers <span class="keyword">WHERE</span> <span class="keyword">not</span> (Country<span class="operator">=</span><span class="string">'Germany'</span> <span class="keyword">and</span> city<span class="operator">=</span><span class="string">'Berlin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> Customers <span class="keyword">WHERE</span> Country <span class="keyword">IN</span> (<span class="keyword">SELECT</span> Country <span class="keyword">FROM</span> Suppliers);</span><br></pre></td></tr></tbody></table></figure>

<h2 id="LIKE"><a href="#LIKE" class="headerlink" title="LIKE"></a>LIKE</h2><p><code>%</code>: zero, one or multiple char</p>
<p><code>_</code>: a single char</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> Customers <span class="keyword">WHERE</span> <span class="built_in">lower</span>(CustomerName) <span class="keyword">LIKE</span> <span class="string">'a%'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> Customers <span class="keyword">WHERE</span> city <span class="keyword">LIKE</span> <span class="string">'____'</span>;</span><br></pre></td></tr></tbody></table></figure>

<h2 id="GROUP-BY"><a href="#GROUP-BY" class="headerlink" title="GROUP BY"></a>GROUP BY</h2><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> ...</span><br><span class="line"><span class="keyword">FROM</span> ...</span><br><span class="line"><span class="keyword">WHERE</span> ...</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> ...</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> ... <span class="keyword">ASC</span> <span class="operator">/</span> <span class="keyword">DESC</span>;</span><br></pre></td></tr></tbody></table></figure>

<h2 id="Aggregate-functions"><a href="#Aggregate-functions" class="headerlink" title="Aggregate functions"></a>Aggregate functions</h2><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">Min</span>(), <span class="built_in">Max</span>(), <span class="built_in">Count</span>(), <span class="built_in">Sum</span>(), <span class="built_in">Avg</span>()</span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">avg</span>(sum_id) <span class="keyword">as</span> avg_spend_per_orderid</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">(<span class="keyword">SELECT</span> order_id, <span class="built_in">sum</span>(spend) <span class="keyword">as</span> sum_id</span><br><span class="line"><span class="keyword">FROM</span> example</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="number">1</span>)</span><br></pre></td></tr></tbody></table></figure>

<h2 id="HAVING"><a href="#HAVING" class="headerlink" title="HAVING"></a>HAVING</h2><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> ...</span><br><span class="line"><span class="keyword">FROM</span> ...</span><br><span class="line"><span class="keyword">WHERE</span> ...</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> ...</span><br><span class="line"><span class="keyword">HAVING</span> ...</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> ...</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Country, <span class="built_in">count</span>(CustomerID)</span><br><span class="line"><span class="keyword">FROM</span> Customers</span><br><span class="line"><span class="keyword">WHERE</span> Country <span class="keyword">in</span> (<span class="string">'Brazil'</span>, <span class="string">'France'</span>, <span class="string">'USA'</span>)</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> Country</span><br><span class="line"><span class="keyword">HAVING</span> <span class="built_in">count</span>(CustomerID) <span class="operator">&gt;</span> <span class="number">5</span>;</span><br></pre></td></tr></tbody></table></figure>

<h2 id="UNION"><a href="#UNION" class="headerlink" title="UNION"></a>UNION</h2><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Country <span class="keyword">FROM</span> Customers</span><br><span class="line"><span class="keyword">UNION</span> (<span class="keyword">ALL</span>)</span><br><span class="line"><span class="keyword">SELECT</span> Country <span class="keyword">FROM</span> Suppliers</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="number">1</span>;</span><br></pre></td></tr></tbody></table></figure>

<h2 id="WITH"><a href="#WITH" class="headerlink" title="WITH"></a>WITH</h2><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">WITH</span> cate15 <span class="keyword">as</span> (</span><br><span class="line">  <span class="keyword">SELECT</span> categoryid, productid</span><br><span class="line">  <span class="keyword">FROM</span> products</span><br><span class="line">  <span class="keyword">WHERE</span> categoryid <span class="keyword">BETWEEN</span> <span class="number">1</span> <span class="keyword">and</span> <span class="number">5</span></span><br><span class="line">),</span><br><span class="line">od15 <span class="keyword">as</span> (</span><br><span class="line">  <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> orderdetails</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> od15 </span><br><span class="line"><span class="keyword">WHERE</span> productid <span class="keyword">in</span> (<span class="keyword">SELECT</span> productid <span class="keyword">from</span> cate15)</span><br></pre></td></tr></tbody></table></figure>

<h2 id="Windows-function"><a href="#Windows-function" class="headerlink" title="Windows function"></a>Windows function</h2><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">row_number</span>() <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> ... <span class="keyword">order</span> <span class="keyword">by</span> ...)</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> category, product, sales, row_num</span><br><span class="line"><span class="keyword">FROM</span> (</span><br><span class="line">  <span class="keyword">SELECT</span> category, product, sales, </span><br><span class="line">  <span class="built_in">row_number</span>() <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> category <span class="keyword">order</span> <span class="keyword">by</span> sales <span class="keyword">desc</span>) <span class="keyword">as</span> row_num</span><br><span class="line">  <span class="keyword">FROM</span> tab</span><br><span class="line">)</span><br><span class="line"><span class="keyword">WHERE</span> row_num <span class="operator">&lt;=</span> <span class="number">2</span></span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">categoryid, productid, price, </span><br><span class="line"><span class="built_in">sum</span>(price) <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> categoryid <span class="keyword">order</span> <span class="keyword">by</span> productid) <span class="keyword">as</span> cum_sum</span><br><span class="line"><span class="keyword">FROM</span> products</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> <span class="number">1</span>,<span class="number">2</span>;</span><br></pre></td></tr></tbody></table></figure>
<p><code>lag()</code>: above, <code>lead()</code>: below</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span>,</span><br><span class="line"><span class="built_in">lag</span>(birthdate, <span class="number">1</span>) <span class="keyword">over</span>(<span class="keyword">order</span> <span class="keyword">by</span> birthdate),</span><br><span class="line"><span class="built_in">lead</span>(birthdate, <span class="number">2</span>) <span class="keyword">over</span>(<span class="keyword">order</span> <span class="keyword">by</span> birthdate)</span><br><span class="line"><span class="keyword">FROM</span> employees;</span><br></pre></td></tr></tbody></table></figure>

<h2 id="CASE-WHEN"><a href="#CASE-WHEN" class="headerlink" title="CASE WHEN"></a>CASE WHEN</h2><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Country,</span><br><span class="line">       <span class="keyword">case</span> <span class="keyword">when</span> country <span class="keyword">in</span> (<span class="string">'USA'</span>) <span class="keyword">then</span> <span class="string">'America'</span></span><br><span class="line">            <span class="keyword">when</span> country <span class="keyword">in</span> (<span class="string">'Mexico'</span>) <span class="keyword">then</span> <span class="string">'emerging markets'</span></span><br><span class="line">            <span class="keyword">else</span> <span class="string">'other markets'</span> <span class="keyword">end</span> <span class="keyword">as</span> country_flag</span><br><span class="line"><span class="keyword">FROM</span> customers;</span><br></pre></td></tr></tbody></table></figure>]]></content>
      <categories>
        <category>计算机</category>
        <category>SQL</category>
      </categories>
  </entry>
  <entry>
    <title>PCA</title>
    <url>/posts/4593/</url>
    <content><![CDATA[<p>“降维” 是减少数据特征, 不是减少样本.</p>
<span id="more"></span>

<p>设 $X\in\R^{N\times d}$ 是 $d$ 维的数据矩阵<br>$$<br>X=<br>\begin{bmatrix}<br>x_{11} &amp; \cdots &amp; x_{1d}\<br>x_{21} &amp; \cdots &amp; x_{2d}\<br>\vdots &amp; \ddots &amp; \vdots\<br>x_{N1} &amp; \cdots &amp; x_{Nd}<br>\end{bmatrix},<br>$$<br>其中 $d$ 是特征个数, $N$ 是样本个数. 希望把它降到 $k$ 维.</p>
<h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><p>设只有两个特征 $a$ 和 $b$.<br>$$<br>X=\begin{bmatrix}<br>a_1 &amp; b_1\<br>a_2 &amp; b_2\<br>\vdots &amp; \vdots\<br>a_N &amp; b_N\<br>\end{bmatrix},<br>$$<br>那么<br>$$<br>\frac1N X^TX=\begin{bmatrix}<br>\frac1N \sum a_i^2 &amp; \frac 1N \sum a_ib_i\<br>\frac1N \sum a_ib_i &amp; \frac 1N\sum b_i^2<br>\end{bmatrix}.<br>$$<br>对数据归一化之后, 两个特征里所有样本的均值为 0. 那么<br>$$<br>\frac1N X^TX=\begin{bmatrix}<br>\mathrm{Cov}(a,a) &amp; \mathrm{Cov}(a,b)\<br>\mathrm{Cov}(b,a) &amp; \mathrm{Cov}(b,b)<br>\end{bmatrix}<br>$$<br>是协方差阵.</p>
<h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><ol>
<li>对数据进行归一化. (便于计算协方差阵)</li>
<li>计算协方差矩阵 $X^TX= A\in\R^{d\times d}$. (实际上差一个常数, 但不影响)</li>
<li>特征值分解 $A=Q\Lambda Q^T$.</li>
<li>取前 $k$ 个主导特征向量组成 $Q_k\in\R^{d\times k}$.</li>
<li>把 $X$ 投影成了新矩阵 $XQ_k\in\R^{N\times k}$.</li>
</ol>
]]></content>
      <categories>
        <category>数学</category>
        <category>统计</category>
      </categories>
  </entry>
  <entry>
    <title>Amazon TV Convert Rate Prediction</title>
    <url>/posts/44648/</url>
    <content><![CDATA[<iframe src="/file/amazon_cvt.html" width="100%" height="20200"></iframe>
]]></content>
      <categories>
        <category>计算机</category>
        <category>机器学习</category>
      </categories>
  </entry>
  <entry>
    <title>Time Series</title>
    <url>/posts/23857/</url>
    <content><![CDATA[<h2 id="type"><a href="#type" class="headerlink" title="type"></a>type</h2><ul>
<li>exploratory analysis</li>
<li>autocorrelation analysis</li>
<li>spectral analysis</li>
</ul>
<span id="more"></span>

<h2 id="approach"><a href="#approach" class="headerlink" title="approach"></a>approach</h2><ul>
<li>plot and see if there is …<ul>
<li>a trend</li>
<li>a seasonal component 标准循环</li>
<li>any apparent sharp change</li>
<li>any outlying observation</li>
<li>$$\text{Observed}=\text{Trend}+\text{Cyclic}+\text{Irregular}$$</li>
</ul>
</li>
<li>remove trend and seasonal to get <strong>stationary</strong> residual</li>
<li>choose a model to fit the residual</li>
</ul>
<h2 id="Definitions"><a href="#Definitions" class="headerlink" title="Definitions"></a>Definitions</h2><p>$$\mu_X(t):= E[X_t]$$<br>$$\gamma_X(r,s):= \mathrm{Cov}(X_r,X_s)$$<br>weakly stationary:</p>
<ul>
<li>均值恒定: $\mu_X(t)$ is independent of $t$.</li>
<li>协方差可以平移: $\gamma_X(t+h,t)$ is independent of $t$ for each $h$.</li>
</ul>
<p>ACVF (AutoCoVariance function): $$\gamma_X(h)=\gamma_X(t+h,t)$$</p>
<p>ACF (AutoCorrelation Function): $$\rho_X(h)=\gamma_X(h)/\gamma_X(0)$$</p>
<p>Differencing:</p>
<ul>
<li>$\nabla X_t=X_t-X_{t-1}$</li>
<li>$\nabla^2 X_t=X_t-2X_{t-1}+X_{t-2}$</li>
</ul>
<h2 id="How-to-check"><a href="#How-to-check" class="headerlink" title="How to check?"></a>How to check?</h2><p>ADF test.</p>
<h2 id="Models"><a href="#Models" class="headerlink" title="Models"></a>Models</h2><p>AR, MA, ARMA 都需要平稳; ARIMA 不需要.</p>
<h3 id="Autoregressive-process-of-order-p-AR-p"><a href="#Autoregressive-process-of-order-p-AR-p" class="headerlink" title="Autoregressive process of order $p$: AR(p)"></a>Autoregressive process of order $p$: AR(p)</h3><p>$$\phi(B)X_t=Z_t$$<br>来源于前值.</p>
<p>ACF tail off, PACF cut off</p>
<h3 id="Moving-average-process-of-order-q-MA-q"><a href="#Moving-average-process-of-order-q-MA-q" class="headerlink" title="Moving-average process of order $q$: MA(q)"></a>Moving-average process of order $q$: MA(q)</h3><p>$$X_t=\theta(B)Z_t$$<br>来源于误差.</p>
<p>ACF cut off, PACF tail off</p>
<h3 id="ARMA-p-q"><a href="#ARMA-p-q" class="headerlink" title="ARMA(p, q)"></a>ARMA(p, q)</h3><p>$$\phi(B)X_t=\theta(B)Z_t$$</p>
<h3 id="ARIMA-d-p-q"><a href="#ARIMA-d-p-q" class="headerlink" title="ARIMA(d, p, q)"></a>ARIMA(d, p, q)</h3><p>$$\phi(B)(1-B)^dX_t=\theta(B)Z_t$$</p>
]]></content>
      <categories>
        <category>数学</category>
      </categories>
  </entry>
  <entry>
    <title>$\arcsin^2x$的展开式</title>
    <url>/posts/20316/</url>
    <content><![CDATA[<p>证明<br>$$<br>\arcsin^2x=\frac12\sum_{n=1}^\infty{(2x)^{2n}\over n^2{2n\choose n}}.<br>$$</p>
<span id="more"></span>

<p>先求导：<br>$$<br>(\arcsin^2 x)’={2\arcsin x\over\sqrt{1-x^2}}<br>$$<br>利用恒等式$\arcsin x=\arctan\left(x\over\sqrt{1-x^2}\right)$，有<br>$$<br>\begin{align*}<br>{\arcsin x\over\sqrt{1-x^2}}&amp;={1\over\sqrt{1-x^2}}\arctan\left(x\over\sqrt{1-x^2}\right)\<br>&amp;=\frac1x\cdot{1\over\sqrt{1-x^2\over x^2}}\arctan\left({1\over\sqrt{1-x^2\over x^2}}\right)\<br>&amp;=\left.\frac1x\cdot{1\over\sqrt{1-x^2\over x^2}}\arctan\left({t\over\sqrt{1-x^2\over x^2}}\right)\right|<em>{t=0}^{t=1}\<br>&amp;=\frac1x\int_0^1{\mathrm dt\over t^2+{1-x^2\over x^2}}\<br>&amp;=x\int_0^1{\mathrm dt\over 1-x^2+x^2t^2}\<br>&amp;=x\int_0^1\sum</em>{n=0}^\infty(x^2-x^2t^2)^n,\mathrm dt\<br>&amp;=\int_0^1\sum_{n=0}^\infty (1-t^2)^nx^{2n+1},\mathrm dt\<br>&amp;=\sum_{n=0}^\infty\left(\int_0^1(1-t^2)^n,\mathrm dt\right) x^{2n+1}\<br>&amp;=\sum_{n=0}^\infty{(2n)!!\over(2n+1)!!}x^{2n+1}.<br>\end{align*}<br>$$<br>其中我们利用了<a href="/posts/23548/" title="结论">结论</a>。</p>
<p>于是积分：<br>$$<br>\begin{align*}<br>\arcsin^2x&amp;=\int_0^x(\arcsin^2t)’,\mathrm dt\<br>&amp;=2\int_0^x{\arcsin t\over\sqrt{1-t^2}},\mathrm dt\<br>&amp;=2\int_0^x\sum_{n=0}^\infty{(2n)!!\over(2n+1)!!}t^{2n+1},\mathrm dt\<br>&amp;=2\sum_{n=0}^\infty{(2n)!!\over(2n+1)!!}\int_0^x t^{2n+1},\mathrm dt\<br>&amp;=2\sum_{n=0}^\infty{(2n)!!\over(2n+1)!!}\cdot{x^{2n+2}\over2n+2}\<br>&amp;=2\sum_{n=0}^\infty{(2^nn!)^2\over(2n+1)!}\cdot{x^{2n+2}\over2n+2}\<br>&amp;=2\sum_{n=0}^\infty{2^{2n}(n!)^2\over(2n+2)!}x^{2n+2}\<br>&amp;=2\sum_{n=0}^\infty{2^{2n+2}\left((n+1)!\right)^2\over2^2(n+1)^2(2n+2)!}x^{2n+2}\<br>&amp;=\frac12\sum_{n=0}^\infty{(2x)^{2n+2}\over(n+1)^2{2n+2\choose n+1}}\<br>&amp;=\frac12\sum_{n=1}^\infty{(2x)^{2n}\over n^2{2n\choose n}}.<br>\end{align*}<br>$$</p>
]]></content>
      <categories>
        <category>数学</category>
        <category>分析</category>
        <category>微积分</category>
        <category>级数</category>
      </categories>
  </entry>
  <entry>
    <title>为什么&quot;假推真/假&quot;都为真</title>
    <url>/posts/31827/</url>
    <content><![CDATA[<p>$P\Rightarrow Q$ 的<strong>定义</strong>是真值表. “如果 $P$, 那么 $Q$” 只是一种解释, 不是定义. 也就是说, $P$ 和 $Q$ 本身不需要有联系. 这里解释一下为什么定义是这样的: $P$ 为假, $P\Rightarrow Q$ 总为真.</p>
<span id="more"></span>

<p>“假推假”为真, 这看上去不符合直觉. 要弄清的是, 是这个逻辑为真, 而不是推出的命题为真.</p>
<p><strong>$P\Rightarrow Q$ 只有在真推假的时候才为假.</strong></p>
<p>这是说, 论断 $P\Rightarrow Q$ 是正确的, 等价于, 永远不会从真命题推出假命题. 换言之, 如果你想说我的论断 $P\Rightarrow Q$ 是错的, 需要且只需要找到一个情况, 使得 $P$ 为真, $Q$ 为假, 其他情况都不管用.</p>
<blockquote>
<p><strong>“如果北京是中国的首都, 那么 $1+1=2$.” 这个论断正确吗? (真推真)</strong></p>
<p>如果你想说我的论断错了, 那么只需要找到情况 “北京是中国的首都, $1+1\ne2$”. 没有这种情况 (真且假), 所以论断是对的.</p>
<p><strong>“如果北京是中国的首都, 那么 $1+1=3$.” 这个论断正确吗? (真推假)</strong></p>
<p>如果你想说我的论断错了, 那么只需要找到情况 “北京是中国的首都, $1+1\ne3$”. 有这种情况 (真且真), 所以论断是错的.</p>
<p><strong>“如果猪会飞, 那么 $1+1=2$.” 这个论断正确吗? (假推真)</strong></p>
<p>如果你想说我的论断错了, 那么只需要找到情况 “猪会飞, $1+1\ne2$”. 没有这种情况 (假且假), 所以论断是对的.</p>
<p><strong>“如果猪会飞, 那么 $1+1=3$.” 这个论断正确吗? (假推假)</strong></p>
<p>如果你想说我的论断错了, 那么只需要找到情况 “猪会飞, $1+1\ne3$”. 没有这种情况 (假且真), 所以论断是对的.</p>
</blockquote>
<p><em>注: 可以看出, 猪会飞可以推出任何结论. 因为你找不到一只会飞的猪来反驳我.</em></p>
<p>这里可以看出这个等价逻辑, $P\Rightarrow Q$ 等价于 $\lnot (P\land\lnot Q)$. 后者同时又是 $\lnot P\lor Q$, 这是说, 要想 $P\Rightarrow Q$ 逻辑正确, 要么前提是错的, 要么结论是对的.</p>
<hr>
<p>有时 $P\Rightarrow Q$ 的正确性比 $Q$ 的正确性更容易看出来. 我们已知推理正确, 那可以得出结论正确吗?<br>看真值表:</p>
<table>
<thead>
<tr>
<th align="center">$P$</th>
<th align="center">$Q$</th>
<th align="center">$P\Rightarrow Q$</th>
</tr>
</thead>
<tbody><tr>
<td align="center">F</td>
<td align="center">T</td>
<td align="center">T</td>
</tr>
<tr>
<td align="center">F</td>
<td align="center">F</td>
<td align="center">T</td>
</tr>
</tbody></table>
<p>可以看出, 如果前提 ($P$) 是错的, 即使我们做出了正确的推理, 也无法判断推出的结果 ($Q$) 是否正确.</p>
<blockquote>
<p>如果 $1&lt;10$, 那么 $1&lt;100$.</p>
<p>如果 $50&lt;10$, 那么 $50&lt;100$.</p>
<p>如果 $200&lt;10$, 那么 $200&lt;100$.</p>
</blockquote>
<p>这三个推理都是正确的. 第一个, 我们从正确的结论推出了正确的结论. 后两个, 我们从错误的结论分别推出了正确和错误的结论.</p>
<hr>
<p>逆否命题的角度:</p>
<p>$P\Rightarrow Q$ 等价于 $\lnot Q\Rightarrow\lnot P$.</p>
<p>于是当 $P$ 为假时, $\lnot Q\Rightarrow\lnot P$ 就是真/假推真, 总为真.</p>
<hr>
<p>集合论的角度:</p>
<p>把命题 $P$ 看成是 $x\in P$, 此时把右边的 $P$ 看成是集合.</p>
<p>$P\Rightarrow Q$ 等价于 $P$ 对应的集合是 $Q$ 对应的集合的子集.</p>
<p>比如, “下雨 $\Rightarrow$ 地面是湿的” 就是<br>$$<br>{\text{下雨时}}\subseteq{\text{地面是湿的时}}.<br>$$</p>
<p>“$n$ 是自然数 $\Rightarrow$ $n$ 是整数” 就是<br>$$<br>\mathbb{N}\subseteq\mathbb{Z}.<br>$$</p>
<p>一个假命题对应的集合是空集 (没有元素可以满足), 而空集是任何集合的子集. 所以假命题可以推出任何命题.</p>
]]></content>
      <categories>
        <category>数学</category>
        <category>逻辑</category>
      </categories>
  </entry>
  <entry>
    <title>Boosting</title>
    <url>/posts/1458/</url>
    <content><![CDATA[<p>$$<br>f(\theta)=L(\theta)+\Omega(\theta)<br>$$</p>
<p>其中 $L$ 是误差函数，衡量拟合程度；$\Omega$ 是正则项，衡量模型复杂度。</p>
<blockquote>
<p>复杂的模型（参数多）：神经网络</p>
<p>简单的模型：树、线性回归</p>
</blockquote>
<p>Tree 不需要正则化，因为不同属性之间不做比较。</p>
<h2 id="Adaptive-Boosting"><a href="#Adaptive-Boosting" class="headerlink" title="Adaptive Boosting"></a>Adaptive Boosting</h2><p> 先训练第一个模型，增加预测错误的样本的权重，并减小预测正确的样本的权重，喂给第二个模型。</p>
<p>最终也会给每个弱模型自己的权重。</p>
<h2 id="Gradient-Boosting"><a href="#Gradient-Boosting" class="headerlink" title="Gradient Boosting"></a>Gradient Boosting</h2><p> 通过梯度下降来最小化误差。在每一次迭代，通过现有集成模型的误差来训练当前的模型。</p>
<span id="more"></span>

<h3 id="XGBoost"><a href="#XGBoost" class="headerlink" title="XGBoost"></a>XGBoost</h3><ul>
<li>每个树内部的并行计算</li>
<li>正则化</li>
<li>处理稀疏性</li>
<li>同层生长（横向优先）</li>
<li>大样本比较慢</li>
<li>只接受数值型，需要 encoding</li>
<li>参数：<ul>
<li><p>General：种类</p>
</li>
<li><p>Tree：</p>
<ul>
<li>eta（学习率）</li>
<li>max_depth, </li>
<li>n_estimators, </li>
<li>subsample（每次取样本的一部分）, </li>
<li>colsample_bytree（取样本特征的一部分）</li>
<li>gamma（生长树的阈值）</li>
<li>alpha（L1 正则）</li>
<li>lambda（L2 正则）</li>
</ul>
</li>
<li><p>Task：</p>
</li>
<li><p>objective</p>
</li>
</ul>
</li>
</ul>
<h3 id="LightGMB"><a href="#LightGMB" class="headerlink" title="LightGMB"></a>LightGMB</h3><ul>
<li>one-side sampling: 全部预测错误的和部分预测正确的，样本少，速度快</li>
<li>exclusive feature bundling</li>
<li>histogram-based algorithm </li>
<li>垂直生长（纵向优先）</li>
<li>容易过拟合</li>
<li>自带 encoding</li>
<li>参数<ul>
<li>Core:<ul>
<li>objective</li>
<li>boosting</li>
<li>num_iterations</li>
<li>learning_rate</li>
<li>num_leaves</li>
</ul>
</li>
<li>Learning:<ul>
<li>max_depth</li>
<li>min_data_in_leaf</li>
<li>feature_fraction</li>
<li>lambda_l1</li>
<li>lambda_l2</li>
</ul>
</li>
<li>IO:<ul>
<li>max_bin（控制 histogram）</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>计算机</category>
        <category>机器学习</category>
      </categories>
  </entry>
  <entry>
    <title>dereference 与 shallow copy</title>
    <url>/posts/6370/</url>
    <content><![CDATA[<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">x = [<span class="number">0</span>]</span><br><span class="line">y = x</span><br></pre></td></tr></tbody></table></figure>
<p>此时修改 <code>x</code> 或 <code>y</code> 不影响另一个变量:</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">x = [<span class="number">1</span>]</span><br><span class="line"><span class="built_in">print</span>(y)  <span class="comment"># [0]</span></span><br></pre></td></tr></tbody></table></figure>

<p>如果有 dereference, 被修改:</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">x = [<span class="number">0</span>]</span><br><span class="line">y = x</span><br><span class="line"></span><br><span class="line">y[<span class="number">0</span>] = [<span class="number">1</span>]</span><br><span class="line"><span class="built_in">print</span>(x)  <span class="comment"># [1]</span></span><br></pre></td></tr></tbody></table></figure>
<span id="more"></span>

<hr>
<p>下面的例子中, <code>foo</code> 中的 <code>x</code> 是一个浅拷贝, 在第一次 <code>append</code> 的时候同时修改了原来的 <code>x</code>, 但在赋值为 2 时浅拷贝指向了新的地址, 之后的操作都是对浅拷贝进行的.</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">foo</span>(<span class="params">x</span>):</span><br><span class="line">    x.append(<span class="number">1</span>)</span><br><span class="line">    x = [<span class="number">2</span>]</span><br><span class="line">    x.append(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line">x = [<span class="number">0</span>]</span><br><span class="line">foo(x)</span><br><span class="line"><span class="built_in">print</span>(x)  <span class="comment"># [0, 1]</span></span><br></pre></td></tr></tbody></table></figure>]]></content>
      <categories>
        <category>计算机</category>
        <category>Python</category>
      </categories>
  </entry>
  <entry>
    <title>分块矩阵的行列式</title>
    <url>/posts/42453/</url>
    <content><![CDATA[<h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>设分块矩阵 $\Gamma=\begin{pmatrix}A&amp;B\C&amp;D\end{pmatrix}$, 那么</p>
<ul>
<li>$A$ 可逆时, $\det(\Gamma)=\det(A)\det(D-CA^{-1}B)$</li>
<li>$D$ 可逆时, $\det(\Gamma)=\det(A-BD^{-1}C)\det(D)$</li>
</ul>
<span id="more"></span>

<h2 id="特殊情况"><a href="#特殊情况" class="headerlink" title="特殊情况"></a>特殊情况</h2><ul>
<li><p>$\begin{equation}\det\begin{pmatrix}<br>  A&amp;0\ C&amp;D<br>\end{pmatrix}=\det(A)\det(D)\label{lower}\end{equation}$</p>
</li>
<li><p>$\begin{equation}\label{upper}\det\begin{pmatrix}<br>  A&amp;B\ 0&amp;D<br>\end{pmatrix}=\det(A)\det(D)\end{equation}$</p>
</li>
<li><p>$\begin{equation}\label{diag}\det\begin{pmatrix}<br>  A&amp;0\ 0&amp;D<br>\end{pmatrix}=\det(A)\det(D)\end{equation}$</p>
</li>
<li><p>$\begin{equation}\label{commute}\text{当 $CD=DC$ 时, }\det(\Gamma)=\det(AD-BC)\end{equation}$</p>
</li>
<li><p>$\begin{equation}\label{AB}\det\begin{pmatrix}<br>A&amp;B\B&amp;A<br>\end{pmatrix}=\det(A+B)\det(A-B)\end{equation}$</p>
</li>
</ul>
<h2 id="证明"><a href="#证明" class="headerlink" title="证明"></a>证明</h2><p>先证 $\eqref{lower}$ : 对 $A$ 部分进行(倍加)<strong>行变换</strong>化为下三角阵, 再对 $D$ 部分进行<strong>列变换</strong>化为下三角阵. 这并不影响 $A$ , $D$ 和分块矩阵的行列式, 且都化为了对角线的乘积. 结论显然.</p>
<p>$\eqref{upper}$ 的证明可以通过取转置得到, $\eqref{diag}$ 是一种特殊情况.</p>
<p>对于一般情况, 需要利用<br>$$\begin{pmatrix}<br>    A&amp;B\C&amp;D<br>\end{pmatrix}\begin{pmatrix}<br>    I&amp;0\ -D^{-1}C&amp;I<br>\end{pmatrix}=\begin{pmatrix}<br>    A-BD^{-1}C&amp;B\0&amp;D<br>\end{pmatrix}.$$<br>可以把它想成是一种列变换: 把第二列右乘 $-D^{-1}C$ 加到第一列.<br>两边取行列式并利用 $\det(AB)=\det(A)\det(B)$ 和 $\eqref{upper}$ , 就得到了 $\det(\Gamma)=\det(A-BD^{-1}C)\det(D)$ . 另外一个结论可以利用行变换类似得到.</p>
<hr>
<p>下面证 $\eqref{commute}$ . 注意已知 $CD=DC$.</p>
<p>我们可以利用<br>$$\begin{pmatrix}<br>    A&amp;B\C&amp;D<br>\end{pmatrix}\begin{pmatrix}<br>    D&amp;0\-C&amp;I<br>\end{pmatrix}=\begin{pmatrix}<br>    AD-BC&amp;B\0&amp;D<br>\end{pmatrix}.$$<br>两边取行列式就得到了<br>$$\det(\Gamma)\det(D)=\det(AD-BC)\det(D).$$<br>如果 $\det(D)\ne0$ , 那么消去 $\det(D)$ 即得结论.</p>
<p>也可以利用开头的结论$$\begin{aligned}<br>    \det(\Gamma)<br>    &amp;=\det(A-BD^{-1}C)\det(D)\<br>    &amp;=\det(AD-BD^{-1}CD)\<br>    &amp;=\det(AD-BD^{-1}DC)\<br>    &amp;=\det(AD-BC).\<br>\end{aligned}$$</p>
<p>当 $\det(D)=0$ 时, 可以给 $D$ 一个扰动. 也就是说, 我们用 $D_\varepsilon=D+\varepsilon I$ 代替 $D$ , 其中 $D_\varepsilon$ 可逆且 $\varepsilon$ 是可以任意小的正数. 这个结论可以利用特征值的性质证明, 也可以利用关于$\varepsilon$的多项式 $\det(D_\varepsilon)$ 只在有限个点上取 $0$.</p>
<p>不难看到 $D_\varepsilon$ 仍然是与 $C$ 可交换的. 然后利用上面的方法可以得到$$\det(\Gamma)=\det(AD_\varepsilon-BC).$$<br>令 $\varepsilon\to0$ 便得到了 $\det(\Gamma)=\det(AD-BC).$</p>
<p>这是由于等号右边是关于 $\varepsilon$ 的多项式, 所以连续, 而 $D_0=D$.</p>
<hr>
<p>对 $\eqref{AB}$, 只需要对$$\begin{pmatrix}<br>    I&amp;0\-I&amp;I<br>\end{pmatrix}\begin{pmatrix}<br>    A&amp;B\B&amp;A<br>\end{pmatrix}\begin{pmatrix}<br>    I&amp;0\I&amp;I<br>\end{pmatrix}=\begin{pmatrix}<br>    A+B&amp;B\0&amp;A-B<br>\end{pmatrix}$$两边取行列式.</p>
]]></content>
      <categories>
        <category>数学</category>
        <category>代数</category>
        <category>线性代数</category>
      </categories>
  </entry>
  <entry>
    <title>$f(A)$的特征值</title>
    <url>/posts/3877/</url>
    <content><![CDATA[<p><strong>引理 (Schur’s Lemma): 若$A$是数域$F$上的$n$阶方阵, 且$A$的特征值都在$F$中, 那么$A$与一个上三角阵相似.</strong></p>
<p>**证明: **</p>
<p>归纳法. 当$n=1$时显然成立: 此时$A$本身是上三角阵.</p>
<p>假设结论对$n-1$阶方阵成立, 且$A\in F^{n\times n}$的特征值都在$F$中. 记特征向量$v_1$对应的特征值是$\lambda_1\in F$, 并把$v_1$扩展为$F^n$的一组基$\mathcal B=(v_1,\ldots,v_n)$. 在这组基下, $A$被相似变换为矩阵$$[A]_\mathcal{B}=\begin{bmatrix}\lambda_1 &amp; *\ 0 &amp; A_1\end{bmatrix},$$ 其中$A_1\in F^{(n-1)\times (n-1)}$.</p>
<span id="more"></span>

<p>由于相似矩阵有相同的特征多项式, 于是$$\det(xI-A)=\det(xI-[A]_\mathcal B)=(x-\lambda_1)\det(xI-A_1).$$ 又因为$\det(xI-A)$的根都在$F$中, 所以$\det(xI-A_1)$的根也都在$F$中, 这说明$A_1$是特征值都在$F$中的$n-1$阶方阵.</p>
<p>于是根据归纳假设, 存在可逆阵$P\in F^{(n-1)\times(n-1)}$使得$$U=PA_1P^{-1}$$是上三角阵. 那么只需构造可逆阵$$Q=\begin{bmatrix}1&amp;0\0&amp;P\end{bmatrix},$$便有$$Q[A]_\mathcal B Q^{-1}=\begin{bmatrix}1&amp;0\0&amp;P\end{bmatrix}\begin{bmatrix}\lambda_1&amp;*\0&amp;A_1\end{bmatrix}\begin{bmatrix}1&amp;0\0&amp;P^{-1}\end{bmatrix}=\begin{bmatrix}\lambda_1&amp;*\0&amp;U\end{bmatrix}$$是上三角阵.</p>
<p>这说明$A$与一个上三角阵相似, 归纳法完成.</p>
<p><em>注: 一个更强的结论是Jordan标准型.</em></p>
<hr>
<p><strong>定理: 若$A$是数域$F$上的$n$阶方阵, 且$A$的特征值都在$F$中. $f$是$F$上的多项式, 那么$a$是$f(A)$的特征值$\iff$$a=f(\lambda)$, 其中$\lambda$是$A$的特征值.</strong></p>
<p><strong>证明:</strong> </p>
<p>$(\Longleftarrow)$容易, 略.</p>
<p>$(\Longrightarrow)$根据引理, $A$与一个上三角阵$T$相似:<br>$$<br>A=Q^{-1}TQ.<br>$$<br>由于$f$是多项式, 那么<br>$$<br>f(A)=f(Q^{-1}TQ)=Q^{-1}f(T)Q.<br>$$<br>根据上三角阵的性质, $f(T)$也是上三角阵, 且$f(T)$的对角元恰好是$f(\lambda)$, 其中$\lambda$是$T$的对角元.</p>
<p>因为相似矩阵有相同的特征值, 且上三角阵的对角元与其特征值对应, 于是$f(A)$的特征值都是$f(\lambda)$的形式, 其中$\lambda$是$A$的特征值.</p>
]]></content>
      <categories>
        <category>数学</category>
        <category>代数</category>
        <category>线性代数</category>
      </categories>
  </entry>
  <entry>
    <title>定积分性质例题</title>
    <url>/posts/5066/</url>
    <content><![CDATA[<p><strong>问题：在 $[0,\pi]$ 上的连续函数 $f$ 满足</strong><br>$$<br>\int_0^\pi f(x)\sin x,\mathrm dx=\int_0^\pi f(x)\cos x,\mathrm dx=0,<br>$$<br><strong>证明 $f$ 在 $(0,\pi)$ 内至少有两个零点.</strong></p>
<span id="more"></span>

<p><strong>证明:</strong></p>
<p>不妨设 $f$ 不恒为 0. </p>
<p>若 $f(x)$ 在 $(0,\pi)$ 内无零点, 则不变号, 不妨设 $f(x)&gt;0$. 此时$$f(x)\sin x&gt;0,\forall x\in(0,\pi)\implies\int_0^1f(x)\sin x,\mathrm dx&gt;0,$$ 与条件矛盾. 于是 $f(x)$ 在 $(0,\pi)$ 上变号, 至少有一个零点.</p>
<p>若只有一个变号零点 $x_0\in(0,\pi)$, 不妨设在 $(0,x_0)$ 上 $f(x)&gt;0$, $(x_0,\pi)$ 上 $f(x)&lt;0$. 那么<br>$$<br>F(x)=f(x)\sin(x-x_0)\leq0,<del>\forall x\in(0,\pi).<br>$$<br>又因为<br>$$<br>\begin{align*}\int_0^\pi F(x),\mathrm dx&amp;=\cos x_0\int_0^\pi f(x)\sin x,\mathrm dx-\sin x_0\int_0^\pi f(x)\cos x,\mathrm dx\<br>&amp;=\cos x_0\cdot0-\sin x_0\cdot 0\<br>&amp;=0,<br>\end{align*}<br>$$<br>故 $F(x)\equiv0$, 于是 $f(x)\equiv0,</del>\forall x\in(0,\pi)$, 矛盾.</p>
<p>于是 $f(x)$ 在 $(0,\pi)$ 上至少有两个零点.</p>
]]></content>
      <categories>
        <category>数学</category>
        <category>分析</category>
        <category>微积分</category>
        <category>单变量微积分</category>
      </categories>
  </entry>
  <entry>
    <title>泛函基础</title>
    <url>/posts/64221/</url>
    <content><![CDATA[<h2 id="Banach-空间"><a href="#Banach-空间" class="headerlink" title="Banach 空间"></a>Banach 空间</h2><p>一个完备的赋范空间.</p>
<blockquote>
<p>🌰 欧式空间装备了 $p$ 范数.</p>
</blockquote>
<span id="more"></span>

<h2 id="Hilbert-空间"><a href="#Hilbert-空间" class="headerlink" title="Hilbert 空间"></a>Hilbert 空间</h2><p>一个完备的内积空间.</p>
<blockquote>
<p>🌰 欧式空间装备了 $(u,v)_{\R^n}=u^Tv$.</p>
<p>🌰 平方可积的函数空间装备了$$(u,v)_{L^2(\Omega)}=\int_\Omega uv\d x$$</p>
</blockquote>
<ul>
<li>$H^1(\Omega)$: 平方可积, 导数平方可积的函数空间, 装备了 $$(u,v)_{H^1(\Omega)}=\int_\Omega uv+\nabla u\cdot \nabla v\d x$$</li>
<li>$H_0^1(\Omega)$: 平方可积, 边界为0, 导数平方可积的函数空间, 装备了 $$(u,v)_{H_0^1(\Omega)}=\int_\Omega \nabla u\cdot \nabla v\d x$$</li>
<li>$H(\mathrm{div}, \Omega)$: 平方可积, 散度平方可积的(向量值)函数空间, 装备了 $$(u,v)_{H(\mathrm{div,\Omega})}=\int_\Omega u\cdot v+\nabla\cdot u\nabla\cdot v\d x$$</li>
<li>$H(\mathrm{curl}, \Omega)$: 平方可积, 旋度平方可积的(向量值)函数空间, 装备了 $$(u,v)_{H(\mathrm{curl,\Omega})}=\int_\Omega u\cdot v+\nabla\times u\cdot\nabla\times v\d x$$</li>
</ul>
<h3 id="线性泛函"><a href="#线性泛函" class="headerlink" title="线性泛函"></a>线性泛函</h3><p>一个映射 $j\colon X\to\R$ (把 Hilbert 空间中的函数变成数), 满足 $$j(\alpha u+\beta v)=\alpha j(u)+\beta j(v)$$</p>
<blockquote>
<p>🌰 在给定区间上积分; 在给定点取值; 在给定点求方向导数</p>
</blockquote>
<p>有界线性泛函: 存在 $L\in[0,\infty)$ 使得 $$|j(u)|\leq L|u|_X,\quad\forall u\in X.$$</p>
<p><strong>引理: 有界性$\iff$连续性.</strong></p>
<h3 id="对偶空间"><a href="#对偶空间" class="headerlink" title="对偶空间"></a>对偶空间</h3><p>一个 Hilbert 空间 $X$ 的对偶空间 $X^*$ 是所有有界线性泛函的集合, 装备了范数$$|j|<em>{X^*}=\sup</em>{|u|<em>X=1}|j(u)|,$$ 也是一个 Hilbert 空间.<br>根据定义,<br>$$<br>|j(u)|\leq |j|</em>{X^*}|u|_X.<br>$$<br>$j$ 对 $u$ 的<strong>作用</strong>: $\langle j,u\rangle=j(u)$</p>
<blockquote>
<p>🌰 给定 $f$, $F(v)=\int_\Omega fv\d x$ 是 $H_0^1(\Omega)$ 的对偶空间中的元素.</p>
</blockquote>
<p><strong>引理: $V\subset W\implies W^<em>\subset V^</em>$.</strong></p>
<h3 id="Riesz-表示定理"><a href="#Riesz-表示定理" class="headerlink" title="Riesz 表示定理"></a>Riesz 表示定理</h3><p>$X^*$ 上的有界线性泛函 $j$ 可以被原空间 $X$ 上的元素 $g$ <strong>唯一</strong>表示: $$\langle j,u\rangle=(g,u).$$<br>且范数相同:$$|j|_{X^*}=|g|_X.$$<br>这是说, 任何有界线性泛函的作用都是某个内积.</p>
<blockquote>
<p>🌰 $L^2(\Omega)$ 上的有界线性泛函 $j(v)=\int_\Omega v\d x$, 实际上就是 $v$ 和常函数 $1$ 的内积.</p>
</blockquote>
<p>Rieze 映射 $\mathcal{R}\colon X^*\to X$, $j\mapsto g$ 是一个保距同构. 实际上根据定义,<br>$$<br>(\mathcal{R}j,v)=j(v).<br>$$</p>
<h2 id="Lebesgue-空间"><a href="#Lebesgue-空间" class="headerlink" title="Lebesgue 空间"></a>Lebesgue 空间</h2><p>Lebesgue $p$ 范数: $$|u|_{L^p(\Omega)}=\left(\int_\Omega|u|^p\d x\right)^{1\over p}$$</p>
<p>$$|u|_{L^\infty(\Omega)}=\mathrm{ess\ sup}{|u(x)|\colon x\in\Omega}$$</p>
<p>Lebesgue 空间: $$L^p(\Omega)={u\colon\Omega\to\R\colon |u|_{L^p(\Omega)}&lt;\infty}$$</p>
<p>$p$ 越大, 越不能容忍奇点处的发散.</p>
<blockquote>
<p>取 $\Omega=(0,1)$, 那么 $L^1$ 接受 ${1\over x^{0.99}}$ 而不接受 $\frac 1x$. 前者在 0 处的发散率慢一些.</p>
<p>$L^2$ 接受 ${1\over x^{0.4999}}$, 而不接受 $1\over\sqrt x$.</p>
</blockquote>
<p><em>注: $L^p(\Omega)$ 中的元素实际上是函数的等价类, 因为 Lebesgue 积分不区分几乎处处相等的函数.</em></p>
<p><strong>定理: $p\in[1,\infty]$ 的 Lebesgue 空间都是 Banach 空间, $p=2$ 时也是 Hilbert 空间.</strong></p>
<h2 id="Sobolev-空间"><a href="#Sobolev-空间" class="headerlink" title="Sobolev 空间"></a>Sobolev 空间</h2><h3 id="弱导数"><a href="#弱导数" class="headerlink" title="弱导数"></a>弱导数</h3><p>这是利用分部积分做的推广, $g$ 是 $f_i’$ 的弱化. 其中 $\phi$ 是任意的测试函数.<br>$$\int_\Omega g\phi\d x=-\int_\Omega f{\partial\phi\over\partial x_i}\d x,\ \forall\phi\in C_0^\infty(\Omega).$$<br>其中 $f,g$ 在 $L_{\text{loc}}^1(\Omega)$ 中, 这指的是在 $\Omega^\circ$ 中的任意紧子集上 $L^1$ 可积. 这个集合包括 $L^1(\Omega)$ 和 $C^0(\Omega)$.</p>
<p>弱导数在不区分零测集时唯一.</p>
<blockquote>
<p>任何<strong>分段可导</strong>的<strong>连续</strong>函数都是弱可导的.</p>
</blockquote>
<h3 id="多维指标"><a href="#多维指标" class="headerlink" title="多维指标"></a>多维指标</h3><p>如果 $\alpha=(\alpha_1,\ldots,\alpha_n)$, 那么 $$\phi^{(\alpha)}=\left(\partial_{x_1}\right)^{\alpha_1}\cdots(\partial_{x_n})^{\alpha_n}\phi.$$<br>定义 $|\alpha|=\alpha_1+\cdots+\alpha_n$.</p>
<h3 id="高阶弱导数"><a href="#高阶弱导数" class="headerlink" title="高阶弱导数"></a>高阶弱导数</h3><p>推广 $f^{(\alpha)}$ 为 $D^\alpha f$, 需要存在一个 $g$:<br>$$\int_{\Omega}g\phi\d x=(-1)^{|\alpha|}\int_{\Omega}fg^{(\alpha)}\d x, \quad\forall\phi\in C_0^\infty(\Omega).$$</p>
<h3 id="Sobolev-范数"><a href="#Sobolev-范数" class="headerlink" title="Sobolev 范数"></a>Sobolev 范数</h3><p>$$<br>|f|<em>{W_p^k(\Omega)}=\left(\sum</em>{|\alpha|\leq k}|D^\alpha f|<em>{L^p(\Omega)}^p\right)^\frac1p<br>$$<br>$$<br>|f|</em>{W_\infty^k(\Omega)}=\max_{|\alpha|\leq k}|D^\alpha f|_{L^\infty(\Omega)}<br>$$</p>
<h3 id="Sobolev-空间-1"><a href="#Sobolev-空间-1" class="headerlink" title="Sobolev 空间"></a>Sobolev 空间</h3><p>$$W_p^k(\Omega)={f\in L_{\text{loc}}^1(\Omega)\colon |f|_{W_p^k(\Omega)}&lt;\infty}$$<br>是一个 Banach 空间.<br>$$H^k(\Omega)=W_2^k(\Omega)$$ 是 Hilbert 空间.</p>
<p>它的范数<br>$$<br>|f|<em>{H^k}^2=\sum</em>{|\alpha|\leq k}|D^\alpha f|<em>{L^2}^2<br>$$<br>比如 $|f|</em>{H^1}^2=|f|<em>{L^2}^2+|f’|</em>{L^2}^2$.</p>
<blockquote>
<p>$W_p^0(\Omega)=L^p(\Omega)$ 不要求导数.</p>
</blockquote>
<h3 id="Sobolev-不等式"><a href="#Sobolev-不等式" class="headerlink" title="Sobolev 不等式"></a>Sobolev 不等式</h3><p>如果有足够的弱导数, 那么函数连续有界:</p>
<p>$\Omega\in\R^n$ 是 Lipschitz 区域, $k$ 是正整数, $p\geq1$. 若有<br>$$<br>\begin{gathered}<br>k\geq n,\quad p=1\<br>k&gt;n/p,\quad p&gt;1<br>\end{gathered}<br>$$<br>那么存在常数 $C$ 使得 $\forall u\in W_p^k(\Omega)$,<br>$$<br>|u|<em>{L^\infty(\Omega)}\leq C|u|</em>{W_p^k(\Omega)}.<br>$$<br>$u$ 的等价类中有一个连续函数.</p>
<h4 id="boxed-n-x3D-1"><a href="#boxed-n-x3D-1" class="headerlink" title="$\boxed{n=1}$"></a>$\boxed{n=1}$</h4><p>只要 $k\geq1$, 换言之只要有一阶弱导数, 就连续.</p>
<p><strong>定理: 有界区域上的分段光滑函数在 $H^1$ 中 $\iff$ 连续.</strong></p>
<p>$$H^1\subset C$$</p>
<h4 id="boxed-n-x3D-2"><a href="#boxed-n-x3D-2" class="headerlink" title="$\boxed{n=2}$"></a>$\boxed{n=2}$</h4><p>$$<br>W_1^1(\Omega)\not\subset C(\Omega),\quad W_1^2(\Omega)\subset C(\Omega)<br>$$<br>$$<br>H^1\not\subset C,\quad H^2\subset C<br>$$</p>
<h4 id="boxed-n-x3D-3"><a href="#boxed-n-x3D-3" class="headerlink" title="$\boxed{n=3}$"></a>$\boxed{n=3}$</h4><p>$$<br>W_1^2\not\subset C,\quad W_1^3\subset C<br>$$<br>$$<br>H^1\not\subset C,\quad H^2\subset C<br>$$</p>
<h3 id="Sobolev-嵌入"><a href="#Sobolev-嵌入" class="headerlink" title="Sobolev 嵌入"></a>Sobolev 嵌入</h3><p>$$<br>W_p^1\subseteq L^{p^*},\quad\text{其中 }{1\over p^*}=\frac1p-\frac1n.<br>$$</p>
]]></content>
      <categories>
        <category>数学</category>
        <category>分析</category>
        <category>泛函分析</category>
      </categories>
  </entry>
  <entry>
    <title>Hexo 用法记录</title>
    <url>/posts/16107/</url>
    <content><![CDATA[<p>插入图片:</p>
<figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"/file/*"</span> <span class="attr">width</span>=<span class="string">"250"</span> <span class="attr">height</span>=<span class="string">"250"</span>/&gt;</span></span><br><span class="line">{% asset_img image.jpg This is an image %}</span><br></pre></td></tr></tbody></table></figure>

<p>嵌入 pdf:</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">{% pdf /file/*.pdf %}</span><br></pre></td></tr></tbody></table></figure>

<p>链接文章:</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">{% post_link * 说明 %}</span><br></pre></td></tr></tbody></table></figure>
]]></content>
      <categories>
        <category>计算机</category>
        <category>hexo</category>
      </categories>
  </entry>
  <entry>
    <title>Hesse 矩阵与Jacobi 矩阵</title>
    <url>/posts/44547/</url>
    <content><![CDATA[<p>Hessian 是<strong>数量场</strong>的二阶导: $$H_{i,j}={\partial f\over\partial x_i\partial x_j}$$</p>
<p>Jacobian 是<strong>向量场</strong>的一阶导: $$J_{i,j}={\partial\bm{f_i}\over\partial x_j}$$</p>
<p>二者的关系: Hessian 是数量场梯度的 Jacobian, 即 $H(f)=J(\nabla f)$.</p>
<blockquote>
<p>🌰 $f(x,y)=x^2+y^2$</p>
<ul>
<li>$H(f)=\begin{bmatrix}2&amp;0\0&amp;2\end{bmatrix}$</li>
<li>$J(\nabla f)=J\left(\begin{bmatrix}<br>  2x\2y<br>\end{bmatrix}\right)=\begin{bmatrix}2&amp;0\0&amp;2\end{bmatrix}$</li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>数学</category>
        <category>分析</category>
        <category>微积分</category>
        <category>多元微积分</category>
      </categories>
  </entry>
  <entry>
    <title>高维分部积分</title>
    <url>/posts/22001/</url>
    <content><![CDATA[<p>$$\boxed{<br>\int_\Omega \nabla\cdot \bm u v\d x=\int_{\partial\Omega}v\boldsymbol{u}\cdot\boldsymbol{n}\d s-\int_\Omega\nabla v\cdot\boldsymbol{u}\d x}<br>$$</p>
<p>$$\boxed{<br>\int_\Omega(\nabla\times\bm u)\cdot\bm v\d x=\int_\Omega(\nabla\times\bm v)\cdot \bm u\d x+\int_{\partial\Omega}(\bm u\times \bm v)\cdot\bm n\d s}<br>$$</p>
<span id="more"></span>

<p>特殊情况 (Green’s first identity):</p>
<p>$$<br>\int_\Omega\nabla u\cdot\nabla v\d x=\int_{\partial\Omega}v\nabla u\cdot\boldsymbol{n}\d s-\int_\Omega v\nabla^2u\d x<br>$$</p>
<p>$$<br>\int_\Omega(\nabla\times\nabla\times\bm u)\cdot\bm v\d x=\int_\Omega (\nabla\times \bm u)\cdot(\nabla\times\bm v)\d x-\int_{\partial\Omega}(\bm v\times\nabla\times\bm u)\cdot n\d s<br>$$</p>
<hr>
<p>$\nabla$ 的性质:</p>
<p>$$<br>\begin{equation}\label{eq:div}<br>\nabla\cdot(v\boldsymbol{u})=v\nabla\cdot \boldsymbol{u}+\nabla v\cdot \boldsymbol{u}<br>\end{equation}<br>$$</p>
<p>$$<br>\begin{equation}\label{eq:div-cross}<br>\nabla\cdot(\bm {u}\times \bm{v})=(\nabla\times \bm u)\cdot \bm v-\bm u\cdot(\nabla\times \bm v)<br>\end{equation}<br>$$</p>
<p>对 $(\ref{eq:div})$ 和 $(\ref{eq:div-cross})$ 两边积分即得前两个式子. 其中用到了散度定理.</p>
<p>在 $(\ref{eq:div-cross})$ 中取 $\bm v$ 和 $\nabla\times\bm u$ 得到<br>$$<br>\nabla\cdot(\bm v\times\nabla\times \bm u)=(\nabla\times\bm v)\cdot(\nabla\times\bm u)-\bm v\cdot(\nabla\times\nabla\times\bm u),<br>$$<br>两边积分即得<br>$$<br>\int_\Omega(\nabla\times\nabla\times\bm u)\cdot\bm v\d x=\int_\Omega (\nabla\times \bm u)\cdot(\nabla\times\bm v)\d x-\int_{\partial\Omega}(\bm v\times\nabla\times\bm u)\cdot \bm n\d s.<br>$$</p>
<p>其中根据混合积的性质, 后一项等于<br>$$<br>\begin{align*}<br>\int_{\partial\Omega}\bm n\cdot(\bm v\times\nabla\times\bm u)\d s=\int_{\partial\Omega}\bm v\cdot(\nabla\times\bm u\times \bm n)\d s<br>\end{align*}.<br>$$</p>
]]></content>
      <categories>
        <category>数学</category>
        <category>分析</category>
        <category>微积分</category>
        <category>多元微积分</category>
      </categories>
  </entry>
  <entry>
    <title>常用积分</title>
    <url>/posts/23548/</url>
    <content><![CDATA[<h2 id="不定积分"><a href="#不定积分" class="headerlink" title="不定积分"></a>不定积分</h2><p>$$\int\frac{1}{x^2+a^2} ,\mathrm{d}x=\frac 1a\arctan\frac xa+C$$<br>$$\int\frac{1}{x^2-a^2} ,\mathrm{d}x=\frac {1}{2a}\ln\left|\frac{x-a}{x+a}\right|+C$$<br>$$\int\frac{1}{\sqrt{x^2\pm a^2}} ,\mathrm{d}x=\ln\left|x+\sqrt{x^2\pm a^2}\right|+C$$<br>$$\int\frac{1}{\sqrt{a^2-x^2}} ,\mathrm{d}x=\arcsin \frac xa+C$$<br>$$\int\frac{1}{\sqrt{1+x^2}} ,\mathrm{d}x=\sinh^{-1}x+C$$</p>
<span id="more"></span>

<h2 id="定积分"><a href="#定积分" class="headerlink" title="定积分"></a>定积分</h2><p>$$\int_{-a}^af(x),\mathrm{d}x=\int_{0}^a\left(f(x)+f(-x)\right),\mathrm{d}x$$</p>
<p>$$\int_{0}^{\pi}xf(\sin x),\mathrm{d}x=\frac\pi2\int_{0}^\pi f(\sin x),\mathrm{d}x$$</p>
<a href="/posts/46715/" title="$$\int_0^1(1-x^2)^n\d x={(2n)!!\over(2n+1)!!}$$">$$\int_0^1(1-x^2)^n\d x={(2n)!!\over(2n+1)!!}$$</a>

<h2 id="反常积分"><a href="#反常积分" class="headerlink" title="反常积分"></a>反常积分</h2><a href="/posts/48382/" title="$$\int_{-\infty}^\infty \e^{-x^2}\d x=\sqrt\pi$$">$$\int_{-\infty}^\infty \e^{-x^2}\d x=\sqrt\pi$$</a>

<p>$$\int_0^{\frac \pi2}\ln(\sin x)=\int_0^{\frac \pi2}\ln(\cos x)=-\frac\pi2\ln2$$</p>
]]></content>
      <categories>
        <category>数学</category>
        <category>分析</category>
        <category>微积分</category>
        <category>单变量微积分</category>
      </categories>
  </entry>
  <entry>
    <title>分部积分的表格法</title>
    <url>/posts/42394/</url>
    <content><![CDATA[<p>$$\int (x^2+x)\e^{2x}\d x$$<br>第一行求导, 第二行积分, 直到求导结果为 0:<br><img src="/file/xex.png" width="400"><br>正负交替相加:<br>$$<br>\text{原式}=\left({x^2+x\over2}-{2x+1\over4}+\frac14\right)\e^{2x}=\frac12 x^2\e^{2x}+C.<br>$$</p>
<span id="more"></span>

<hr>
<p>若多次求导不能为 0, 需要在最后加一个积分项, 其符号与上一个相反. 比如出现循环:</p>
<p>$$<br>\int \e^{x}\sin 2x\d x<br>$$</p>
<img src="/file/sine.png" width="350">

<p>$$<br>\int \e^x\sin 2x\d x=(\sin 2x-2\cos 2x)\e^x-4\int\e^{x}\sin 2x\d x,<br>$$</p>
<p>那么<br>$$<br>\text{原式}=\frac15(\sin 2x-2\cos2x)\e^x+C.<br>$$</p>
<hr>
<p>或者积分被简化:<br>$$<br>\int 2x\arctan x\d x<br>$$<br><img src="/file/xarctanx.png" width="250"></p>
<p>$$<br>\text{原式}=(x^2+1)\arctan x-\int 1\d x=(x^2+1)\arctan x-x+C.<br>$$</p>
]]></content>
      <categories>
        <category>数学</category>
        <category>分析</category>
        <category>微积分</category>
        <category>单变量微积分</category>
      </categories>
  </entry>
  <entry>
    <title>拉格朗日插值</title>
    <url>/posts/17585/</url>
    <content><![CDATA[<p>$$p(x)=\sum_{k=0}^n y_kl_k(x)$$</p>
<h2 id="基函数"><a href="#基函数" class="headerlink" title="基函数"></a>基函数</h2><p>给定点 $x_0,\ldots,x_n$. 问题归结于寻找<strong>基函数</strong> $$l_k(x_j)=\begin{cases}<br>    1\quad j=k\<br>    0\quad j\ne k<br>\end{cases},$$<br>因为插值多项式可以写成它们的线性组合.</p>
<span id="more"></span>

<p>根据零点分布可以设 $$l_k(x)=c\prod_{j\ne k}(x-x_j),$$ 代入 $x_k$ 得到</p>
<p>$$<br>1=l_k(x_k)=c\prod_{j\ne k}(x_k-x_j),<br>$$</p>
<p>于是 $c=\dfrac{1}{\prod_{j\ne k}(x_k-x_j)}$. 这就得到了 $$l_k(x)=\frac{\prod_{j\ne k}(x-x_j)}{\prod_{j\ne k}(x_k-x_j)}.$$</p>
<p><em>注: 这个 $c$ 实际上是 Barycentric 权重, 即后面定义的 $\lambda_k$.</em></p>
<p>它实际上就是一个特殊的多项式. 比如这是给定 $x_{0}:x_4=-2:2$, 在 $x_3$ 处取 $1$ 的基函数 $$l_3(x)=\frac{(x+2)(x+1)x(x-2)}{(1+2)(1+1)\cdot1\cdot(1-2)}$$</p>
<img src="/file/l_basis.svg">

<p>定义节点函数 $$l(x)=\prod_{k=0}^n(x-x_k),$$ 可以得到基函数 $$l_j(x)={l(x)\over l’(x_j)(x-x_j)}$$</p>
<h2 id="Barycentric-插值公式"><a href="#Barycentric-插值公式" class="headerlink" title="Barycentric 插值公式"></a>Barycentric 插值公式</h2><p>$$<br>p(x)={\sum_{k=0}^n{\lambda_k y_k\over x-x_k}\over\sum_{k=0}^n{\lambda_k\over x-x_k}},<br>$$<br>其中 $$\lambda_k={1\over\prod_{j\ne k}(x_k-x_j)}$$</p>
<h2 id="误差"><a href="#误差" class="headerlink" title="误差"></a>误差</h2><p>$f\in C^{n+1}([a,b])$时<br>$$f(x)-p(x)={f^{(n+1)}(\xi)\over (n+1)!}l(x),$$<br>其中 $\xi\in(a,b)$ 与 $x$ 有关.</p>
<hr>
<p>$f$ 在包含节点的区域 $\Omega$ 上解析时</p>
<p>$$p(x)={1\over 2\pi i}\int_\Gamma{f(t)(l(t)-l(x))\over l(t)(t-x)}\d x$$<br>$$f(x)-p(x)={1\over 2\pi i}\int_\Gamma {l(x)\over l(t)}{f(t)\over t-x}\d t$$</p>
]]></content>
      <categories>
        <category>数学</category>
        <category>数值分析</category>
      </categories>
  </entry>
  <entry>
    <title>决策树的信息增益</title>
    <url>/posts/56956/</url>
    <content><![CDATA[<p>基于熵减, 或者说信息增益, 来决定决策树的 feature 选择. ID3 算法优先 split 可以带来最大熵减的那个 feature, 也就是一种贪心算法.</p>
<span id="more"></span>

<p>如果一件事情的发生概率为 $p$, 它带来的 entropy 被定义为 $-\log_2 p$: 它的概率越小, 给系统带来的扰动就越大, 熵趋于无穷; 它的概率为 1 时, 没有任何不确定性, 熵为 0. 可以按不同的事件划分做加权平均. 在下面的例子中, A, B, C 为 feature, U 为 label.</p>
<table>
<thead>
<tr>
<th>Real Avatar(A)</th>
<th>Friends(B)</th>
<th>Blog(C)</th>
<th>Real User Account (U)</th>
</tr>
</thead>
<tbody><tr>
<td>N</td>
<td>S</td>
<td>S</td>
<td>N</td>
</tr>
<tr>
<td>Y</td>
<td>L</td>
<td>S</td>
<td>Y</td>
</tr>
<tr>
<td>Y</td>
<td>M</td>
<td>L</td>
<td>Y</td>
</tr>
<tr>
<td>Y</td>
<td>M</td>
<td>M</td>
<td>Y</td>
</tr>
<tr>
<td>Y</td>
<td>M</td>
<td>L</td>
<td>Y</td>
</tr>
<tr>
<td>N</td>
<td>L</td>
<td>M</td>
<td>Y</td>
</tr>
<tr>
<td>N</td>
<td>S</td>
<td>M</td>
<td>N</td>
</tr>
<tr>
<td>N</td>
<td>M</td>
<td>L</td>
<td>Y</td>
</tr>
<tr>
<td>N</td>
<td>S</td>
<td>M</td>
<td>Y</td>
</tr>
<tr>
<td>Y</td>
<td>S</td>
<td>S</td>
<td>N</td>
</tr>
</tbody></table>
<p>一共有 10 条数据, Y 占 7 条, N 占 3 条. 那么本身的熵为<br>$$<br>H=-0.7\times\log_20.7-0.3\times\log_20.3=0.8813<br>$$</p>
<p><strong>以计算 A 为例…</strong></p>
<p>A 把数据分成了两类. 对 Y 类:</p>
<table>
<thead>
<tr>
<th>Real Avatar(A)</th>
<th>Real User Account (U)</th>
</tr>
</thead>
<tbody><tr>
<td>Y</td>
<td>Y</td>
</tr>
<tr>
<td>Y</td>
<td>Y</td>
</tr>
<tr>
<td>Y</td>
<td>Y</td>
</tr>
<tr>
<td>Y</td>
<td>Y</td>
</tr>
<tr>
<td>Y</td>
<td>N</td>
</tr>
</tbody></table>
<p>熵为<br>$$<br>-0.8\times\log_20.8-0.2\times\log_20.2=0.7219<br>$$<br>对 N 类:</p>
<table>
<thead>
<tr>
<th>Real Avatar(A)</th>
<th>Real User Account (U)</th>
</tr>
</thead>
<tbody><tr>
<td>N</td>
<td>N</td>
</tr>
<tr>
<td>N</td>
<td>Y</td>
</tr>
<tr>
<td>N</td>
<td>N</td>
</tr>
<tr>
<td>N</td>
<td>Y</td>
</tr>
<tr>
<td>N</td>
<td>Y</td>
</tr>
</tbody></table>
<p>熵为<br>$$<br>-0.6\times\log_20.6-0.4\times\log_20.4=0.9710<br>$$</p>
<p>对整体进行加权平均, 就是按 A 分类带来的熵:<br>$$<br>H_A=0.5\times0.7219+0.5\times0.9710=0.8465<br>$$</p>
<p>按 A 分类带来的熵减就是 $0.8813-0.8465=0.0348$.</p>
]]></content>
      <categories>
        <category>计算机</category>
        <category>机器学习</category>
      </categories>
  </entry>
  <entry>
    <title>微分形式</title>
    <url>/posts/12522/</url>
    <content><![CDATA[<p>0 次形式: $f$</p>
<p>1 次形式: $P\d x+Q\d y+R\d z$</p>
<p>2 次形式: $P\d y\land \d z+Q\d z\land \d x+R\d x\land \d y$</p>
<p>3 次形式: $R\d x\land \d y\land \d z$</p>
<span id="more"></span>

<h2 id="运算律"><a href="#运算律" class="headerlink" title="运算律"></a>运算律</h2><p>$\d x\land \d x=0$ 等, $\d x\land \d y=-\d y\land \d x$ 等.</p>
<h2 id="外微分运算"><a href="#外微分运算" class="headerlink" title="外微分运算"></a>外微分运算</h2><p>$$\d f={\partial f\over\partial x}\d x+{\partial f\over\partial y}\d y+{\partial f\over\partial z}\d z$$<br>$w=P\d x+Q\d y+R\d z$ 时</p>
<p>$$\begin{aligned}<br>\d w&amp;=(R_y’-Q_z’)\d y\land \d z+(P_z’-R_x’)\d z\land \d x+(Q_x’-P_y’)\d x\land \d y\<br>&amp;=<br>\begin{vmatrix}<br>\d y\land \d z&amp;\d z\land \d x&amp;\d x\land \d y\<br>{\partial\over\partial x} &amp; {\partial\over\partial y} &amp; {\partial\over\partial z}\<br>P&amp;Q&amp;R<br>\end{vmatrix}<br>\end{aligned}$$</p>
<p>$w=P\d y\land \d z+Q\d z\land \d x+R\d x\land \d y$ 时</p>
<p>$$\d w=(P_x’+Q_y’+R_z’)\d x\land \d y\land \d z$$</p>
]]></content>
      <categories>
        <category>数学</category>
        <category>分析</category>
        <category>微积分</category>
        <category>多元微积分</category>
      </categories>
  </entry>
  <entry>
    <title>最小二乘法</title>
    <url>/posts/36991/</url>
    <content><![CDATA[<p>$$\min|Ax-b|_2$$<br>其中 $A\in\R^{m\times n}$, $x\in\R^n$, $b\in\R^m.$ 这个的问题的情境是 $m\geq n$, 也就是一个过度约束的问题 ($b$ 不在 $A$ 的值域中).</p>
<p>等价于解正规方程:<br>$$A^TAx=A^Tb,$$<br>当且仅当 $A$ 满秩时有唯一解 $x=(A^TA)^{-1}A^Tb.$ 可以利用伪逆写成 $x=A^\dagger b.$ </p>
<p>从几何的角度, 又可以理解为把 $b$ 利用正交投影算子投影到 $A$ 的值域: $Pb=Ax$.</p>
<p>下面总结几种常用算法.</p>
<span id="more"></span>

<h2 id="解正规方程"><a href="#解正规方程" class="headerlink" title="解正规方程"></a>解正规方程</h2><p>利用 Cholesky 分解, 解方程组 $R^TRx=A^Tb$.</p>
<blockquote>
<ol>
<li>计算矩阵 $A^TA$ 和向量 $A^Tb$</li>
<li>计算 $A^TA$ 的 Cholesky 分解: $A^TA=R^TR$</li>
<li>解方程组 $R^Ty=A^Tb$</li>
<li>解方程组 $Rx=y$</li>
</ol>
</blockquote>
<p>$A^T\in\R^{n\times m}$, $A\in\R^{m\times n}$, $A^TA$ 正常需要 $2mn^2$ 次运算, 但可以利用对称性减少为 $mn^2$.</p>
<p>$n\times n$ 正定阵的 Cholesky 分解需要 $\dfrac{n^3}{3}$ 次运算.</p>
<p>共需要 $mn^2+\dfrac13 n^3$ 次运算.</p>
<h2 id="QR-分解"><a href="#QR-分解" class="headerlink" title="QR 分解"></a>QR 分解</h2><ul>
<li><p>记 $A$ 的 thin QR $$A=QR$$ 与 full QR</p>
<p>$$A=\begin{bmatrix}<br>Q\ Q_{\perp}<br>\end{bmatrix}<br>\begin{bmatrix}<br>R\0<br>\end{bmatrix}.$$<br>于是</p>
</li>
</ul>
<p>$$<br>\begin{aligned}<br>|Ax-b|_2&amp;=\left\lVert\begin{bmatrix}<br>    Q^T\Q_\perp^T<br>\end{bmatrix}(Ax-b)\right\rVert_2\<br>&amp;=\left\lVert\begin{bmatrix}<br>    Q^T\Q_\perp^T<br>\end{bmatrix}(QRx-b)\right\rVert_2\<br>&amp;=\left\lVert\begin{bmatrix}<br>    R\0<br>\end{bmatrix}x-\begin{bmatrix}<br>    Q^Tb\Q_\perp^Tb<br>\end{bmatrix}\right\rVert_2\<br>\end{aligned}<br>$$<br>当 $Rx=Q^Tb$ 即 $x=R^{-1}Q^Tb$ 时取得最小值, 此时可见 $A^\dagger=R^{-1}Q.$</p>
<ul>
<li><p>从几何的角度, $A=QR$ 给出了投影算子 $P$ 的基: $P=QQ^T.$ 于是 $QRx=QQ^Tb$, 也得到了 $x=R^{-1}Q^Tb.$</p>
</li>
<li><p>从正规方程的角度,</p>
<p>$$A^TAx=A^Tb\implies R^TQ^TQRx=R^TQ^Tb\implies Rx=Q^Tb,$$<br>殊途同归.</p>
</li>
</ul>
<blockquote>
<ol>
<li>计算 reduced QR 分解 $A=QR$</li>
<li>计算 $Q^Tb$</li>
<li>解方程组 $Rx=Q^Tb$</li>
</ol>
</blockquote>
<p>主要计算量在于 QR 分解, 它需要 $2mn^2-\dfrac{2}{3}n^3$ 次运算.</p>
<h2 id="SVD"><a href="#SVD" class="headerlink" title="SVD"></a>SVD</h2><p>$A=U\Sigma V^T$ 也给出了 $P$ 的基: $P=UU^T$, 根据 $U\Sigma V^Tx=UU^Tb$ 可以得到 $x=V\Sigma^{-1}U^Tb$. 此时也得到了 $A^\dagger=V\Sigma^{-1}U^T.$</p>
<blockquote>
<ol>
<li>计算 reduced SVD $A=U\Sigma V^T$</li>
<li>计算 $U^Tb$</li>
<li>解方程组 $\Sigma y=U^Tb$</li>
<li>计算 $x=Vy$</li>
</ol>
</blockquote>
<p>其中的方程组比 QR 方法的三角型更容易解, 是对角型的.</p>
<hr>
<p>同样可以利用正规方程: $$A^TAx=A^Tb\implies V\Sigma^TU^TU\Sigma V^Tx=V\Sigma^T U^Tb\implies \Sigma V^Tx=U^Tb$$</p>
<p>计算量主要在于 SVD, 当 $m\gg n$ 时和 QR 差不多, 当 $m\approx n$ 时计算量更大. 典型估计是 $2mn^2+11n^3$ 次运算.</p>
<h2 id="伪逆"><a href="#伪逆" class="headerlink" title="伪逆"></a>伪逆</h2><ul>
<li>$A$ 列满秩: $A^\dagger=(A^TA)^{-1}A^T$</li>
<li>$A$ 行满秩: $A^\dagger=A^T(AA^T)^{-1}$</li>
</ul>
]]></content>
      <categories>
        <category>数学</category>
        <category>代数</category>
        <category>数值分析</category>
        <category>线性代数</category>
      </categories>
  </entry>
  <entry>
    <title>数值积分</title>
    <url>/posts/24343/</url>
    <content><![CDATA[<p>Quadrature Rule 指的是形式<br>$$Q(f)=\sum_{k=0}^nw_kf(x_k)$$</p>
<p>有时把 $f(x_k)$ 简写作 $f_k$.</p>
<span id="more"></span>

<h2 id="Interpolation-Rule"><a href="#Interpolation-Rule" class="headerlink" title="Interpolation Rule"></a>Interpolation Rule</h2><p>在插值多项式上求积分, 即 $$w_k=\int_a^b l_k(x)\d x$$</p>
<h3 id="Midpoint-Rule"><a href="#Midpoint-Rule" class="headerlink" title="Midpoint Rule"></a>Midpoint Rule</h3><p>在中点处取 $0$ 次多项式.<br>$$Q(f)=(b-a)f(x_0),$$ 其中 $x_0$ 是区间中点. 精度为 $1$.</p>
<h3 id="Newton-Cotes-Rules"><a href="#Newton-Cotes-Rules" class="headerlink" title="Newton-Cotes Rules"></a>Newton-Cotes Rules</h3><p>区间上的等距节点. $n$ 为奇数时精度为 $n$, 偶数时精度为 $n+1$.</p>
<ul>
<li>$n=1$: trapezium rule 精度为 $1$ $$\frac h2(f_0+f_1)$$ 误差 $$I-Q=-\frac{1}{12}h^3 f’’(\xi),\ \xi\in(a,b)$$</li>
<li>$n=2$: Simpson’s rule 精度为 $3$ $$\frac h3\left(f(x_0)+4f(x_1)+f(x_2)\right)$$ 误差 $$I-Q=-\frac{h^5}{90}f^{(4)}(\xi)=-\frac{(b-a)^5}{2880}f^{(4)}(\xi),\ \xi\in(a,b)$$</li>
</ul>
<h2 id="Gauss-Rule"><a href="#Gauss-Rule" class="headerlink" title="Gauss Rule"></a>Gauss Rule</h2><p>寻找关于权重 $w(x)$ 精度最高的节点, 实际上是关于 $w(x)$ 的正交多项式的零点. 精度是 $2n+1$.</p>
<h3 id="Gauss-Legendre-Quadrature-w-x-x3D-1"><a href="#Gauss-Legendre-Quadrature-w-x-x3D-1" class="headerlink" title="Gauss-Legendre Quadrature $w(x)=1$"></a>Gauss-Legendre Quadrature $w(x)=1$</h3><ul>
<li>$n=0$: $$\int_{-1}^1f(x)\d x\approx 2f(0)$$ 是中点法.</li>
<li>$n=1$: $$\int_{-1}^1f(x)\d x\approx f\left(-\frac{1}{\sqrt 3}\right)+f\left(\frac{1}{\sqrt 3}\right)$$</li>
</ul>
<h3 id="Gauss-Chebyshev-Quadrature-w-x-x3D-1-x-2-1-x2F-2"><a href="#Gauss-Chebyshev-Quadrature-w-x-x3D-1-x-2-1-x2F-2" class="headerlink" title="Gauss-Chebyshev Quadrature $w(x)=(1-x^2)^{-1/2}$"></a>Gauss-Chebyshev Quadrature $w(x)=(1-x^2)^{-1/2}$</h3><p>$x_0,\ldots,x_n$ 取 $T_{n+1}(x)$ 的零点, 即 Chebyshev 分点 $$x_k=\cos\left(\frac\pi2\frac{2k+1}{n+1}\right)$$</p>
<p>此时权重都是 $\displaystyle w_k=\frac{\pi}{n+1}$</p>
<h2 id="Composite-Quadrature-Rules"><a href="#Composite-Quadrature-Rules" class="headerlink" title="Composite Quadrature Rules"></a>Composite Quadrature Rules</h2><p>把区间等分后做积分.</p>
<h3 id="Composite-Midpoint-Rule"><a href="#Composite-Midpoint-Rule" class="headerlink" title="Composite Midpoint Rule"></a>Composite Midpoint Rule</h3><p>$$<br>M(h)=\sum_{k=0}^{n-1}hf\left(a+h\left(k+\frac12\right)\right)<br>$$ 误差 $$I-M=\frac{h^2}{24}(b-a)f’’(\xi)$$</p>
<h3 id="Composite-Trapezium-Rule"><a href="#Composite-Trapezium-Rule" class="headerlink" title="Composite Trapezium Rule"></a>Composite Trapezium Rule</h3><p>$$T(h)=\frac h2\left(f(t_0)+2f(t_1)+2f(t_2)+\cdots+2f(t_{n-1})+f(t_n)\right)$$ 误差 $$I-T=-\frac{h^2}{12}(b-a)f’’(\xi)$$</p>
<h3 id="Composite-Simpson’s-Rule"><a href="#Composite-Simpson’s-Rule" class="headerlink" title="Composite Simpson’s Rule"></a>Composite Simpson’s Rule</h3><p>$$S(h)=\frac{h}{3}\left(f(t_0)+4f(t_1)+2f(t_2)+4f(t_3)+\cdots+2f(t_{2m-2})+4f(t_{2m-1})+f(t_{2m})\right)$$ 误差 $$I-S=-\frac{h^4}{180}(b-a)f^{(4)}(\xi)$$</p>
<h2 id="Extrapolation"><a href="#Extrapolation" class="headerlink" title="Extrapolation"></a>Extrapolation</h2><p>做组合消除误差. 令 $T_{k,1}=T(h/2^{k-1})$ 并构造表 $$T_{i,j}={4^{j-1}T_{i,j-1}-T_{i-1,j-1}\over 4^{j-1}-1}$$<br>每向右一列误差 $\times h^2$.</p>
]]></content>
      <categories>
        <category>数学</category>
        <category>数值分析</category>
      </categories>
  </entry>
  <entry>
    <title>数值 ODE</title>
    <url>/posts/23214/</url>
    <content><![CDATA[<p>$f_n$ 是 $f(x_n,y_n)$ 的简记, $y_n$ 是 $y(x_n)$ 的估计.</p>
<span id="more"></span>

<h2 id="One-Step-Methods"><a href="#One-Step-Methods" class="headerlink" title="One-Step Methods"></a>One-Step Methods</h2><p>形式是<br>$$y_{n+1}=y_n+h\Phi(x_n,y_n,h)$$</p>
<p>local truncation error 指的是 $$\tau(h)=y(x_{n+1})-y(x_n)-h\Phi(x_n,y(x_n),h)$$<br>称方法的阶数为 $p$ 如果 $\tau(h)=O(h^{p+1})$.</p>
<p>global error 指的是 $$e_n=y(x_n)-y_n$$</p>
<ul>
<li>Euler’s method 阶数为 $1$ $$y_{n+1}=y_n+hf_n$$</li>
<li>backward Euler method 阶数为 $1$ $$y_{n+1}=y_n+hf(x_{n+1},y_{n+1})$$</li>
<li>Trapezium method 阶数为 $2$ $$y_{n+1}=y_n+\frac h2(f_n+f_{n+1})$$</li>
<li>Heun’s method 阶数为 $2$ $$y_{n+1}=y_n+\frac h2\left(f_n+f(x_n+h,y_n+hf_n)\right)$$</li>
</ul>
<h2 id="Runge-Kutta-methods"><a href="#Runge-Kutta-methods" class="headerlink" title="Runge-Kutta methods"></a>Runge-Kutta methods</h2><p>$$<br>\begin{aligned}<br>    k_1 &amp;= f(x_n,y_n)\<br>    k_2 &amp;= f(x_n+c_2h,y_n+ha_{21}k_1)\<br>    k_i&amp;=f(x_n+c_ih,y_n+h(a_{i1}k_1+\cdots+a_{i,i-1}k_{i-1})),\ i=3:m\<br>    y_{n+1} &amp;= y_n+h(b_1k_1+b_2k_2+\cdots+b_mk_m)<br>\end{aligned}<br>$$</p>
<h3 id="2-stage-Runge-Kutta"><a href="#2-stage-Runge-Kutta" class="headerlink" title="2-stage Runge-Kutta"></a>2-stage Runge-Kutta</h3><p>$$<br>\begin{aligned}<br>    k_1 &amp;= f(x_n,y_n)\<br>    k_2 &amp;= f(x_n+ch,y_n+hak_1)\<br>    y_{n+1} &amp;= y_n+h(b_1k_1+b_2k_2)<br>\end{aligned}<br>$$<br>阶数是 $2$ 当<br>$$<br>\begin{aligned}<br>    b_1+b_2&amp;=1\<br>    b_2c&amp;=\frac12\<br>    b_2a&amp;=\frac12<br>\end{aligned}<br>$$</p>
<ul>
<li>$c=1$ 是 Huen’s method</li>
<li>$c=\frac{1}{2}$ 是 explicit midpoint method</li>
<li>$c=\frac23$ 让局部误差最小</li>
</ul>
<h2 id="Linear-Multistep-Method"><a href="#Linear-Multistep-Method" class="headerlink" title="Linear Multistep Method"></a>Linear Multistep Method</h2><p>$$<br>y_{n+1}=\sum_{k=1}^l a_ky_{n+1-k}+h\sum_{k=0}^l b_k f_{n+1-k}<br>$$</p>
<h3 id="Adams-Bashforth-Methods"><a href="#Adams-Bashforth-Methods" class="headerlink" title="Adams-Bashforth Methods"></a>Adams-Bashforth Methods</h3><p>用 $f_n$ 之前的 $l$ 个值做插值估计 $f$, 阶数为 $l$.</p>
<ul>
<li>1-step 就是 Euler’s method $$y_{n+1}=y_n+hf_n$$</li>
<li>2-step 阶数为 2 $$y_{n+1}=y_n+\frac{h}{2}(3f_n-f_{n-1})$$</li>
<li>3-step $$y_{n+1}=y_{n}+\frac{h}{12}\left(23 f_{n}-16 f_{n-1}+5 f_{n-2}\right)$$</li>
<li>4-step $$y_{n+1}=y_{n}+\frac{h}{24}\left(55 f_{n}-59 f_{n-1}+37 f_{n-2}-9 f_{n-3}\right)$$</li>
</ul>
]]></content>
      <categories>
        <category>数学</category>
        <category>数值分析</category>
      </categories>
  </entry>
  <entry>
    <title>留数的计算方法</title>
    <url>/posts/51485/</url>
    <content><![CDATA[<ol>
<li>在分式 $f=g/h$ 中, 若分母有简单零点 $z_0$ 而分子没有, 那么 $f$ 在 $z_0$ 处的留数为<br>$$<br>\frac{g(z_0)}{h’(z_0)}<br>$$</li>
</ol>
<blockquote>
<p>$\dfrac{1}{z^4-1}$ 在 $\i$ 处的留数为 $${1\over \left.4z^3\right|_{z=\i}}={1\over-4\i}=\frac\i4.$$</p>
</blockquote>
<ol start="2">
<li>假设 $z_0$ 是 $n$ 阶极点, 那么该点处的留数为<br>$$<br> \frac{1}{(n-1)!}\left(\left(\frac{\d}{\d z}\right)^{n-1}(z-z_0)^n f(z)\right)_{z=z_0}<br>$$</li>
</ol>
]]></content>
      <categories>
        <category>数学</category>
        <category>分析</category>
        <category>复变函数</category>
      </categories>
  </entry>
  <entry>
    <title>常见级数</title>
    <url>/posts/56038/</url>
    <content><![CDATA[<p>$$\sum_{n=1}^\infty\frac{1}{n^2}=\frac{\pi^2}{6}$$</p>
<span id="more"></span>
<p>$$\sum_{n=1}^\infty\frac{(-1)^{n-1}}{n^2}=\frac{\pi^2}{12}$$<br>$$\sum_{n=1}^\infty\frac{1}{(2n-1)^2}=\frac{\pi^2}{8}$$<br>$$\sum_{n=1}^\infty\frac{1}{n^4}=\frac{\pi^4}{90}$$<br>$$\sum_{n=1}^\infty\frac{(-1)^{n-1}}{n^4}=\frac{7\pi^4}{720}$$<br>$$1-\frac13+\frac15-\frac17+\cdots=\frac\pi4$$<br>$$1-\frac12+\frac13-\frac14+\cdots=\ln2$$</p>
]]></content>
      <categories>
        <category>数学</category>
        <category>分析</category>
        <category>微积分</category>
        <category>级数</category>
      </categories>
  </entry>
  <entry>
    <title>三角函数</title>
    <url>/posts/26462/</url>
    <content><![CDATA[<h2 id="和差化积"><a href="#和差化积" class="headerlink" title="和差化积"></a>和差化积</h2><p>$$\sin\alpha+\sin\beta=2\sin\left(\frac{\alpha+\beta}{2}\right)\cos\left(\frac{\alpha-\beta}{2}\right)$$</p>
<p>$$\sin\alpha-\sin\beta=2\cos\left(\frac{\alpha+\beta}{2}\right)\sin\left(\frac{\alpha-\beta}{2}\right)$$</p>
<p>$$\cos\alpha+\cos\beta=2\cos\left(\frac{\alpha+\beta}{2}\right)\cos\left(\frac{\alpha-\beta}{2}\right)$$</p>
<p>$$\cos\alpha-\cos\beta=-2\sin\left(\frac{\alpha+\beta}{2}\right)\sin\left(\frac{\alpha-\beta}{2}\right)$$</p>
<span id="more"></span>

<h2 id="积化和差"><a href="#积化和差" class="headerlink" title="积化和差"></a>积化和差</h2><p>$$\sin\alpha\cos\beta=\frac12\left(\sin(\alpha+\beta)+\sin(\alpha-\beta)\right)$$</p>
<p>$$\cos\alpha\sin\beta=\frac12\left(\sin(\alpha+\beta)-\sin(\alpha-\beta)\right)$$</p>
<p>$$\cos\alpha\cos\beta=\frac12\left(\cos(\alpha+\beta)+\cos(\alpha-\beta)\right)$$</p>
<p>$$\sin\alpha\sin\beta=-\frac12\left(\cos(\alpha+\beta)-\cos(\alpha-\beta)\right)$$</p>
<h2 id="倍角公式"><a href="#倍角公式" class="headerlink" title="倍角公式"></a>倍角公式</h2><p>$$\sin3x=3\sin x-4\sin^3x$$<br>$$\cos 3x=-3\cos x+4\cos^3x$$</p>
<h2 id="万能公式"><a href="#万能公式" class="headerlink" title="万能公式"></a>万能公式</h2><p>令 $t=\tan\dfrac x2$, 那么<br>$$<br>\begin{gather*}<br>\sin x=\frac{2t}{1+t^2},\quad<br>\cos x=\frac{1-t^2}{1+t^2},\quad<br>\tan x=\frac{2t}{1-t^2}<br>\end{gather*}<br>$$</p>
]]></content>
      <categories>
        <category>数学</category>
        <category>初等数学</category>
      </categories>
  </entry>
  <entry>
    <title>极坐标和球坐标换元</title>
    <url>/posts/26639/</url>
    <content><![CDATA[<p>$$\iint_D F(x,y)\d x\d y=\iint_\Delta F(r\cos\theta,r\sin\theta)r\d r\d\theta$$</p>
<p>$$\iiint_D F(x,y,z)\d x\d y\d z=\iiint_\Delta F(r\sin\theta\cos\phi,r\sin\theta\sin\phi,r\cos\theta)r^2\sin\theta\d r\d \theta\d \phi$$</p>
<img src="https://upload.wikimedia.org/wikipedia/commons/thumb/a/a2/Kugelkoord-lokale-Basis-s.svg/480px-Kugelkoord-lokale-Basis-s.svg.png" width="250" height="250">]]></content>
      <categories>
        <category>数学</category>
        <category>分析</category>
        <category>微积分</category>
        <category>多元微积分</category>
      </categories>
  </entry>
  <entry>
    <title>丽江</title>
    <url>/posts/23622/</url>
    <content><![CDATA[<p>清晨，冬风偏有着独特的和煦，暖暖的阳光洒下，轻吻着这个慵懒的小城。青石板的两侧，一簇红一簇粉的丛生，芬芳馥郁。清澄的流水，不急不缓地从家家户户门前流过，雀跃着一片两片的花瓣，抚动着缠绵的青荇，挑弄着披拂的藤蔓。</p>
<p>踱入深巷，古色古香的建筑和装饰，质朴而不失深邃的画作文字，神秘地述说着一个古老的民族对自然的敬畏与对文化根源的认同。仿佛等待须臾，小巷的尽头就会传来一阵悠远、空旷的卖杏花的吆喝似的。</p>
<p>午后，携几枚沁爽的青枣，品几块玫瑰饼，惹得唇齿间尽是花香。百鸟嘤鸣，鸡犬相闻，长桥卧波，复道行空，小桥流水飞红。远眺，巍峨的雪山正熠熠闪着金辉。<br>傍晚，华灯初上。人群熙攘起来，叫卖声，丝竹声不绝于耳，花草香，珍馐香扑面而来。渐渐深凝的夜，又将古镇拉回沉寂，一同那远山的轮廓。</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
  </entry>
  <entry>
    <title>一些英文术语</title>
    <url>/posts/18686/</url>
    <content><![CDATA[<h2 id="分析与代数"><a href="#分析与代数" class="headerlink" title="分析与代数"></a>分析与代数</h2><table>
<thead>
<tr>
<th>中文</th>
<th>英文</th>
</tr>
</thead>
<tbody><tr>
<td>二次</td>
<td>quadratic</td>
</tr>
<tr>
<td>三次</td>
<td>cubic</td>
</tr>
<tr>
<td>四次</td>
<td>quartic</td>
</tr>
<tr>
<td>五次</td>
<td>quintic</td>
</tr>
</tbody></table>
<h2 id="几何"><a href="#几何" class="headerlink" title="几何"></a>几何</h2><table>
<thead>
<tr>
<th>中文</th>
<th>英文</th>
</tr>
</thead>
<tbody><tr>
<td>四边形</td>
<td>quadrilateral</td>
</tr>
<tr>
<td>五边形</td>
<td>pentagon</td>
</tr>
<tr>
<td>六边形</td>
<td>hexagon</td>
</tr>
<tr>
<td>七边形</td>
<td>heptagon</td>
</tr>
<tr>
<td>八边形</td>
<td>octagon</td>
</tr>
<tr>
<td>九边形</td>
<td>nonagon</td>
</tr>
<tr>
<td>十边形</td>
<td>decagon</td>
</tr>
<tr>
<td>平行四边形</td>
<td>parallelogram</td>
</tr>
<tr>
<td>四面体 (三棱锥)</td>
<td>tetrahedron</td>
</tr>
<tr>
<td>棱柱</td>
<td>prism</td>
</tr>
<tr>
<td>多面体</td>
<td>polyhedron</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>英语</category>
      </categories>
  </entry>
  <entry>
    <title>二分查找</title>
    <url>/posts/42877/</url>
    <content><![CDATA[<h2 id="原始问题-找到返回下标-找不到返回空"><a href="#原始问题-找到返回下标-找不到返回空" class="headerlink" title="原始问题: 找到返回下标, 找不到返回空"></a>原始问题: 找到返回下标, 找不到返回空</h2><figure class="highlight py"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">binary_search</span>(<span class="params">array, target</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> array:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        </span><br><span class="line">    left, right = <span class="number">0</span>, <span class="built_in">len</span>(array)-<span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> left &lt;= right:</span><br><span class="line">        mid = (left + right) // <span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> array[mid] &gt; target:</span><br><span class="line">            right = mid - <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> array[mid] &lt; target:</span><br><span class="line">            left = mid + <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> mid</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">None</span></span><br></pre></td></tr></tbody></table></figure>
<p>时间: $O(\log N)$</p>
<p>空间: $O(1)$</p>
<h2 id="变种-有序矩阵"><a href="#变种-有序矩阵" class="headerlink" title="变种: 有序矩阵"></a>变种: 有序矩阵</h2><p>比如在下面的矩阵中找 10</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">1  2  3  4</span><br><span class="line">5  6  7  8</span><br><span class="line">9  10 11 12</span><br></pre></td></tr></tbody></table></figure>
<p>应该返回 <code>(2, 1)</code>. 设矩阵是 <code>M*N</code> 的.</p>
<p>关键就在于压平后的下标和行标, 列标之间的关系.</p>
<ul>
<li><code>idx = row_idx * N + col_idx</code></li>
<li><code>row_idx = idx // N</code></li>
<li><code>col_idx = idx % N</code></li>
</ul>
<figure class="highlight py"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">binary_search_2d</span>(<span class="params">matrix, target</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> matrix:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    M, N = <span class="built_in">len</span>(matrix), <span class="built_in">len</span>(matrix[<span class="number">0</span>])</span><br><span class="line">    left, right = <span class="number">0</span>, M*N-<span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> left &lt;= right:</span><br><span class="line">        mid = (left + right) // <span class="number">2</span></span><br><span class="line">        row = mid // N</span><br><span class="line">        col = mid % N</span><br><span class="line">        <span class="keyword">if</span> matrix[row][col] &gt; target:</span><br><span class="line">            right = mid - <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> matrix[row][col] &lt; target:</span><br><span class="line">            left = mid + <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> (row, col)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">None</span></span><br></pre></td></tr></tbody></table></figure>
<p>时间: $\log(MN)$</p>
<h2 id="变种-找最近的数"><a href="#变种-找最近的数" class="headerlink" title="变种: 找最近的数"></a>变种: 找最近的数</h2><p>比如在 <code>[1, 2, 5, 9]</code> 中找 <code>3</code>, 应该返回下标 <code>1</code>.</p>
<figure class="highlight py"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">find_closest</span>(<span class="params">array, target</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> array:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    left, right = <span class="number">0</span>, <span class="built_in">len</span>(array)-<span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> left &lt; right - <span class="number">1</span>:</span><br><span class="line">        mid = (left + right) // <span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> array[mid] &gt; target:</span><br><span class="line">            right = mid</span><br><span class="line">        <span class="keyword">elif</span> array[mid] &lt; target:</span><br><span class="line">            left = mid</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> mid</span><br><span class="line">    <span class="keyword">return</span> left <span class="keyword">if</span> <span class="built_in">abs</span>(target - array[left]) &lt; <span class="built_in">abs</span>(target - array[right]) <span class="keyword">else</span> right</span><br></pre></td></tr></tbody></table></figure>

<h2 id="变种-找第一次出现的下标"><a href="#变种-找第一次出现的下标" class="headerlink" title="变种: 找第一次出现的下标"></a>变种: 找第一次出现的下标</h2><figure class="highlight py"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">find_first</span>(<span class="params">array, target</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> array:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    left, right = <span class="number">0</span>, <span class="built_in">len</span>(array)-<span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> left &lt; right - <span class="number">1</span>:</span><br><span class="line">        mid = (left + right) // <span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> array[mid] &gt; target:</span><br><span class="line">            right = mid - <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> array[mid] &lt; target:</span><br><span class="line">            left = mid + <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            right = mid</span><br><span class="line">    <span class="keyword">if</span> array[left] == target:</span><br><span class="line">        <span class="keyword">return</span> left</span><br><span class="line">    <span class="keyword">if</span> array[right] == target:</span><br><span class="line">        <span class="keyword">return</span> right</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">None</span></span><br></pre></td></tr></tbody></table></figure>

<h2 id="变种-找最后一次出现的下标"><a href="#变种-找最后一次出现的下标" class="headerlink" title="变种: 找最后一次出现的下标"></a>变种: 找最后一次出现的下标</h2><figure class="highlight py"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">find_last</span>(<span class="params">array, target</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> array:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    left, right = <span class="number">0</span>, <span class="built_in">len</span>(array)-<span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> left &lt; right - <span class="number">1</span>:</span><br><span class="line">        mid = (left + right) // <span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> array[mid] &gt; target:</span><br><span class="line">            right = mid - <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> array[mid] &lt; target:</span><br><span class="line">            left = mid + <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            left = mid</span><br><span class="line">    <span class="keyword">if</span> array[right] == target:</span><br><span class="line">        <span class="keyword">return</span> right</span><br><span class="line">    <span class="keyword">if</span> array[left] == target:</span><br><span class="line">        <span class="keyword">return</span> left</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">None</span></span><br></pre></td></tr></tbody></table></figure>]]></content>
      <categories>
        <category>计算机</category>
        <category>算法</category>
      </categories>
  </entry>
  <entry>
    <title>为什么用开覆盖定义紧集</title>
    <url>/posts/47720/</url>
    <content><![CDATA[<p>【定义】一个集合是紧集的意思是，它的任何一个开覆盖都有有限子覆盖。</p>
<p>【有限覆盖定理】这是说欧式空间中的有界闭集（一维情况下是$[a,b]$）都是紧集。</p>
<p>【Heine-Borel定理】上面的逆命题，欧式空间中的紧集都是有界闭集。于是就说明了欧式空间中的紧集$\iff$有界闭集。</p>
<span id="more"></span>

<h2 id="为什么用开覆盖而不是闭覆盖呢？"><a href="#为什么用开覆盖而不是闭覆盖呢？" class="headerlink" title="为什么用开覆盖而不是闭覆盖呢？"></a>为什么用开覆盖而不是闭覆盖呢？</h2><p>简单地思考一下容易发现，如果用闭覆盖定义紧集一点也不好玩：</p>
<p>我们知道单点集${a}$是闭集（更严谨地，在$T_1$空间中），那么把集合$A$中所有元素拿出来，这些单点集的总体构成一个闭覆盖。比如说对于区间$[0,1]$，这种闭覆盖就是<br>$$<br>\bigcup_{x\in[0,1]}{x}<br>$$<br>它有有限子覆盖吗？</p>
<p>这个闭覆盖的有限成员都是有限个单点集${x_1},\ldots,{x_n}$，明显当$A$是无限集的时候无法覆盖$A$。所以按这种方式定义的紧集就是有限集，本质上没有提出新概念。</p>
<h2 id="用开覆盖定义的紧集有什么用？"><a href="#用开覆盖定义的紧集有什么用？" class="headerlink" title="用开覆盖定义的紧集有什么用？"></a>用开覆盖定义的紧集有什么用？</h2><p>在某种“良好的”集合上：</p>
<ul>
<li>连续函数总是一致连续的</li>
<li>连续函数总是有界的</li>
<li>连续函数总能取到最值</li>
<li>任何数列都有收敛子列</li>
</ul>
<p>数学家花了一番功夫才发现，这种“良好的”集合其实就是紧集。紧集的定义也有很多等价刻画，比如在欧式空间中就可以简单地定义为有界闭集，在更一般的度量空间中可以定义为序列紧集等等。但是，这些好理解的定义也有局限性，它们只在某些结构良好的空间中成立。</p>
<p>而在用开覆盖来定义的紧集，虽然抽象，但可以推广到一般的拓扑空间，成了现在使用最广的定义。</p>
]]></content>
      <categories>
        <category>数学</category>
        <category>几何</category>
      </categories>
  </entry>
  <entry>
    <title>双曲函数</title>
    <url>/posts/12845/</url>
    <content><![CDATA[<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>$$\sinh(x)=\frac{\e^x-\e^{-x}}{2}$$</p>
<p>$$\cosh(x)=\frac{\e^x+\e^{-x}}{2}$$</p>
<p>$$\tanh(x)=\frac{\e^x-\e^{-x}}{\e^x+\e^{-x}},\ \coth(x)=\frac{1}{\tanh(x)}$$</p>
<img src="https://upload.wikimedia.org/wikipedia/commons/thumb/7/76/Sinh_cosh_tanh.svg/440px-Sinh_cosh_tanh.svg.png" width="300" height="300">

<span id="more"></span>

<h2 id="复变量"><a href="#复变量" class="headerlink" title="复变量"></a>复变量</h2><p>$$\sin(\i x)=\i\sinh(x),\ \sinh(\i x)=\i\sin(x)$$</p>
<p>$$\cos(\i x)=\cosh(x),\ \cosh(\i x)=\cos(x)$$</p>
<h2 id="和角公式"><a href="#和角公式" class="headerlink" title="和角公式"></a>和角公式</h2><p>$$\sinh(x\pm y)=\sinh(x)\cosh(y)\pm\cosh(x)\sinh(y)$$</p>
<p>$$\cosh(x\pm y)=\cosh(x)\cosh(y)\pm\sinh(x)\sinh(y)$$</p>
<p>$$<br>\tanh(x+y)={\tanh x+\tanh y\over 1+\tanh x\tanh y}<br>$$</p>
<p>$$<br>\tanh(x-y)={\tanh x-\tanh y\over 1-\tanh x\tanh y}<br>$$</p>
<h2 id="倍角公式"><a href="#倍角公式" class="headerlink" title="倍角公式"></a>倍角公式</h2><p>$$\cosh 2x=\sinh^2x+\cosh^2x=2\sinh^2x+1=2\cosh^2x-1$$</p>
<p>$$\sinh 2x=2\sinh x\cosh x$$</p>
<p>$$\tanh 2x={2\tanh x\over 1+\tanh^2x}$$</p>
<h2 id="逆函数"><a href="#逆函数" class="headerlink" title="逆函数"></a>逆函数</h2><p>$$\sinh^{-1}(x)=\ln\left(x+\sqrt{x^2+1}\right)$$</p>
<p>$$\cosh^{-1}(x)=\ln\left(x+\sqrt{x^2-1}\right)$$</p>
<p>$$\tanh^{-1}(x)=\frac12\ln\left(\frac{1+x}{1-x}\right)$$</p>
<h2 id="导数"><a href="#导数" class="headerlink" title="导数"></a>导数</h2><p>$$\begin{gathered}<br>(\sinh x)’=\cosh x\<br>(\cosh x)’=\sinh x\<br>(\tanh x)’=\frac{1}{\cosh^2 x}\<br>\left(\sinh^{-1}x\right)’=\frac{1}{\sqrt{x^2+1}}\<br>\left(\cosh^{-1}x\right)’=\frac{1}{\sqrt{x^2-1}}\<br>\left(\tanh^{-1}x\right)’=\frac{1}{1-x^2}\<br>\end{gathered}$$</p>
<h2 id="积分"><a href="#积分" class="headerlink" title="积分"></a>积分</h2><p>$$<br>\begin{gathered}<br>\int\sinh(ax)\d x=\frac1a\cosh(ax)+C\<br>\int\cosh(ax)\d x=\frac1a\sinh(ax)+C\<br>\int\tanh(ax)\d x=\frac{1}{a}\ln(\cosh(ax))+C\<br>\int\tan(ax)\d x=-\frac1a\ln|\cos(ax)|+C<br>\end{gathered}<br>$$</p>
<h2 id="泰勒展开"><a href="#泰勒展开" class="headerlink" title="泰勒展开"></a>泰勒展开</h2><p>$$\sinh(x)=x+\frac{x^3}{3!}+\frac{x^5}{5!}+\frac{x^7}{7!}+\cdots$$</p>
<p>$$\cosh(x)=1+\frac{x^2}{2!}+\frac{x^4}{4!}+\frac{x^6}{6!}+\cdots$$</p>
]]></content>
      <categories>
        <category>数学</category>
        <category>初等数学</category>
      </categories>
  </entry>
  <entry>
    <title>午后</title>
    <url>/posts/6636/</url>
    <content><![CDATA[<p>阳光从不吝啬，海风亦从未疲倦。歌声随时慵懒，每个下午，均可惬意。</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
  </entry>
  <entry>
    <title>二叉树的一些遍历</title>
    <url>/posts/47437/</url>
    <content><![CDATA[<figure class="highlight py"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">TreeNode</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, val</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        self.val = val</span><br><span class="line">        self.left = <span class="literal">None</span></span><br><span class="line">        self.right = <span class="literal">None</span></span><br></pre></td></tr></tbody></table></figure>

<span id="more"></span>

<h2 id="先序-Pre-order-val-left-right"><a href="#先序-Pre-order-val-left-right" class="headerlink" title="先序 Pre-order: val, left, right"></a>先序 Pre-order: val, left, right</h2><figure class="highlight py"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">preorder</span>(<span class="params">root</span>):</span><br><span class="line">    <span class="keyword">if</span> root <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="built_in">print</span>(root.val, end=<span class="string">' '</span>)</span><br><span class="line">    preorder(root.left)</span><br><span class="line">    preorder(root.right)</span><br></pre></td></tr></tbody></table></figure>
<p>时间: $O(n)$</p>
<p>空间: $O(h)$, $h$ 是树的高度</p>
<h2 id="中序-x2F-根序-In-order-left-val-right"><a href="#中序-x2F-根序-In-order-left-val-right" class="headerlink" title="中序/根序 In-order: left, val, right"></a>中序/根序 In-order: left, val, right</h2><figure class="highlight py"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">inorder</span>(<span class="params">root</span>):</span><br><span class="line">    <span class="keyword">if</span> root <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    inorder(root.left)</span><br><span class="line">    <span class="built_in">print</span>(root.val)</span><br><span class="line">    inorder(root.right)</span><br></pre></td></tr></tbody></table></figure>

<h2 id="后序-Post-order-left-right-val"><a href="#后序-Post-order-left-right-val" class="headerlink" title="后序 Post-order: left, right, val"></a>后序 Post-order: left, right, val</h2><figure class="highlight py"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">postorder</span>(<span class="params">root</span>):</span><br><span class="line">    <span class="keyword">if</span> root <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    postorder(root.left)</span><br><span class="line">    postorder(root.right)</span><br><span class="line">    <span class="built_in">print</span>(root.val)</span><br></pre></td></tr></tbody></table></figure>

<h2 id="获取高度"><a href="#获取高度" class="headerlink" title="获取高度"></a>获取高度</h2><figure class="highlight py"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_height</span>(<span class="params">root</span>):</span><br><span class="line">    <span class="keyword">if</span> root <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    left = get_height(root.left)</span><br><span class="line">    right = get_height(root.right)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">max</span>(left, right) + <span class="number">1</span></span><br></pre></td></tr></tbody></table></figure>
<p>时间: $O(n)$</p>
<p>空间: $O(h)$</p>
<h2 id="获取节点数"><a href="#获取节点数" class="headerlink" title="获取节点数"></a>获取节点数</h2><figure class="highlight py"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_sum</span>(<span class="params">root</span>):</span><br><span class="line">    <span class="keyword">if</span> root <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    left = get_sum(root.left)</span><br><span class="line">    right = get_sum(root.right)</span><br><span class="line">    <span class="keyword">return</span> left + right + <span class="number">1</span></span><br></pre></td></tr></tbody></table></figure>

<h2 id="按行打印"><a href="#按行打印" class="headerlink" title="按行打印"></a>按行打印</h2><figure class="highlight py"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">print_by_row</span>(<span class="params">root</span>):</span><br><span class="line">    q = deque()</span><br><span class="line">    q.append(root)</span><br><span class="line">    <span class="keyword">while</span> q:</span><br><span class="line">        head = q.popleft()</span><br><span class="line">        <span class="built_in">print</span>(head.val, end=<span class="string">' '</span>)</span><br><span class="line">        <span class="keyword">if</span> head.left:</span><br><span class="line">            q.append(head.left)</span><br><span class="line">        <span class="keyword">if</span> head.right:</span><br><span class="line">            q.append(head.right)</span><br></pre></td></tr></tbody></table></figure>

<h2 id="按行打印-中途要求回车"><a href="#按行打印-中途要求回车" class="headerlink" title="按行打印, 中途要求回车"></a>按行打印, 中途要求回车</h2><figure class="highlight py"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">print_by_row2</span>(<span class="params">root</span>):</span><br><span class="line">    cur = deque([root])</span><br><span class="line">    <span class="built_in">next</span> = deque()</span><br><span class="line">    <span class="keyword">while</span> cur:</span><br><span class="line">        head = cur.popleft()</span><br><span class="line">        <span class="built_in">print</span>(head.val, end=<span class="string">' '</span>)</span><br><span class="line">        <span class="keyword">if</span> head.left:</span><br><span class="line">            <span class="built_in">next</span>.append(head.left)</span><br><span class="line">        <span class="keyword">if</span> head.right:</span><br><span class="line">            <span class="built_in">next</span>.append(head.right)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> cur:</span><br><span class="line">            <span class="built_in">print</span>()</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">next</span>:</span><br><span class="line">                cur, <span class="built_in">next</span> = <span class="built_in">next</span>, deque()</span><br></pre></td></tr></tbody></table></figure>

<h2 id="非递归遍历"><a href="#非递归遍历" class="headerlink" title="非递归遍历"></a>非递归遍历</h2><figure class="highlight py"><table><tbody><tr><td class="code"><pre><span class="line">stack = [(root, <span class="number">1</span>)]</span><br><span class="line"><span class="keyword">while</span> stack:</span><br><span class="line">    node, count = stack.pop()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> count == <span class="number">1</span>:</span><br><span class="line">        <span class="built_in">print</span>(node.val)  <span class="comment"># 更改这一句以实现三种顺序</span></span><br><span class="line">        stack.append((node, count + <span class="number">1</span>))</span><br><span class="line">        <span class="keyword">if</span> node.left:</span><br><span class="line">            stack.append((node.left, <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> count == <span class="number">2</span>:</span><br><span class="line">        stack.append((node, count + <span class="number">1</span>))</span><br><span class="line">        <span class="keyword">if</span> node.right:</span><br><span class="line">            stack.append((node.right, <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> count == <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br></pre></td></tr></tbody></table></figure>]]></content>
      <categories>
        <category>计算机</category>
        <category>算法</category>
      </categories>
  </entry>
  <entry>
    <title>利用积分下求导计算无穷积分</title>
    <url>/posts/30510/</url>
    <content><![CDATA[<p>计算<br>$$<br>\int_{-\infty}^{+\infty}{x\sin x\over (x^2+a^2)(x^2+b^2)},\mathrm dx.<br>$$<br>其实是测试一下内嵌pdf.</p>
<span id="more"></span>

<div class="pdfobject-container" data-target="/file/integrate.pdf" data-height="500px"></div>

]]></content>
      <categories>
        <category>数学</category>
        <category>分析</category>
        <category>微积分</category>
        <category>单变量微积分</category>
      </categories>
  </entry>
  <entry>
    <title>卡方检验</title>
    <url>/posts/7261/</url>
    <content><![CDATA[<p>原假设: 两个 (binary) 变量独立.</p>
<table>
<thead>
<tr>
<th></th>
<th>$Y=0$</th>
<th>$Y=1$</th>
<th>total</th>
</tr>
</thead>
<tbody><tr>
<td>$Z=0$</td>
<td>$X_{00}$</td>
<td>$X_{01}$</td>
<td>$X_{0\cdot}$</td>
</tr>
<tr>
<td>$Z=1$</td>
<td>$X_{10}$</td>
<td>$X_{11}$</td>
<td>$X_{1\cdot}$</td>
</tr>
<tr>
<td>total</td>
<td>$X_{\cdot0}$</td>
<td>$X_{\cdot1}$</td>
<td>$X_{\cdot\cdot}=n$</td>
</tr>
</tbody></table>
<p>$$<br>U = \sum_{i=0}^1\sum_{j=0}^1\frac{(X_{ij}-E_{ij})^2}{E_{ij}},<br>$$<br>其中<br>$$<br>E_{ij}=\frac{X_{i\cdot}X_{\cdot j}}{n}<br>$$<br>含义是原假设下该单元格的期望值.</p>
<p>在原假设下, $U\sim \chi_1^2$. 其中自由度为 $(I-1)(J-1)$.</p>
<figure class="highlight py"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> scipy.stats <span class="keyword">import</span> chi2_contingency</span><br><span class="line"></span><br><span class="line">table = [[<span class="number">90</span>, <span class="number">165</span>], [<span class="number">84</span>, <span class="number">307</span>]]</span><br><span class="line">U, p, dof, expected = chi2_contingency(table, correction=<span class="literal">False</span>)</span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">U = 14.95864355957614</span><br><span class="line">p = 0.00010989348314654599</span><br><span class="line">dof = 1</span><br><span class="line">expected = [[ 68.68421053 186.31578947]</span><br><span class="line">            [105.31578947 285.68421053]]</span><br></pre></td></tr></tbody></table></figure>]]></content>
      <categories>
        <category>数学</category>
        <category>统计</category>
      </categories>
  </entry>
  <entry>
    <title>判断回文链表</title>
    <url>/posts/14907/</url>
    <content><![CDATA[<p>判断一个链表是否回文, 思路是反转后半段, 和前半段比较.</p>
<span id="more"></span>

<p>首先需要找到<a href="/posts/19136/" title="链表中点">链表中点</a>, 其中方法一需要分奇偶长度讨论, 而用方法二可以统一返回慢指针的下一个节点. 从该节点<a href="/posts/967/" title="反转链表">反转链表</a>后与前半段比较即可.</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">find_mid</span>(<span class="params">head</span>):</span><br><span class="line">    <span class="keyword">if</span> head <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">or</span> head.<span class="built_in">next</span> <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">return</span> head</span><br><span class="line">    <span class="comment"># 快慢指针</span></span><br><span class="line">    fast, slow = head, head</span><br><span class="line">    <span class="keyword">while</span> fast <span class="keyword">and</span> fast.<span class="built_in">next</span> <span class="keyword">and</span> fast.<span class="built_in">next</span>.<span class="built_in">next</span>:</span><br><span class="line">        fast = fast.<span class="built_in">next</span>.<span class="built_in">next</span></span><br><span class="line">        slow = slow.<span class="built_in">next</span></span><br><span class="line">    <span class="keyword">return</span> slow</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_palindrome</span>(<span class="params">head</span>):</span><br><span class="line">    <span class="keyword">if</span> head <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="comment"># 分成前后两段</span></span><br><span class="line">    head1 = head</span><br><span class="line">    head2 = reverse(find_mid(head).<span class="built_in">next</span>)</span><br><span class="line">    <span class="comment"># 比较两段</span></span><br><span class="line">    <span class="keyword">while</span> head1 <span class="keyword">and</span> head2:</span><br><span class="line">        <span class="keyword">if</span> head1.val != head2.val:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        head1 = head1.<span class="built_in">next</span></span><br><span class="line">        head2 = head2.<span class="built_in">next</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></tbody></table></figure>]]></content>
      <categories>
        <category>计算机</category>
        <category>算法</category>
      </categories>
  </entry>
  <entry>
    <title>回不去的夏天</title>
    <url>/posts/59205/</url>
    <content><![CDATA[<p>又是一年高考季. 清早起来, 大把的金光倾泻到身上, 让时间一下子变慢了.</p>
<p>让我又想起了那个夏天, 那个完美的夏天, 那个打开教室后窗, 就有带着清香的槐花瓣飘落满地的五月. 窗边总有少年在惬意的清风中望着外面的世界, 而他身边总有熟悉的体温.</p>
<p>我嗅到了阳光的味道, 那样浓烈而又炽热. 它带着莽撞, 带着悸动, 带着热血, 也带着青涩与迷茫.</p>
<p>那是天空永远清朗的夏天, 有着池鱼, 鸣鸟, 蝉噪, 音乐, 冷饮的夏天; 有着汗水, 欢笑, 泪眼, 羁绊, 思念的夏天.</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
  </entry>
  <entry>
    <title>反转链表</title>
    <url>/posts/967/</url>
    <content><![CDATA[<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ListNode</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, val</span>):</span><br><span class="line">        self.val = val</span><br><span class="line">        self.<span class="built_in">next</span> = <span class="literal">None</span></span><br></pre></td></tr></tbody></table></figure>
<p>我们传入一个 ListNode 作为 head 节点, 然后需要一个函数 reverse 来反转这个链表, 返回新的 head 节点 (实际上是原来的 tail).</p>
<span id="more"></span>

<h2 id="iteration"><a href="#iteration" class="headerlink" title="iteration"></a>iteration</h2><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">reverse</span>(<span class="params">head</span>):</span><br><span class="line">    prev = <span class="literal">None</span> <span class="comment"># 保存 head 的上一个节点</span></span><br><span class="line">    <span class="keyword">while</span> head:</span><br><span class="line">        <span class="built_in">next</span> = head.<span class="built_in">next</span>  <span class="comment"># 先保存下一个, 否则反转后找不到</span></span><br><span class="line">        head.<span class="built_in">next</span> = prev  <span class="comment"># 反转</span></span><br><span class="line">        <span class="comment"># prev 和 head 往后走</span></span><br><span class="line">        prev = head</span><br><span class="line">        head = <span class="built_in">next</span></span><br><span class="line">    <span class="keyword">return</span> prev <span class="comment"># 此时 head 走到了 None</span></span><br></pre></td></tr></tbody></table></figure>
<p>时间: $O(n)$</p>
<p>空间: $O(1)$</p>
<h2 id="recursion"><a href="#recursion" class="headerlink" title="recursion"></a>recursion</h2><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">reverse</span>(<span class="params">head</span>):</span><br><span class="line">    <span class="comment"># base case: 空链表或只有一个节点, 不用反转</span></span><br><span class="line">    <span class="keyword">if</span> head <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">or</span> head.<span class="built_in">next</span> <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">return</span> head</span><br><span class="line">    <span class="comment"># 从第二个节点开始反转, 返回新的 head 节点</span></span><br><span class="line">    new_head = reverse(head.<span class="built_in">next</span>)</span><br><span class="line">    <span class="comment"># 把 head 和新的 head 节点之间的连接反过来</span></span><br><span class="line">    head.<span class="built_in">next</span>.<span class="built_in">next</span> = head</span><br><span class="line">    head.<span class="built_in">next</span> = <span class="literal">None</span>  <span class="comment"># 否则出现环</span></span><br><span class="line">    <span class="keyword">return</span> new_head</span><br></pre></td></tr></tbody></table></figure>
<p>给出原始问题…<br><img src="/posts/967/rev1.png"><br>先完成子问题…<br><img src="/posts/967/rev2.png"><br>再处理最后的连接…<br><img src="/posts/967/rev3.png"><br>时间: $O(n)$</p>
<p>空间: $O(n)$</p>
]]></content>
      <categories>
        <category>计算机</category>
        <category>算法</category>
      </categories>
  </entry>
  <entry>
    <title>回家</title>
    <url>/posts/8368/</url>
    <content><![CDATA[<p>沁人的凉风和湛蓝中的云卷云舒，熟悉的楼房和那条街道，一簇簇与一丛丛，忽然让少年有了一丝归属，潮湿了眼眶。他颤抖着四肢，任每一个毛孔大肆呼吸着。<br>依稀在记忆中的水库，被荒草占据。大把的野草，湮没了少年心中，那未曾发出的约定。</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
  </entry>
  <entry>
    <title>圣诞节</title>
    <url>/posts/19175/</url>
    <content><![CDATA[<p>圣诞树上挂满了忽闪忽闪的小彩灯，在富丽堂皇的商店里，在暖黄的水晶吊灯下，温柔地伫立。</p>
<p>空气中弥漫着姜汁饼的甜美气息，耳畔回荡着童声喜乐、纯净的颂歌，以及驯鹿的铃儿叮当。黑漆漆的夜空中洒下鹅毛白的雪花，沁爽洁净的雪毯上，花白胡子的圣诞老人留下一道雪橇的印记。与可人儿相挽，踱步在礼品商城，柔情地看他趴着橱窗，瞪大了好奇的双眼。</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
  </entry>
  <entry>
    <title>秋心</title>
    <url>/posts/38252/</url>
    <content><![CDATA[<p>风起时，一片一片，金黄的，鹅黄的，浅绿的，接连着，打着卷地，在我噙着泪的眼前飘落，在地上挤成一团。<br>风住时，一棵一棵，笔挺的，有着优美线条和外形的，银杏，梧桐，在被悲伤吞噬了的我眼前伫立，宛若画中那么美，那么静。<br>风声，孩子们的说笑，木棍扫过落叶的沙沙声，喜鹊，麻雀，还有一个人，缓慢而轻轻的，脚步。</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
  </entry>
  <entry>
    <title>堆</title>
    <url>/posts/21992/</url>
    <content><![CDATA[<p>堆是一种完全二叉树. 即, 除了最后一层都是满的, 且所有节点尽量靠左.</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">       11</span><br><span class="line">     /    \</span><br><span class="line">    10     7</span><br><span class="line">   / \    / \</span><br><span class="line">  9   5  6   4</span><br><span class="line"> /\  /\</span><br><span class="line">8  2 3 1</span><br></pre></td></tr></tbody></table></figure>
<p>按列表存储更省空间: <code>[11, 10, 7, 9, 5, 6, 4, 8, 2, 3, 1]</code>.</p>
<span id="more"></span>

<p><code>left = parent * 2 + 1</code>, <code>right = parent * 2 + 2</code>, <code>parent = (child - 1) // 2</code></p>
<p><strong>小根堆</strong>: 每个节点都比孩子小.</p>
<p><strong>大根堆</strong>: 每个节点都比孩子大.</p>
<p>以小根堆为例:</p>
<h2 id="sift-up"><a href="#sift-up" class="headerlink" title="sift up"></a>sift up</h2><figure class="highlight py"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">sift_up</span>(<span class="params">array, index</span>):</span><br><span class="line">    parent_idx = (index - <span class="number">1</span>) // <span class="number">2</span></span><br><span class="line">    <span class="comment"># root or already min heap</span></span><br><span class="line">    <span class="keyword">if</span> parent_idx &lt; <span class="number">0</span> <span class="keyword">or</span> array[index] &gt; array[parent_idx]:  </span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    array[index], array[parent_idx] = array[parent_idx], array[index]</span><br><span class="line">    sift_up(array, parent_idx)</span><br></pre></td></tr></tbody></table></figure>
<p>时间: $O(\log n)$</p>
<p>空间: $O(\log n)$</p>
<h2 id="sift-down"><a href="#sift-down" class="headerlink" title="sift down"></a>sift down</h2><figure class="highlight py"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">sift_down</span>(<span class="params">array, index</span>):</span><br><span class="line">    left = index * <span class="number">2</span> + <span class="number">1</span></span><br><span class="line">    right = left + <span class="number">1</span></span><br><span class="line">    small = index</span><br><span class="line">    <span class="comment"># have left and left smaller</span></span><br><span class="line">    <span class="keyword">if</span> left &lt; <span class="built_in">len</span>(array) <span class="keyword">and</span> array[left] &lt; array[small]:</span><br><span class="line">        small = left</span><br><span class="line">    <span class="comment"># have right and right smaller</span></span><br><span class="line">    <span class="keyword">if</span> right &lt; <span class="built_in">len</span>(array) <span class="keyword">and</span> array[right] &lt; array[small]:</span><br><span class="line">        small = right</span><br><span class="line">    <span class="comment"># need to swap</span></span><br><span class="line">    <span class="keyword">if</span> small != index:</span><br><span class="line">        array[small], array[index] = array[index], array[small]</span><br><span class="line">        sift_down(array, small)</span><br></pre></td></tr></tbody></table></figure>
<p>时间: $O(\log n)$</p>
<p>空间: $O(\log n)$</p>
<h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><figure class="highlight py"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">build_heap</span>(<span class="params">arr</span>):</span><br><span class="line">    <span class="comment"># start from the parent of last leaf, end at root</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(arr)//<span class="number">2</span> - <span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">        sift_down(arr, i)</span><br></pre></td></tr></tbody></table></figure>
<p>时间: $O(n)$</p>
<p>这是因为不是每次都需要 $\log n$ 的复杂度, 它与节点的深度有关. </p>
<p>$0\times n/2 + 1\times n/4 + 2\times n/8 + \cdots + \log n \times 1=O(n)$.</p>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><figure class="highlight py"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Heap</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.array = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">push</span>(<span class="params">self, val</span>):</span><br><span class="line">        self.array.append(val)</span><br><span class="line">        sift_up(self.array, <span class="built_in">len</span>(self.array)-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">pop</span>(<span class="params">self</span>):</span><br><span class="line">        res = self.array[<span class="number">0</span>]</span><br><span class="line">        self.array[<span class="number">0</span>], self.array[-<span class="number">1</span>] = self.array[-<span class="number">1</span>], self.array[<span class="number">0</span>]</span><br><span class="line">        self.array.pop()</span><br><span class="line">        sift_down(self.array, <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></tbody></table></figure>

<h2 id="前-k-小的数据"><a href="#前-k-小的数据" class="headerlink" title="前 k 小的数据"></a>前 k 小的数据</h2><p>step 1: 取前 k 个值放入大根堆.</p>
<p>step 2: 对剩余值, 与大根堆的堆顶比. </p>
<ul>
<li>若比堆顶大, 忽略;</li>
<li>若比堆顶小, 去堆顶, 加入该值.</li>
</ul>
<p>时间: $O\left(k+(n-1)\log k\right)$</p>
<figure class="highlight py"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> heapq</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">kSmallest</span>(<span class="params">array</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> array:</span><br><span class="line">        <span class="keyword">return</span> array</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(array) &lt;= k:</span><br><span class="line">        <span class="keyword">return</span> array</span><br><span class="line">    res = [-i <span class="keyword">for</span> i <span class="keyword">in</span> array[:k]]</span><br><span class="line">    heapq.heapify(res)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(k, <span class="built_in">len</span>(array)):</span><br><span class="line">        <span class="keyword">if</span> array[i] &lt; -res[<span class="number">0</span>]:</span><br><span class="line">            heapq.heappop(res)</span><br><span class="line">            heapq.heappush(res, -array[i])</span><br><span class="line">    <span class="keyword">return</span> [-i <span class="keyword">for</span> i <span class="keyword">in</span> res]</span><br></pre></td></tr></tbody></table></figure>]]></content>
      <categories>
        <category>计算机</category>
        <category>算法</category>
      </categories>
  </entry>
  <entry>
    <title>图搜索算法</title>
    <url>/posts/29510/</url>
    <content><![CDATA[<h1 id="BFS"><a href="#BFS" class="headerlink" title="BFS"></a>BFS</h1><h2 id="之字形遍历树"><a href="#之字形遍历树" class="headerlink" title="之字形遍历树"></a>之字形遍历树</h2><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">  3</span><br><span class="line"> / \</span><br><span class="line">9  20</span><br><span class="line">   /\</span><br><span class="line">  15 7   </span><br></pre></td></tr></tbody></table></figure>
<p>返回 <code>[[3], [20,9], [15,7]]</code>.</p>
<figure class="highlight py"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">zigzag</span>(<span class="params">root</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">        <span class="keyword">return</span> []</span><br><span class="line">    frontier = [root]</span><br><span class="line">    reverse = <span class="literal">False</span></span><br><span class="line">    ans = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> frontier:</span><br><span class="line">        <span class="built_in">next</span>, cur = [], []</span><br><span class="line">        <span class="comment"># next 存储邻域节点, cur 存储当前层的值</span></span><br><span class="line">        <span class="keyword">for</span> u <span class="keyword">in</span> frontier:</span><br><span class="line">            cur.append(u.val)</span><br><span class="line">            <span class="keyword">if</span> u.left:</span><br><span class="line">                <span class="built_in">next</span>.append(u.left)</span><br><span class="line">            <span class="keyword">if</span> u.right:</span><br><span class="line">                <span class="built_in">next</span>.append(u.right)</span><br><span class="line">        ans.append(cur[::-<span class="number">1</span>] <span class="keyword">if</span> reverse <span class="keyword">else</span> cur)</span><br><span class="line">        frontier = <span class="built_in">next</span></span><br><span class="line">        reverse = <span class="keyword">not</span> reverse</span><br><span class="line">    <span class="keyword">return</span> ans</span><br></pre></td></tr></tbody></table></figure>

<h2 id="岛屿数量"><a href="#岛屿数量" class="headerlink" title="岛屿数量"></a>岛屿数量</h2><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">11110</span><br><span class="line">11010</span><br><span class="line">11000</span><br><span class="line">00000</span><br></pre></td></tr></tbody></table></figure>
<p>其中 1 代表陆地, 0 代表水. 返回岛屿数量, 即 1.</p>
<figure class="highlight py"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">BFS</span>(<span class="params">grid, r, c, marked</span>):</span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    (r, c) is the starting point</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="comment"># delta row and col</span></span><br><span class="line">    dr, dc = [-<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, -<span class="number">1</span>]</span><br><span class="line">    marked.add((r, c))</span><br><span class="line">    frontier = [(r, c)]</span><br><span class="line">    <span class="keyword">while</span> frontier:</span><br><span class="line">        <span class="built_in">next</span> = []</span><br><span class="line">        <span class="keyword">for</span> r, c <span class="keyword">in</span> frontier:</span><br><span class="line">            <span class="keyword">for</span> d <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">                nr, nc = r + dr[d], c + dc[d]</span><br><span class="line">                <span class="keyword">if</span> <span class="number">0</span> &lt;= nr &lt; <span class="built_in">len</span>(grid) <span class="keyword">and</span> <span class="number">0</span> &lt;= nc &lt; <span class="built_in">len</span>(grid[<span class="number">0</span>]) \</span><br><span class="line">                  <span class="keyword">and</span> grid[nr][nc] == <span class="string">'1'</span> <span class="keyword">and</span> (nr, nc) <span class="keyword">not</span> <span class="keyword">in</span> marked:</span><br><span class="line">                    marked.add((nr, nc))</span><br><span class="line">                    <span class="built_in">next</span>.append((nr, nc))</span><br><span class="line">        frontier = <span class="built_in">next</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">numIslands</span>(<span class="params">grid</span>):</span><br><span class="line">    res = <span class="number">0</span></span><br><span class="line">    marked = <span class="built_in">set</span>()</span><br><span class="line">    <span class="keyword">for</span> r <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(grid)):</span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(grid[<span class="number">0</span>])):</span><br><span class="line">            <span class="keyword">if</span> grid[r][c] == <span class="string">'1'</span> <span class="keyword">and</span> (r, c) <span class="keyword">not</span> <span class="keyword">in</span> marked:</span><br><span class="line">                BFS(grid, r, c, marked)</span><br><span class="line">                res += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> res</span><br></pre></td></tr></tbody></table></figure>

<h2 id="单词变换"><a href="#单词变换" class="headerlink" title="单词变换"></a>单词变换</h2><p>从 <code>hit</code> 变成 <code>cog</code>, 每次只变一个字符, 要求过程单词在列表 <code>[hot, dot, dog, lot, log, cog]</code> 中.</p>
<p>返回最短的变换路径长度 (5): <code>hit - hot - dot - dog - cog</code>.</p>
<figure class="highlight py"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ladder_length</span>(<span class="params">begin, end, words</span>):</span><br><span class="line">    words = <span class="built_in">set</span>(words)</span><br><span class="line">    <span class="keyword">if</span> end <span class="keyword">not</span> <span class="keyword">in</span> words:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    </span><br><span class="line">    ans = <span class="number">1</span></span><br><span class="line">    frontier = [begin]</span><br><span class="line">    used = <span class="built_in">set</span>(frontier)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> frontier:</span><br><span class="line">        <span class="built_in">next</span> = []</span><br><span class="line">        <span class="keyword">for</span> word <span class="keyword">in</span> frontier:</span><br><span class="line">            <span class="keyword">for</span> p <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(word)):</span><br><span class="line">                <span class="keyword">for</span> c <span class="keyword">in</span> string.ascii_lowercase:</span><br><span class="line">                    new_word = word[:p] + c + word[p+<span class="number">1</span>:]</span><br><span class="line">                    <span class="keyword">if</span> new_word == end:</span><br><span class="line">                        <span class="keyword">return</span> ans + <span class="number">1</span></span><br><span class="line">                    <span class="keyword">if</span> new_word <span class="keyword">in</span> words <span class="keyword">and</span> new_word <span class="keyword">not</span> <span class="keyword">in</span> used:</span><br><span class="line">                        used.add(new_word)</span><br><span class="line">                        <span class="built_in">next</span>.append(new_word)</span><br><span class="line">        frontier = <span class="built_in">next</span></span><br><span class="line">        ans += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(ladder_length(<span class="string">'hit'</span>, <span class="string">'cog'</span>, [<span class="string">'hot'</span>, <span class="string">'dot'</span>, <span class="string">'dog'</span>, <span class="string">'lot'</span>, <span class="string">'log'</span>, <span class="string">'cog'</span>]))</span><br></pre></td></tr></tbody></table></figure>

<h2 id="路径填充"><a href="#路径填充" class="headerlink" title="路径填充"></a>路径填充</h2><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">INF  -1   0   INF</span><br><span class="line">INF  INF INF  -1</span><br><span class="line">INF  -1  INF  -1</span><br><span class="line">0    -1  INF  INF</span><br></pre></td></tr></tbody></table></figure>
<p>INF 表示空房间, -1 表示墙, 0 表示门.</p>
<p>需要把 INF 都填充为走到最近的门的路径长度, 若没有路径还填 INF. 返回</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">3 -1  0  1</span><br><span class="line">2  2  1 -1</span><br><span class="line">1 -1  2 -1</span><br><span class="line">0 -1  3  4</span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight py"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">walls_and_gates</span>(<span class="params">rooms</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> rooms:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    dr, dc = [-<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, -<span class="number">1</span>]</span><br><span class="line">    N, C = <span class="built_in">len</span>(rooms), <span class="built_in">len</span>(rooms[<span class="number">0</span>])</span><br><span class="line">    frontier = [(r, c) <span class="keyword">for</span> r <span class="keyword">in</span> <span class="built_in">range</span>(N) <span class="keyword">for</span> c <span class="keyword">in</span> <span class="built_in">range</span>(C) <span class="keyword">if</span> rooms[r][c] == <span class="number">0</span>]</span><br><span class="line">    INF = <span class="number">2147483647</span></span><br><span class="line">    dist = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> frontier:</span><br><span class="line">        <span class="built_in">next</span> = []</span><br><span class="line">        <span class="keyword">for</span> r, c <span class="keyword">in</span> frontier:</span><br><span class="line">            <span class="keyword">for</span> d <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">                nr, nc = r + dr[d], c + dc[d]</span><br><span class="line">                <span class="keyword">if</span> <span class="number">0</span> &lt;= nr &lt; N <span class="keyword">and</span> <span class="number">0</span> &lt;= nc &lt; C \</span><br><span class="line">                    <span class="keyword">and</span> rooms[nr][nc] == INF:</span><br><span class="line">                    rooms[nr][nc] = dist + <span class="number">1</span></span><br><span class="line">                    <span class="built_in">next</span>.append((nr, nc))</span><br><span class="line">        frontier = <span class="built_in">next</span></span><br><span class="line">        dist += <span class="number">1</span></span><br></pre></td></tr></tbody></table></figure>

<h1 id="DFS"><a href="#DFS" class="headerlink" title="DFS"></a>DFS</h1><h2 id="检查是否有圈"><a href="#检查是否有圈" class="headerlink" title="检查是否有圈"></a>检查是否有圈</h2><figure class="highlight py"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">dfs</span>(<span class="params">directed_graph, visit_status, u</span>):</span><br><span class="line">    <span class="comment"># 0 表示还在访问, 1 表示访问结束</span></span><br><span class="line">    visit_status[u] = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> v <span class="keyword">in</span> directed_graph[u]:</span><br><span class="line">        <span class="keyword">if</span> v <span class="keyword">not</span> <span class="keyword">in</span> visit_status:</span><br><span class="line">            <span class="keyword">if</span> dfs(directed_graph, visit_status, v):</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">elif</span> visit_status[v] == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    visit_status[u] = <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">has_cycle</span>(<span class="params">directed_graph</span>):</span><br><span class="line">    visit_status = {}</span><br><span class="line">    <span class="keyword">for</span> v <span class="keyword">in</span> directed_graph:</span><br><span class="line">        <span class="keyword">if</span> v <span class="keyword">not</span> <span class="keyword">in</span> visit_status <span class="keyword">and</span> dfs(directed_graph, visit_status, v):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></tbody></table></figure>

<h2 id="拓扑排序"><a href="#拓扑排序" class="headerlink" title="拓扑排序"></a>拓扑排序</h2><p>从任意节点出发, 遍历邻居, 直到遍历结束, 把邻居放入结果. 再把自己放入结果. 最后反转结果.</p>
<figure class="highlight py"><table><tbody><tr><td class="code"><pre><span class="line">courses = []</span><br><span class="line">visited = [-<span class="number">1</span>] * num</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dfs</span>(<span class="params">u</span>):</span><br><span class="line">    visited[u] = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> v <span class="keyword">in</span> graph[u]:</span><br><span class="line">        <span class="keyword">if</span> visited[v] == <span class="number">0</span> <span class="keyword">or</span> (visited[v] == -<span class="number">1</span> <span class="keyword">and</span> <span class="keyword">not</span> dfs(v)):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    visited[u] = <span class="number">1</span></span><br><span class="line">    courses.append(u)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> u <span class="keyword">in</span> <span class="built_in">range</span>(num):</span><br><span class="line">    <span class="keyword">if</span> visited[u] == -<span class="number">1</span> <span class="keyword">and</span> <span class="keyword">not</span> dfs(u):</span><br><span class="line">      <span class="keyword">return</span> []</span><br><span class="line"></span><br><span class="line">courses.reverse()</span><br></pre></td></tr></tbody></table></figure>]]></content>
      <categories>
        <category>计算机</category>
        <category>算法</category>
      </categories>
  </entry>
  <entry>
    <title>字符串去重</title>
    <url>/posts/47268/</url>
    <content><![CDATA[<p><code>"aabbbccd"</code> 返回 <code>"abcd"</code>.</p>
<p>利用快慢指针, <code>fast</code> 负责遍历, <code>slow</code> 左边的是要保留的, 没有重复的字符. 可以做到原地修改.</p>
<figure class="highlight py"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">remove_duplicate</span>(<span class="params">string</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(string) <span class="keyword">in</span> (<span class="number">0</span>, <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">return</span> string</span><br><span class="line"></span><br><span class="line">    string = <span class="built_in">list</span>(string)</span><br><span class="line">    slow, fast = <span class="number">1</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> fast &lt; <span class="built_in">len</span>(string):</span><br><span class="line">        <span class="keyword">if</span> string[fast] != string[slow-<span class="number">1</span>]:</span><br><span class="line">            string[slow] = string[fast]</span><br><span class="line">            slow += <span class="number">1</span></span><br><span class="line">        fast += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">''</span>.join(string[:slow])</span><br></pre></td></tr></tbody></table></figure>]]></content>
      <categories>
        <category>计算机</category>
        <category>算法</category>
      </categories>
  </entry>
  <entry>
    <title>廿四</title>
    <url>/posts/38636/</url>
    <content><![CDATA[<p>优秀的高中很多，但能如她这般，令学子们痴恋深情到每每想起她时，心中的温暖都会澎湃良久，恐怕少之又少。</p>
<p>交付给廿四的青春，是完美的，是不容置辩的无悔无憾。对她的回眸，是噙着泪的仰望。真正在这里拼搏过的人，才会懂得何为傲、霸、狂，在这里受过挫的人，才会明白何为忍、毅、刚。什么是创造与梦想，什么是起伏和跌宕，什么令我们热泪盈眶，什么又是我们所说的，一生的荣光。</p>
<p>不论结果，只凭你在这里留下的青春，就够你荣耀一生，就是你最优秀的铁证。遗憾不属于廿四人，挺起胸来，面对你要的梦想和创造，失败和成功。</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
  </entry>
  <entry>
    <title>小憩</title>
    <url>/posts/53822/</url>
    <content><![CDATA[<p>代码敲累了。仰在椅子上。看午后的阳光，悠闲地洒下。窗纱外的一片明亮。冬日空气里的沁凉。街上的嘈杂。</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
  </entry>
  <entry>
    <title>如何避免过拟合</title>
    <url>/posts/46474/</url>
    <content><![CDATA[<p>过拟合是因为模型过于复杂, 而学习数据有限.</p>
<ul>
<li>增加学习样本.</li>
<li>避免过度训练.<ul>
<li>减少特征: 相关性分析, PCA …</li>
<li>正则化.</li>
<li>集成学习.</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>计算机</category>
        <category>机器学习</category>
      </categories>
  </entry>
  <entry>
    <title>异常值检测</title>
    <url>/posts/63931/</url>
    <content><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><ol>
<li>金融<ol>
<li>账户安全性</li>
<li>客户真实性</li>
<li>欺诈检测（保险，审计，刷单，骗购，刷评论）</li>
</ol>
</li>
<li>计算机安全检测，网络流量异常检测</li>
<li>调查可靠性，查询安全性</li>
<li>硬件检测（数据中心，云服务）</li>
<li>药品检测</li>
</ol>
<span id="more"></span>

<h3 id="难点"><a href="#难点" class="headerlink" title="难点"></a>难点</h3><ul>
<li>确定正常状态的范围非常困难。通常，正常和异常的边界很模糊，边界附近的点容易误判。</li>
<li>异常可能被伪装。</li>
<li>缺乏标记数据。</li>
<li>数据通常含有噪音。</li>
</ul>
<h2 id="不同类型"><a href="#不同类型" class="headerlink" title="不同类型"></a>不同类型</h2><h3 id="点异常（Point-Anomalies）"><a href="#点异常（Point-Anomalies）" class="headerlink" title="点异常（Point Anomalies）"></a>点异常（Point Anomalies）</h3><p>大多数情况。与其他数据相比，单个数据的异常。</p>
<blockquote>
<p>一大笔交易在一些小额交易中是异常。</p>
</blockquote>
<h3 id="上下文异常（Contextual-Anomalies）"><a href="#上下文异常（Contextual-Anomalies）" class="headerlink" title="上下文异常（Contextual Anomalies）"></a>上下文异常（Contextual Anomalies）</h3><p>数据在特定上下文中是异常的，在不同的上下文中可能不是异常。</p>
<blockquote>
<p>26°C 在冬天是异常，但在夏天是正常。</p>
<p>一大笔消费在工作时间是异常，但在促销季是正常。</p>
</blockquote>
<h3 id="集合异常（Collective-Anomalies）"><a href="#集合异常（Collective-Anomalies）" class="headerlink" title="集合异常（Collective Anomalies）"></a>集合异常（Collective Anomalies）</h3><p>不常见，难以检测（可能从未发生过）。数据的集合在整个数据集中异常，但单个值不是异常。</p>
<blockquote>
<p>大量地购买 iPhone 是异常，但购买一部不是。</p>
<p>同时购买高压锅、背包和钉子是异常。</p>
</blockquote>
<h2 id="欺诈种类"><a href="#欺诈种类" class="headerlink" title="欺诈种类"></a>欺诈种类</h2><h3 id="ATO（Account-Hacker）"><a href="#ATO（Account-Hacker）" class="headerlink" title="ATO（Account Hacker）"></a>ATO（Account Hacker）</h3><h4 id="Device-Malwares"><a href="#Device-Malwares" class="headerlink" title="Device Malwares"></a>Device Malwares</h4><ul>
<li>mobile interception</li>
<li>reroute traffic</li>
<li>malicious material in network security system</li>
</ul>
<h4 id="Phishing-Websites"><a href="#Phishing-Websites" class="headerlink" title="Phishing Websites"></a>Phishing Websites</h4><p>需要输入个人信息：信用卡、银行账号、登录信息等</p>
<h3 id="Identity-Theft"><a href="#Identity-Theft" class="headerlink" title="Identity Theft"></a>Identity Theft</h3><p>拿到身份后去申请贷款、信用卡、银行透支</p>
<h3 id="Social-Engineering"><a href="#Social-Engineering" class="headerlink" title="Social Engineering"></a>Social Engineering</h3><p>针对大众，或针对特定群体、组织</p>
<h2 id="欺诈模型-feature"><a href="#欺诈模型-feature" class="headerlink" title="欺诈模型 feature"></a>欺诈模型 feature</h2><ul>
<li>交易信息<ul>
<li>国家、地区、邮编、地址、姓名、邮箱、IP</li>
<li>安全认证：手机、邮箱</li>
<li>金额</li>
<li>产品类型</li>
<li>时间</li>
</ul>
</li>
<li>设备信息<ul>
<li>操作系统、浏览器、app、IP、VPN</li>
</ul>
</li>
<li>链接信息<ul>
<li>同一台设备上的账号数</li>
</ul>
</li>
<li>风险评估<ul>
<li>邮箱域名、地址</li>
</ul>
</li>
<li>时间聚合</li>
<li>其他<ul>
<li>性别、年龄、签发银行</li>
<li>卡类型</li>
</ul>
</li>
</ul>
<h2 id="模型"><a href="#模型" class="headerlink" title="模型"></a>模型</h2><h3 id="固定阈值模型"><a href="#固定阈值模型" class="headerlink" title="固定阈值模型"></a>固定阈值模型</h3><p>超过阈值认为异常。怎么定阈值？</p>
<ul>
<li>预先学习过的数据（top k，分位数）</li>
<li>SLA（Service Level Agreement），用户要求</li>
</ul>
<p>优势：简单、广泛、恒定</p>
<p>缺陷：不适用于周期、趋势、季节性数据</p>
<h3 id="移动阈值模型"><a href="#移动阈值模型" class="headerlink" title="移动阈值模型"></a>移动阈值模型</h3><p>阈值是输入的函数。比如，当前阈值是前 60 个值的中位数的 $k$ 倍。</p>
<h3 id="时间序列模型"><a href="#时间序列模型" class="headerlink" title="时间序列模型"></a>时间序列模型</h3><p>AR，MA，ARIMA</p>
<h3 id="百分位模型"><a href="#百分位模型" class="headerlink" title="百分位模型"></a>百分位模型</h3><p>比如，一个顾客的消费异常，如果它超过了相似顾客消费中位数的 $k%$。</p>
<h3 id="统计模型"><a href="#统计模型" class="headerlink" title="统计模型"></a>统计模型</h3><h4 id="一维"><a href="#一维" class="headerlink" title="一维"></a>一维</h4><p>在正态分布假设下，$3\sigma$ 包含了 $99.7%$ 的数据。</p>
<p>箱线图分析：最小 $Q_1-k(Q_3-Q_1)$，最大 $Q_3+k(Q_3-Q_1)$ 。</p>
<h4 id="高维"><a href="#高维" class="headerlink" title="高维"></a>高维</h4><p>在每维特征独立同高斯分布的假设下，<br>$$<br>p(x)=\prod_{j=1}^n{1\over\sqrt{2\pi}\sigma_j}\exp\left(-\frac{(x_j-\mu_j)^2}{2\sigma_j^2}\right).<br>$$<br>报异常如果 $p(x)&lt;\varepsilon$ 。</p>
<h3 id="无监督模型"><a href="#无监督模型" class="headerlink" title="无监督模型"></a>无监督模型</h3><h4 id="K-means"><a href="#K-means" class="headerlink" title="K-means"></a>K-means</h4><h4 id="Isolation-Forest"><a href="#Isolation-Forest" class="headerlink" title="Isolation Forest"></a>Isolation Forest</h4><p>binary tree 的集合，随机分裂。异常值更容易被分到叶子结点上，正常值更深。</p>
<h4 id="LOF（Local-Outlier-Factor）"><a href="#LOF（Local-Outlier-Factor）" class="headerlink" title="LOF（Local Outlier Factor）"></a>LOF（Local Outlier Factor）</h4><p>对每个数据点，计算到其他点的距离，找到 kNN，计算分数。思想是计算相对密度，如果一个点的相对密度很低，认为是异常值。</p>
<p>不适用于大数据集（计算距离、排序很耗时），参数选择困难。</p>
<h2 id="一个例子"><a href="#一个例子" class="headerlink" title="一个例子"></a>一个例子</h2><p>假设有 10000 个正常硬盘、20 个损坏硬盘的数据。我们把数据分成三组：</p>
<p>train：6000 个正常硬盘</p>
<p>test：2000个正常硬盘，10 个损坏硬盘</p>
<p>validation：2000 个正常硬盘，10 个损坏硬盘</p>
<ol>
<li>用 train 构建 $p(x)$。</li>
<li>在 validation 上尝试不同的 $\varepsilon$，根据 $F_1$ 或查准率等来选择阈值。</li>
<li>在 test 上做预测，计算 $F_1$，precision，recall 等。</li>
</ol>
<iframe src="/file/OutlierDetection.html" width="100%" height="7000"></iframe>]]></content>
      <categories>
        <category>计算机</category>
        <category>机器学习</category>
      </categories>
  </entry>
  <entry>
    <title>弱模型的集合 (ensemble)</title>
    <url>/posts/36436/</url>
    <content><![CDATA[<h2 id="Bagging"><a href="#Bagging" class="headerlink" title="Bagging"></a>Bagging</h2><ul>
<li><strong>homogeneous</strong> weak learner</li>
<li>learn each <strong>independently</strong> in parallel</li>
<li>combine through averaging</li>
<li>reduce variance</li>
</ul>
<h2 id="Boosting"><a href="#Boosting" class="headerlink" title="Boosting"></a>Boosting</h2><ul>
<li><strong>homogeneous</strong> weak learner</li>
<li>learn each <strong>sequentially</strong> in an adaptive way</li>
<li>combine through deternimistic strategy</li>
<li>reduce bias</li>
</ul>
<h2 id="Stacking"><a href="#Stacking" class="headerlink" title="Stacking"></a>Stacking</h2><ul>
<li><strong>heterogeneous</strong> weak learner</li>
<li>learn each <strong>independently</strong> in parallel</li>
<li>combine on each prediction</li>
</ul>
]]></content>
      <categories>
        <category>计算机</category>
        <category>机器学习</category>
      </categories>
  </entry>
  <entry>
    <title>找到离原点第k近的点</title>
    <url>/posts/38610/</url>
    <content><![CDATA[<p>利用大根堆:</p>
<figure class="highlight py"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> heapq</span><br><span class="line"><span class="keyword">from</span> numpy.linalg <span class="keyword">import</span> norm</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">k_closest</span>(<span class="params">points, k</span>):</span><br><span class="line">    h = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(points)):</span><br><span class="line">        dist = - norm(points[i])</span><br><span class="line">        heapq.heappush(h, (dist, i))</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(h) &gt; k:</span><br><span class="line">            heapq.heappop(h)  <span class="comment"># 把最远的 pop 出去了</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> [points[item[<span class="number">1</span>]] <span class="keyword">for</span> item <span class="keyword">in</span> h]</span><br></pre></td></tr></tbody></table></figure>]]></content>
      <categories>
        <category>计算机</category>
        <category>算法</category>
      </categories>
  </entry>
  <entry>
    <title>排序</title>
    <url>/posts/37489/</url>
    <content><![CDATA[<h2 id="冒泡排序-bubble-sort"><a href="#冒泡排序-bubble-sort" class="headerlink" title="冒泡排序 (bubble sort)"></a>冒泡排序 (bubble sort)</h2><h3 id="解法一"><a href="#解法一" class="headerlink" title="解法一"></a>解法一</h3><figure class="highlight py"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">bubble_sort1</span>(<span class="params">array</span>):</span><br><span class="line">    <span class="comment"># 每次都排好最后一个元素, 所以关注的列表长度 (n) 依次少 1</span></span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(array)-<span class="number">1</span>, <span class="number">0</span>, -<span class="number">1</span>):    </span><br><span class="line">        <span class="comment"># 从左到右比较, 把最大的数串到最右边</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            <span class="keyword">if</span> array[i] &gt; array[i+<span class="number">1</span>]:</span><br><span class="line">                array[i], array[i+<span class="number">1</span>] = array[i+<span class="number">1</span>], array[i]</span><br></pre></td></tr></tbody></table></figure>
<h3 id="解法二"><a href="#解法二" class="headerlink" title="解法二"></a>解法二</h3><figure class="highlight py"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">bubble_sort2</span>(<span class="params">array</span>):</span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(array)):</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(array)-n-<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> array[i] &gt; array[i+<span class="number">1</span>]:</span><br><span class="line">                array[i], array[i+<span class="number">1</span>] = array[i+<span class="number">1</span>], array[i]</span><br></pre></td></tr></tbody></table></figure>
<p>时间: $O(n^2)$</p>
<p>空间: $O(1)$</p>
<h2 id="选择排序-selection-sort"><a href="#选择排序-selection-sort" class="headerlink" title="选择排序 (selection sort)"></a>选择排序 (selection sort)</h2><h3 id="解法一-1"><a href="#解法一-1" class="headerlink" title="解法一"></a>解法一</h3><figure class="highlight py"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">selection_sort1</span>(<span class="params">array</span>):</span><br><span class="line">    <span class="comment"># 每次都排好最后一个元素, 所以关注的列表长度 (n) 依次少 1</span></span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(array)-<span class="number">1</span>, <span class="number">0</span>, -<span class="number">1</span>):</span><br><span class="line">        <span class="comment"># 找到当前窗口的最大元素</span></span><br><span class="line">        max_ind = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n+<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> array[i] &gt; array[max_ind]:</span><br><span class="line">                max_ind = i</span><br><span class="line">        <span class="comment"># 把它和当前最后一个元素交换</span></span><br><span class="line">        array[n], array[max_ind] = array[max_ind], array[n]</span><br></pre></td></tr></tbody></table></figure>
<h3 id="解法二-1"><a href="#解法二-1" class="headerlink" title="解法二"></a>解法二</h3><figure class="highlight py"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">selection_sort2</span>(<span class="params">array</span>):</span><br><span class="line">    <span class="comment"># 每次都排好第一个元素, 从第 i 个开始看</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(array)):</span><br><span class="line">        <span class="comment"># 找到最小元素</span></span><br><span class="line">        min_ind = i</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i, <span class="built_in">len</span>(array)):</span><br><span class="line">            <span class="keyword">if</span> array[j] &lt; array[min_ind]:</span><br><span class="line">                min_ind = j</span><br><span class="line">        <span class="comment"># 和第一个元素交换</span></span><br><span class="line">        array[i], array[min_ind] = array[min_ind], array[i]</span><br></pre></td></tr></tbody></table></figure>
<p>时间: $O(n^2)$</p>
<p>空间: $O(1)$</p>
<h2 id="插入排序-insertion-sort"><a href="#插入排序-insertion-sort" class="headerlink" title="插入排序 (insertion sort)"></a>插入排序 (insertion sort)</h2><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><figure class="highlight py"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">insert_num</span>(<span class="params">array, num</span>):</span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    insert num into array, while keeping array sorted</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    array.append(num)</span><br><span class="line">    idx = <span class="built_in">len</span>(array)-<span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> idx &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">if</span> array[idx-<span class="number">1</span>] &gt; array[idx]:</span><br><span class="line">            array[idx-<span class="number">1</span>], array[idx] = array[idx], array[idx-<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        idx -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">insertion_sort</span>(<span class="params">array</span>):</span><br><span class="line">    new = []</span><br><span class="line">    <span class="keyword">for</span> num <span class="keyword">in</span> array:</span><br><span class="line">        insert_num(new, num)</span><br><span class="line">    <span class="keyword">return</span> new</span><br></pre></td></tr></tbody></table></figure>
<p>时间: $O(n^2)$</p>
<p>空间: $O(n)$</p>
<h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><figure class="highlight py"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">insertion_sort2</span>(<span class="params">array</span>):</span><br><span class="line">    <span class="comment"># i 之后的是没见过的数, i 之前的是插入排好的</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(array)):</span><br><span class="line">        k = i   <span class="comment"># 要插入的数</span></span><br><span class="line">        <span class="comment"># 插入下标 k 的数</span></span><br><span class="line">        <span class="keyword">while</span> k &gt; <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">if</span> array[k-<span class="number">1</span>] &gt; array[k]:</span><br><span class="line">                array[k-<span class="number">1</span>], array[k] = array[k], array[k-<span class="number">1</span>]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            k -= <span class="number">1</span></span><br></pre></td></tr></tbody></table></figure>
<p>时间: $O(n^2)$</p>
<p>空间: $O(1)$</p>
<h2 id="归并排序-merge-sort"><a href="#归并排序-merge-sort" class="headerlink" title="归并排序 (merge sort)"></a>归并排序 (merge sort)</h2><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">merge</span>(<span class="params">l1, l2</span>):</span><br><span class="line">    new = []</span><br><span class="line">    i = j = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> i &lt; <span class="built_in">len</span>(l1) <span class="keyword">and</span> j &lt; <span class="built_in">len</span>(l2):</span><br><span class="line">        <span class="keyword">if</span> l1[i] &lt; l2[j]:</span><br><span class="line">            new.append(l1[i])</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            new.append(l2[j])</span><br><span class="line">            j += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> i &lt; <span class="built_in">len</span>(l1):</span><br><span class="line">        new.extend(l1[i:])</span><br><span class="line">    <span class="keyword">if</span> j &lt; <span class="built_in">len</span>(l2):</span><br><span class="line">        new.extend(l2[j:])</span><br><span class="line">    <span class="keyword">return</span> new</span><br></pre></td></tr></tbody></table></figure>
<p>时间: $O(n)$</p>
<p>空间: $O(n)$</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">merge_sort</span>(<span class="params">array</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(array) <span class="keyword">in</span> (<span class="number">0</span>, <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">return</span> array</span><br><span class="line">    mid = (<span class="built_in">len</span>(array) + <span class="number">1</span>) // <span class="number">2</span></span><br><span class="line">    left = merge_sort(array[:mid])</span><br><span class="line">    right = merge_sort(array[mid:])</span><br><span class="line">    <span class="keyword">return</span> merge(left, right)</span><br></pre></td></tr></tbody></table></figure>
<p>时间: $O(n\log n)$</p>
<p>空间: $O(\log n)+O(n)=O(n)$ </p>
<p>recursion 层数 + 最多同时用到的空间</p>
<h2 id="快速排序-quick-sort"><a href="#快速排序-quick-sort" class="headerlink" title="快速排序 (quick sort)"></a>快速排序 (quick sort)</h2><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">partition</span>(<span class="params">array, start, end, pivot_ind</span>):</span><br><span class="line">    array[pivot_ind], array[end] = array[end], array[pivot_ind]</span><br><span class="line">    store = start  <span class="comment"># store 左边都比 pivot 小</span></span><br><span class="line">    pivot = array[end]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(start, end):</span><br><span class="line">        <span class="keyword">if</span> array[i] &lt; pivot:</span><br><span class="line">            array[i], array[store] = array[store], array[i]</span><br><span class="line">            store += <span class="number">1</span></span><br><span class="line">    array[store], array[end] = array[end], array[store]</span><br><span class="line">    <span class="keyword">return</span> store</span><br></pre></td></tr></tbody></table></figure>
<p>时间: $O(n)$</p>
<p>空间: $O(1)$</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randrange</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">helper</span>(<span class="params">array, start, end</span>):</span><br><span class="line">    <span class="keyword">if</span> start &gt;= end:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    pivot_ind = randrange(start, end + <span class="number">1</span>)</span><br><span class="line">    new_pivot_ind = partition(array, start, end, pivot_ind)</span><br><span class="line">    helper(array, start, new_pivot_ind - <span class="number">1</span>)</span><br><span class="line">    helper(array, new_pivot_ind + <span class="number">1</span>, end)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">quick_sort</span>(<span class="params">array</span>):</span><br><span class="line">    helper(array, <span class="number">0</span>, <span class="built_in">len</span>(array)-<span class="number">1</span>)</span><br></pre></td></tr></tbody></table></figure>
<p>快速排序是不稳定的.</p>
<p>时间: </p>
<ul>
<li>$O(n\log n)$ (理想情况, pivot 取中位数)</li>
<li>$O(n^2)$ (最差情况, pivot 取最值)</li>
</ul>
<p>空间: </p>
<ul>
<li>$O(\log n)$ (平均情况)</li>
<li>$O(n)$ (小概率)</li>
</ul>
]]></content>
      <categories>
        <category>计算机</category>
        <category>算法</category>
      </categories>
  </entry>
  <entry>
    <title>放学路上</title>
    <url>/posts/61326/</url>
    <content><![CDATA[<p>无法抑制去想，记不得那最后一次黄昏的放学路上。耳畔的空灵悠扬，橙红的落日夕阳，沁人的微风飘荡。脚下波光粼粼，眺望远方鹅黄的垂柳，爬上石阶的嫩草。如梦似幻。</p>
<p>晚风，斜阳，音乐，白鹅，湖面，屋檐的金辉，静夜的虫鸣与群星。</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
  </entry>
  <entry>
    <title>春天来了</title>
    <url>/posts/61668/</url>
    <content><![CDATA[<p>没有了过往的凛冽，风变得和煦轻柔起来，枝条上冒出了毛茸茸的骨朵。</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
  </entry>
  <entry>
    <title>春雨</title>
    <url>/posts/27822/</url>
    <content><![CDATA[<p>春雨吵醒了一簇簇的红艳，沾湿了一树树的花香。</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
  </entry>
  <entry>
    <title>普达措</title>
    <url>/posts/39803/</url>
    <content><![CDATA[<p>彳彳亍亍，林雪风花，幽幽皑皑飒飒。<br>探探寻寻，湖鸟山虫，澹澹呖呖葱葱。</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
  </entry>
  <entry>
    <title>晴朗的校园</title>
    <url>/posts/4892/</url>
    <content><![CDATA[<p>今天的世界格外明朗。徐徐的清风，轻柔的阳光，点点嫩芽，热闹的人群。一切都还是那样平常，但仿佛和那些日漫中的理想校园，只差着几片飞舞的樱花瓣。</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
  </entry>
  <entry>
    <title>数据可视化</title>
    <url>/posts/24365/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>计算机</category>
        <category>机器学习</category>
      </categories>
  </entry>
  <entry>
    <title>实对称阵的合同对角化</title>
    <url>/posts/5692/</url>
    <content><![CDATA[<p>设对实对称阵 $A$ 满足 $Q^TAQ=\Lambda$，其中 $\Lambda$ 是 $A$ 的特征值组成的对角阵，问 $Q$ 是否正交。</p>
<p>答案是否定的。</p>
<span id="more"></span>

<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>构造反例时为了方便，可以直接取 $A$ 为对角阵 $\Lambda$，因为对角阵的对角元就是特征值。</p>
<p>问题化为：找非正交阵 $Q$，满足 $Q^T\Lambda Q=\Lambda$。下面尝试把 $\Lambda$ 写成 $Q^T\Lambda Q$ 的形式：<br>$$<br>\begin{align*}<br>\Lambda&amp;=(\Lambda^{\frac12}\Lambda^{-\frac12})\Lambda(\Lambda^{-\frac12}\Lambda^{\frac12})\<br>&amp;=(\Lambda^{\frac12}V^T\Lambda^{-\frac12})\Lambda(\Lambda^{-\frac12}V\Lambda^{\frac12})\<br>&amp;=Q^T\Lambda Q,<br>\end{align*}<br>$$<br>其中引入了正交阵 $V$，可见 $Q=\Lambda^{-\frac12}V\Lambda^{\frac12}$ 是一种选择。什么时候 $Q$ 不正交呢？</p>
<p>正交矩阵的一个性质是元素的绝对值都不超过1，所以我们选择合适的 $\Lambda$ 和 $V$，使 $Q$ 中有元素绝对值大于1即可。实际上<br>$$<br>q_{ij}=v_{ij}\sqrt{\frac{\lambda_j}{\lambda_i}}，<br>$$<br>$i$ 和 $j$ 不能相等，因为 $|q_{ii}|=|v_{ii}|\leq1$。</p>
<p>所以构造步骤为：取正交阵 $V$，需要其中某个非对角元 $v_{ij}\ne0$。然后取对角阵$\Lambda$，其中 $\lambda_j/\lambda_i$ 足够大，使得 $\left|v_{ij}\sqrt{\frac{\lambda_j}{\lambda_i}}\right|&gt;1$。再构造 $Q=\Lambda^{-\frac12}V\Lambda^{\frac12}$，那么 $Q$ 不是正交阵，而 $Q^T\Lambda Q=\Lambda$。</p>
<h2 id="一个具体的例子"><a href="#一个具体的例子" class="headerlink" title="一个具体的例子"></a>一个具体的例子</h2><p>取<br>$$<br>V=\begin{bmatrix}0&amp;1\1&amp;0\end{bmatrix},\ \Lambda=\begin{bmatrix}1 &amp;\&amp; 4\end{bmatrix},<br>$$<br>那么<br>$$<br>Q=\begin{bmatrix}1&amp;\&amp;\frac12\end{bmatrix}\begin{bmatrix}0&amp;1\1&amp;0\end{bmatrix}\begin{bmatrix}1&amp;\&amp;2\end{bmatrix}=\begin{bmatrix}0&amp;2\\frac12&amp;0\end{bmatrix}\ \text{不是正交阵},<br>$$<br>而$Q^T\Lambda Q=\Lambda$。</p>
]]></content>
      <categories>
        <category>数学</category>
        <category>代数</category>
        <category>线性代数</category>
      </categories>
  </entry>
  <entry>
    <title>最长无重复子串的长度</title>
    <url>/posts/1239/</url>
    <content><![CDATA[<p><code>abcabcbb</code> 返回 3, 因为任意长度为 4 的子串都有重复字符.</p>
<figure class="highlight py"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> defaultdict</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">longest_substring</span>(<span class="params">s</span>):</span><br><span class="line">    result = <span class="number">0</span></span><br><span class="line">    occurred = defaultdict(<span class="built_in">int</span>)</span><br><span class="line">    left = <span class="number">0</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> right <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(s)):</span><br><span class="line">        occurred[s[right]] += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> occurred[s[right]] &gt; <span class="number">1</span>:</span><br><span class="line">            occurred[s[left]] -= <span class="number">1</span></span><br><span class="line">            left += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        result = <span class="built_in">max</span>(result, right - left + <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> result</span><br></pre></td></tr></tbody></table></figure>]]></content>
      <categories>
        <category>计算机</category>
        <category>算法</category>
      </categories>
  </entry>
  <entry>
    <title>林中漫步</title>
    <url>/posts/16963/</url>
    <content><![CDATA[<p>林风拂幽径，鸟鸣惊落花</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
  </entry>
  <entry>
    <title>曲线积分和曲面积分</title>
    <url>/posts/21677/</url>
    <content><![CDATA[<h2 id="曲线积分"><a href="#曲线积分" class="headerlink" title="曲线积分"></a>曲线积分</h2><h3 id="第一型曲线积分-displaystyle-int-Gamma-f-bm-r-d-s"><a href="#第一型曲线积分-displaystyle-int-Gamma-f-bm-r-d-s" class="headerlink" title="第一型曲线积分 $\displaystyle\int_\Gamma f(\bm{r})\d s$"></a>第一型曲线积分 $\displaystyle\int_\Gamma f(\bm{r})\d s$</h3><ol>
<li>求 $\Gamma$ 的向量参数方程 $\bm{r}=\bm{r}(t)$</li>
<li>计算弧元 $\d s=|\bm{r}’(t)|\d t$</li>
<li>计算定积分 $\displaystyle\int_\alpha^\beta f(\bm{r}(t))|\bm{r}’(t)|\d t$</li>
</ol>
<span id="more"></span>

<h3 id="第二型曲线积分-displaystyle-int-Gamma-bm-f-bm-r-cdot-d-bm-r"><a href="#第二型曲线积分-displaystyle-int-Gamma-bm-f-bm-r-cdot-d-bm-r" class="headerlink" title="第二型曲线积分 $\displaystyle\int_\Gamma \bm{f}(\bm{r})\cdot\d\bm{r}$"></a>第二型曲线积分 $\displaystyle\int_\Gamma \bm{f}(\bm{r})\cdot\d\bm{r}$</h3><p>笛卡尔坐标系下可以写作 $$\int_\Gamma P\d x+Q\d y+R\d z$$</p>
<p>Green 公式 (第二型曲线积分 $\to$ 面积分) $$\int_{\partial\Omega}P\d x+Q\d y=\iint_\Omega\left(Q_x’-P_y’\right)\d x\d y$$</p>
<h2 id="曲面积分"><a href="#曲面积分" class="headerlink" title="曲面积分"></a>曲面积分</h2><h3 id="第一型曲面积分-displaystyle-int-Sigma-f-d-sigma"><a href="#第一型曲面积分-displaystyle-int-Sigma-f-d-sigma" class="headerlink" title="第一型曲面积分 $\displaystyle\int_\Sigma f\d\sigma$"></a>第一型曲面积分 $\displaystyle\int_\Sigma f\d\sigma$</h3><p>$$\int_\Sigma f\d\sigma=\iint_D f(x,y,\phi(x,y))\sqrt{1+\left({\partial\phi\over\partial x}\right)^2+\left({\partial\phi\over\partial y}\right)^2}\d x\d y$$</p>
<blockquote>
<p>🌰 $\displaystyle\int_\Sigma (x+y+z)\d\sigma$, 其中曲面是上半球面 $x^2+y^2+z^2=a^2\ (z\geq0)$.</p>
<p>$z=\sqrt{a^2-x^2-y^2},\ z_x’=-\dfrac{x}{z},\ z_y’=-\dfrac{y}{z}$<br>$\displaystyle\d\sigma=\sqrt{1+(z_x’)^2+(z_y’)^2}\d x\d y=\sqrt{1+{x^2+y^2\over z^2}}\d x\d y=\dfrac az\d x\d y$</p>
<p>由对称性, 原式 $=$<br>$$\int_\Sigma z\d\sigma=\int_{x^2+y^2\leq a^2} z\cdot\frac az\d x\d y=\pi a^3$$</p>
</blockquote>
<h3 id="第二型曲面积分-displaystyle-int-Sigma-bm-f-cdot-d-bm-sigma-x3D-int-Sigma-bm-f-cdot-bm-n-d-sigma"><a href="#第二型曲面积分-displaystyle-int-Sigma-bm-f-cdot-d-bm-sigma-x3D-int-Sigma-bm-f-cdot-bm-n-d-sigma" class="headerlink" title="第二型曲面积分 $\displaystyle \int_\Sigma\bm{f}\cdot \d\bm{\sigma}=\int_\Sigma\bm{f}\cdot \bm{n}\d\sigma$"></a>第二型曲面积分 $\displaystyle \int_\Sigma\bm{f}\cdot \d\bm{\sigma}=\int_\Sigma\bm{f}\cdot \bm{n}\d\sigma$</h3><p>$$\iint_\Sigma R\d x\d y=\pm\iint_D R(x,y,f(x,y))\d x\d y$$</p>
<blockquote>
<p>🌰 $\displaystyle\bm{f}=(x,y,z)$, $\Sigma$ 是中心在原点, 半径为 $a$ 的球面, 外法线正向.</p>
<p>$\displaystyle\bm{n}=\left(\frac xa, \frac ya, \frac za\right)$</p>
<p>于是 $$\begin{aligned}\int_\Sigma\bm{f}\cdot\bm{n}\d\sigma&amp;=\frac1a\int_\Sigma (x^2+y^2+z^2)\d\sigma\<br>&amp;=a\int_\Sigma\d\sigma<br>\&amp;=a\cdot4\pi a^2\<br>&amp;=4a^3\end{aligned}$$</p>
</blockquote>
<p>Gauss 公式 (第二型曲面积分 $\to$ 体积分)</p>
<p>$$<br>\iint_{\partial\Omega}P\d y\d z+Q\d z\d x+R\d x\d y=\iiint_{\Omega}\left(P_x’+Q_y’+R_z’\right)\d x\d y\d z<br>$$</p>
<p>Stokes 公式 (第二型曲线积分 $\to$ 第二型曲面积分)</p>
<p>$$<br>\int_{\partial\Sigma}P\d x+Q\d y+R\d z=\iint_\Sigma\begin{vmatrix}<br>    \d y\d z &amp; \d z\d x &amp; \d x\d y\<br>    {\partial\over\partial x} &amp; {\partial\over\partial y} &amp; {\partial\over\partial z}\<br>    P &amp; Q &amp; R<br>\end{vmatrix}<br>$$<br>或</p>
<p>$$<br>\int_{\partial\Sigma}P\d x+Q\d y+R\d z=\iint_\Sigma\begin{vmatrix}<br>    \cos\alpha &amp; \cos\beta &amp; \cos\gamma\<br>    {\partial\over\partial x} &amp; {\partial\over\partial y} &amp; {\partial\over\partial z}\<br>    P &amp; Q &amp; R<br>\end{vmatrix}\d\sigma,<br>$$<br>其中 $(\cos\alpha, \cos\beta, \cos\gamma)$ 是曲面 $\Sigma$ 的单位正<strong>法向量</strong>.</p>
]]></content>
      <categories>
        <category>数学</category>
        <category>分析</category>
        <category>微积分</category>
        <category>多元微积分</category>
      </categories>
  </entry>
  <entry>
    <title>树的最大路径和</title>
    <url>/posts/49292/</url>
    <content><![CDATA[<h2 id="叶子到根"><a href="#叶子到根" class="headerlink" title="叶子到根"></a>叶子到根</h2><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">   10</span><br><span class="line">  /  \</span><br><span class="line"> -2   7</span><br><span class="line"> /\</span><br><span class="line">8 -4 </span><br></pre></td></tr></tbody></table></figure>
<p>最大路径和为 $10+7=17$.</p>
<span id="more"></span>

<h3 id="Bottom-Up"><a href="#Bottom-Up" class="headerlink" title="Bottom Up"></a>Bottom Up</h3><figure class="highlight py"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">maxPathSum</span>(<span class="params">root</span>):</span><br><span class="line">    <span class="keyword">if</span> root <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">return</span> -<span class="built_in">float</span>(<span class="string">'inf'</span>)</span><br><span class="line">    <span class="keyword">if</span> root.left <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">and</span> root.right <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">return</span> root.val</span><br><span class="line"></span><br><span class="line">    left = maxPathSum(root.left)</span><br><span class="line">    right = maxPathSum(root.right)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">max</span>(left, right) + root.val</span><br></pre></td></tr></tbody></table></figure>

<h3 id="Top-Down"><a href="#Top-Down" class="headerlink" title="Top Down"></a>Top Down</h3><figure class="highlight py"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">maxPathSum</span>(<span class="params">self, root</span>):</span><br><span class="line">        self.ret = -<span class="built_in">float</span>(<span class="string">'inf'</span>)</span><br><span class="line">        self.helper(root, <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> self.ret</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">helper</span>(<span class="params">self, root, curSum</span>):</span><br><span class="line">        <span class="keyword">if</span> root <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">if</span> root.left <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">and</span> root.right <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            self.ret = <span class="built_in">max</span>(self.ret, curSum + root.val)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        self.helper(root.left, curSum + root.val)</span><br><span class="line">        self.helper(root.right, curSum + root.val)</span><br></pre></td></tr></tbody></table></figure>

<h2 id="叶子到根或部分"><a href="#叶子到根或部分" class="headerlink" title="叶子到根或部分"></a>叶子到根或部分</h2><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line"> -10</span><br><span class="line"> /  \</span><br><span class="line">2   11</span><br><span class="line">   /  \</span><br><span class="line">  6   14</span><br><span class="line">       \</span><br><span class="line">        -1</span><br></pre></td></tr></tbody></table></figure>
<p>最大路径和为 $11+14=25$.</p>
<h3 id="Top-Down-1"><a href="#Top-Down-1" class="headerlink" title="Top Down"></a>Top Down</h3><figure class="highlight py"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">maxPath</span>(<span class="params">self, root</span>):</span><br><span class="line">        <span class="keyword">if</span> root <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        self.result = root.val</span><br><span class="line">        self.helper(root, <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> self.result</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">helper</span>(<span class="params">self, root, prev</span>):</span><br><span class="line">        <span class="keyword">if</span> root <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        prev = <span class="built_in">max</span>(root.val, prev + root.val)</span><br><span class="line">        self.result = <span class="built_in">max</span>(self.result, prev)</span><br><span class="line">        self.helper(root.left, prev)</span><br><span class="line">        self.helper(root.right, prev)</span><br></pre></td></tr></tbody></table></figure>

<h2 id="叶子到叶子"><a href="#叶子到叶子" class="headerlink" title="叶子到叶子"></a>叶子到叶子</h2><figure class="highlight py"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">maxPathSum</span>(<span class="params">self, root</span>):</span><br><span class="line">        self.result = -<span class="built_in">float</span>(<span class="string">'inf'</span>)</span><br><span class="line">        self.helper(root)</span><br><span class="line">        <span class="keyword">return</span> self.result</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">helper</span>(<span class="params">self, root</span>):</span><br><span class="line">        <span class="keyword">if</span> root <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> root.left <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">and</span> root.right <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> root.val</span><br><span class="line"></span><br><span class="line">        left = self.helper(root.left)</span><br><span class="line">        right = self.helper(root.right)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> root.left <span class="keyword">and</span> root.right:</span><br><span class="line">            self.result = <span class="built_in">max</span>(self.result, left + right + root.val)</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">max</span>(left, right) + root.val</span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> root.left <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">and</span> root.right:</span><br><span class="line">                <span class="keyword">return</span> right + root.val</span><br><span class="line">            <span class="keyword">elif</span> root.left <span class="keyword">and</span> root.right <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                <span class="keyword">return</span> left + root.val</span><br></pre></td></tr></tbody></table></figure>

<h2 id="任意两个节点"><a href="#任意两个节点" class="headerlink" title="任意两个节点"></a>任意两个节点</h2><figure class="highlight py"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">find_max</span>(<span class="params">self, root</span>):</span><br><span class="line">        self.<span class="built_in">max</span> = -<span class="built_in">float</span>(<span class="string">'inf'</span>)</span><br><span class="line">        self.helper(root)</span><br><span class="line">        <span class="keyword">return</span> self.<span class="built_in">max</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">helper</span>(<span class="params">self, root</span>):</span><br><span class="line">        <span class="keyword">if</span> root <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        left = self.helper(root.left)</span><br><span class="line">        right = self.helper(root.right)</span><br><span class="line">        self.<span class="built_in">max</span> = <span class="built_in">max</span>(self.<span class="built_in">max</span>, root.val + <span class="built_in">max</span>(left, <span class="number">0</span>) + <span class="built_in">max</span>(right, <span class="number">0</span>))</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">max</span>(left, right, <span class="number">0</span>) + root.val</span><br></pre></td></tr></tbody></table></figure>]]></content>
      <categories>
        <category>计算机</category>
        <category>算法</category>
      </categories>
  </entry>
  <entry>
    <title>检查 Binary search tree (BST)</title>
    <url>/posts/32064/</url>
    <content><![CDATA[<p>定义: 对每个节点, 左子树的值都比它小, 右子树的值都比它大.</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">    10</span><br><span class="line">   /  \</span><br><span class="line">  5    15</span><br><span class="line"> / \   / \</span><br><span class="line">2   7 12 20</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight py"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">BST</span>(<span class="params">root</span>):</span><br><span class="line">    <span class="keyword">if</span> root <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    min_val = <span class="built_in">float</span>(<span class="string">'-inf'</span>)</span><br><span class="line">    max_val = <span class="built_in">float</span>(<span class="string">'inf'</span>)</span><br><span class="line">    <span class="keyword">return</span> isBST(root, min_val, max_val)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">isBST</span>(<span class="params">root, min_val, max_val</span>):</span><br><span class="line">    <span class="keyword">if</span> root <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">if</span> root.val &lt;= min_val <span class="keyword">or</span> root.val &gt;= max_val:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> isBST(root.left, min_val, root.val) <span class="keyword">and</span> isBST(root.right, root.val, max_val)</span><br></pre></td></tr></tbody></table></figure>]]></content>
      <categories>
        <category>计算机</category>
        <category>算法</category>
      </categories>
  </entry>
  <entry>
    <title>树的按层遍历 (BFS)</title>
    <url>/posts/8322/</url>
    <content><![CDATA[<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">    3</span><br><span class="line">   / \</span><br><span class="line">  9  20</span><br><span class="line"> /  /  \</span><br><span class="line">3  15   7</span><br></pre></td></tr></tbody></table></figure>
<p>输出 <code>[3, 9, 20, 3, 15, 7]</code>.</p>
<span id="more"></span>

<figure class="highlight py"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line"></span><br><span class="line">queue = deque([root])</span><br><span class="line">result = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> queue:</span><br><span class="line">    node = queue.popleft()</span><br><span class="line">    result.append(node.val)</span><br><span class="line">    <span class="keyword">if</span> node.left:</span><br><span class="line">        queue.append(node.left)</span><br><span class="line">    <span class="keyword">if</span> node.right:</span><br><span class="line">        queue.append(node.right)</span><br></pre></td></tr></tbody></table></figure>

<h2 id="要求保存每一层"><a href="#要求保存每一层" class="headerlink" title="要求保存每一层"></a>要求保存每一层</h2><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">    3</span><br><span class="line">   / \</span><br><span class="line">  9  20</span><br><span class="line"> /  /  \</span><br><span class="line">3  15   7</span><br><span class="line">  /  \</span><br><span class="line"> 21  22 </span><br></pre></td></tr></tbody></table></figure>
<p>输出 <code>[[3], [9, 20], [3, 15, 7], [21, 22]]</code>.</p>
<figure class="highlight py"><table><tbody><tr><td class="code"><pre><span class="line">queue = deque([root])</span><br><span class="line">result = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> queue:</span><br><span class="line">    count = <span class="built_in">len</span>(queue)  <span class="comment"># 当前层有几个值?</span></span><br><span class="line">    current_level = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(count):</span><br><span class="line">        node = queue.popleft()</span><br><span class="line">        current_level.append(node.val)</span><br><span class="line">        <span class="keyword">if</span> node.left:</span><br><span class="line">            queue.append(node.left)</span><br><span class="line">        <span class="keyword">if</span> node.right:</span><br><span class="line">            queue.append(node.right)</span><br><span class="line">    result.append(current_level)</span><br></pre></td></tr></tbody></table></figure>
<p>时间: $O(n)$</p>
<p>空间: $O(n)$  (最宽的那一层)</p>
]]></content>
      <categories>
        <category>计算机</category>
        <category>算法</category>
      </categories>
  </entry>
  <entry>
    <title>没什么远大理想</title>
    <url>/posts/48210/</url>
    <content><![CDATA[<p>我只希望在一个天气不那么晴的日子里，在一个不那么吵的地方，读一本没那么有用的书，听一点不那么流行的歌。</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
  </entry>
  <entry>
    <title>树的最小高度</title>
    <url>/posts/64764/</url>
    <content><![CDATA[<h2 id="Bottom-Up"><a href="#Bottom-Up" class="headerlink" title="Bottom Up"></a>Bottom Up</h2><figure class="highlight py"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">minDepth</span>(<span class="params">root</span>):</span><br><span class="line">    <span class="keyword">if</span> root <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">return</span> helper(root)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">helper</span>(<span class="params">root</span>):</span><br><span class="line">    <span class="keyword">if</span> root <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">float</span>(<span class="string">'inf'</span>)  <span class="comment"># 如果只有一个孩子, 返回该孩子处的高度</span></span><br><span class="line">    <span class="keyword">if</span> root.left <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">and</span> root.right <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    l = helper(root.left)</span><br><span class="line">    r = helper(root.right)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">min</span>(l, r) + <span class="number">1</span></span><br></pre></td></tr></tbody></table></figure>

<h2 id="Top-Down"><a href="#Top-Down" class="headerlink" title="Top Down"></a>Top Down</h2><figure class="highlight py"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">minDepth</span>(<span class="params">self, root</span>):</span><br><span class="line">        <span class="keyword">if</span> root <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        self.ret = <span class="built_in">float</span>(<span class="string">'inf'</span>)</span><br><span class="line">        self.helper(root, <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> self.ret</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">helper</span>(<span class="params">self, root, depth</span>):</span><br><span class="line">        <span class="keyword">if</span> root <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">if</span> root.left <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">and</span> root.right <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            self.ret = <span class="built_in">min</span>(self.ret, depth)</span><br><span class="line">        </span><br><span class="line">        self.helper(root.left, depth + <span class="number">1</span>)</span><br><span class="line">        self.helper(root.right, depth + <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br></pre></td></tr></tbody></table></figure>]]></content>
      <categories>
        <category>计算机</category>
        <category>算法</category>
      </categories>
  </entry>
  <entry>
    <title>树的路径和等于目标值</title>
    <url>/posts/40717/</url>
    <content><![CDATA[<h2 id="Top-Down"><a href="#Top-Down" class="headerlink" title="Top Down"></a>Top Down</h2><figure class="highlight py"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">exist</span>(<span class="params">self, root, target</span>):</span><br><span class="line">        self.target = target</span><br><span class="line">        self.ret = <span class="literal">False</span></span><br><span class="line">        self.helper(root, <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> self.ret</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">helper</span>(<span class="params">selr, root, current</span>):</span><br><span class="line">        <span class="keyword">if</span> root <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">if</span> root.left <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">and</span> root.right <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            self.ret = self.ret <span class="keyword">or</span> current + root.val == self.target</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">if</span> self.ret == <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        self.helper(root.left, current + root.val)</span><br><span class="line">        self.helper(root.right, current + root.val)</span><br></pre></td></tr></tbody></table></figure>

<h2 id="Top-Down-Bottom-Up"><a href="#Top-Down-Bottom-Up" class="headerlink" title="Top Down + Bottom Up"></a>Top Down + Bottom Up</h2><figure class="highlight py"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">exist</span>(<span class="params">self, root, target</span>):</span><br><span class="line">        self.target = target</span><br><span class="line">        <span class="keyword">return</span> self.helper(root, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">helper</span>(<span class="params">self, root, current</span>):</span><br><span class="line">        <span class="keyword">if</span> root <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">if</span> root.left <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">and</span> root.right <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> current + root.val == self.target</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> self.helper(root.left, current + root.val) <span class="keyword">or</span> self.helper(root.right, current + root.val)</span><br></pre></td></tr></tbody></table></figure>]]></content>
      <categories>
        <category>计算机</category>
        <category>算法</category>
      </categories>
  </entry>
  <entry>
    <title>泸沽湖</title>
    <url>/posts/30601/</url>
    <content><![CDATA[<p>淡霭缭绕，彩彻区朗。澄波荡漾，野凫满塘。泛舟湖上，蒹葭苍苍。薄暮冥冥，跃金浮光。</p>
<p>每次下车，定有一群道德绑架犯伪装成兜售小贩的样子，为了一丁点蝇头小利各种卑鄙手段无所不用其极。吵嚷纠缠，丢尽了彝族人的脸，无论怎样的美景都在刹那间黯淡无光。试问我泱泱华夏，如今是否还有一片真正的净土？最后一丝少数民族的质朴，亦被利益磨到尸骨无存！</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
  </entry>
  <entry>
    <title>模型误差与过拟合</title>
    <url>/posts/12469/</url>
    <content><![CDATA[<p>误差分解<br>$$<br>E(\text{error})=\text{bias}^2+\text{Var}+\varepsilon.<br>$$</p>
<span id="more"></span>

<hr>
<p>先定义:</p>
<p>均方误差<br>$$<br>\text{MSE}(\hat\theta)=E[(\hat\theta-\theta)^2]<br>$$<br>偏差<br>$$<br>\text{bias}(\hat\theta,\theta)=E[\hat\theta]-\theta<br>$$</p>
<p>那么<br>$$<br>\begin{align*}<br>\text{MSE}(\hat\theta)&amp;=E\left[\left(\hat\theta-\theta\right)^2\right]\<br>&amp;=E\left[\left(\hat\theta-E[\hat\theta]+E[\hat\theta]-\theta\right)^2\right]\<br>&amp;=E\left[\left(\hat\theta-E[\hat\theta]\right)^2+2\left(\hat\theta-E[\hat\theta]\right)\left(E[\hat\theta]-\theta\right)+\left(E[\hat\theta]-\theta\right)^2\right]\<br>&amp;=E\left[\left(\hat\theta-E[\hat\theta]\right)^2\right]+2E\left[\left(\hat\theta-E[\hat\theta]\right)\left(E[\hat\theta]-\theta\right)\right]+E\left[\left(E[\hat\theta]-\theta\right)^2\right]\<br>&amp;=\text{Var}(\hat\theta)+2\left(E[\hat\theta]-\theta\right)E\left[\left(\hat\theta-E[\hat\theta]\right)\right]+\left(E[\hat\theta]-\theta\right)^2\<br>&amp;=\text{Var}+\text{bias}^2<br>\end{align*}<br>$$</p>
<p>随着模型复杂度的增加, bias 减少, variance 增加. 也就是说, 能力变强, 不稳定性变大. 那么总误差呈现一个先减后增的趋势:<br><img src="/posts/12469/error.png"><br>这就是 bias-variance dilemma.</p>
]]></content>
      <categories>
        <category>计算机</category>
        <category>机器学习</category>
      </categories>
  </entry>
  <entry>
    <title>用两个 stack 实现 queue</title>
    <url>/posts/27896/</url>
    <content><![CDATA[<figure class="highlight py"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Queue</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        self.s1 = []  <span class="comment"># entrance</span></span><br><span class="line">        self.s2 = []  <span class="comment"># exit</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">enqueue</span>(<span class="params">self, x</span>):</span><br><span class="line">        self.s1.append(x)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">dequeue</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.s2:</span><br><span class="line">            <span class="keyword">while</span> self.s1:</span><br><span class="line">                self.s2.append(self.s1.pop())</span><br><span class="line">        <span class="keyword">return</span> self.s2.pop()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">is_empty</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">not</span> self.s1 <span class="keyword">and</span> <span class="keyword">not</span> self.s2</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">size</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(self.s1) + <span class="built_in">len</span>(self.s2)</span><br></pre></td></tr></tbody></table></figure>

<p>时间:</p>
<ul>
<li>入队 $O(1)$</li>
<li>出队最差 $O(n)$, amortized $O(1)$</li>
</ul>
]]></content>
      <categories>
        <category>计算机</category>
        <category>算法</category>
      </categories>
  </entry>
  <entry>
    <title>消消乐</title>
    <url>/posts/34214/</url>
    <content><![CDATA[<p>重复去重, 比如 abbbaz -&gt; aaz -&gt; z.</p>
<span id="more"></span>

<figure class="highlight py"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">remove_duplicate_repeatedly</span>(<span class="params">string</span>):</span><br><span class="line">    <span class="comment"># corner case</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(string) &lt; <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> string</span><br><span class="line">    <span class="comment"># init</span></span><br><span class="line">    stack = deque()</span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    <span class="comment"># loop</span></span><br><span class="line">    <span class="keyword">while</span> i &lt; <span class="built_in">len</span>(string):</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(stack) &gt; <span class="number">0</span> <span class="keyword">and</span> string[i] == stack[-<span class="number">1</span>]:</span><br><span class="line">            <span class="comment"># find duplicate: skip</span></span><br><span class="line">            <span class="keyword">while</span> i &lt; <span class="built_in">len</span>(string) <span class="keyword">and</span> string[i] == stack[-<span class="number">1</span>]:</span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">            stack.pop()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            stack.append(string[i])</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">''</span>.join(stack)</span><br></pre></td></tr></tbody></table></figure>

<p>时间: $O(n)$</p>
<p>时间: $O(n)$</p>
<p>改进: 用慢指针存储栈顶.</p>
<figure class="highlight py"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">remove_duplicate</span>(<span class="params">string</span>):</span><br><span class="line">    string = <span class="built_in">list</span>(string)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(string) &lt;= <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> string</span><br><span class="line">    s, f = <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> f &lt; <span class="built_in">len</span>(string):</span><br><span class="line">        <span class="keyword">if</span> s &gt; <span class="number">0</span> <span class="keyword">and</span> <span class="built_in">input</span>[f] == <span class="built_in">input</span>[s]:  <span class="comment"># 栈非空</span></span><br><span class="line">            <span class="keyword">while</span> f &lt; <span class="built_in">len</span>(string) <span class="keyword">and</span> <span class="built_in">input</span>[f] == <span class="built_in">input</span>[s]:</span><br><span class="line">                f += <span class="number">1</span></span><br><span class="line">            s -= <span class="number">1</span>  <span class="comment"># 出栈</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            string[s + <span class="number">1</span>] = string[f]  <span class="comment"># 入栈</span></span><br><span class="line">            f += <span class="number">1</span></span><br><span class="line">            s += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">""</span>.join(string[:s+<span class="number">1</span>])</span><br></pre></td></tr></tbody></table></figure>]]></content>
      <categories>
        <category>计算机</category>
        <category>算法</category>
      </categories>
  </entry>
  <entry>
    <title>科普是一项非常难的工作</title>
    <url>/posts/20918/</url>
    <content><![CDATA[<p>要想当一个好学生，只需要把知识学懂。</p>
<p>要想当一个好老师，需要一些基础知识，还需要良好的性格和表达能力、心理学和教育学经验。</p>
<p>要想当一个好教授，需要有专业知识、科研水平，只需要一般般的表达能力。</p>
<p><strong>而要当一个好的科普工作者，需要有远超学生的理解能力，教授一样的专业水平，老师一样的教学功力，艺术家一样的审美，作家一样的文笔，诗人一样的清高，科学家一样对知识的热爱，艺人一样对大众心理的把控能力，运动员一样的毅力，还要有自身的人格魅力、抗压抗打击能力。</strong></p>
<p>科普是一项非常难的工作，比讲课教书难得多。因为它面对的不是专业人士，而是乌合之众。这导致科普工作者必须用通俗语言来解释专业知识，却又不至于过于通俗而产生误导。稍微有一点漏洞就会被抓住攻击——有问题的科普比谣言更可怕，比迷信更害人。</p>
<p>所以，科普工作者是一个神圣的标签，这个名号比想象中要严苛得多。</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
  </entry>
  <entry>
    <title>线性方程组的迭代法</title>
    <url>/posts/57010/</url>
    <content><![CDATA[<p>思路: 在线性方程组 $$Ax=b$$ 中把 $A$ 写成 $M-N$, 就启发我们得到了迭代形式 $$\begin{equation}\label{iter}Mx^{(k+1)}=Nx^{(k)}+b\end{equation}$$ 易见迭代收敛时极限就是解.</p>
<span id="more"></span>


<table>
<thead>
<tr>
<th><strong>定理: $A$ 和 $M$ 可逆, 且 $\rho(M^{-1}N)&lt;1$ 时 $\eqref{iter}$ 对任意初值 $x^{(0)}$ 收敛.</strong></th>
</tr>
</thead>
<tbody><tr>
<td>这利用了 $\rho(B)\to0\implies B^k\to0\ (k\to\infty)$</td>
</tr>
</tbody></table>
<p>下面把 $A$ 写成严格下三角, 对角和严格上三角阵的和: $A=L+D+U$.</p>
<h2 id="Jacobi-迭代-M-x3D-D-N-x3D-L-U"><a href="#Jacobi-迭代-M-x3D-D-N-x3D-L-U" class="headerlink" title="Jacobi 迭代 $M=D$, $N=-(L+U)$"></a>Jacobi 迭代 $M=D$, $N=-(L+U)$</h2><p>$$<br>    Dx^{k+1}=-(L+U)x^{(k)}+b<br>$$</p>
<table>
<thead>
<tr>
<th><strong>定理: $A$ 按行主对角严格占优时 Jacobi 方法对任意初值 $x^{(0)}$ 收敛.</strong></th>
</tr>
</thead>
<tbody><tr>
<td>$\displaystyle\rho(M^{-1}N)=\rho(D^{-1}(L+U))\leq|D^{-1}(L+U)|<em>\infty=\max_i\sum</em>{j\ne i}\left</td>
</tr>
</tbody></table>
<h2 id="Gauss-Seidel-迭代-M-x3D-D-L-N-x3D-U"><a href="#Gauss-Seidel-迭代-M-x3D-D-L-N-x3D-U" class="headerlink" title="Gauss-Seidel 迭代 $M=D+L$, $N=-U$"></a>Gauss-Seidel 迭代 $M=D+L$, $N=-U$</h2><p>$$<br>(D+L)x^{(k+1)}=-Ux^{(k)}+b<br>$$</p>
<table>
<thead>
<tr>
<th><strong>定理: $A$ 正定时 Gauss-Seidel 方法对任意初值 $x^{(0)}$ 收敛.</strong></th>
</tr>
</thead>
</table>
<h2 id="逐次超松弛迭代-Successive-Overrelaxation"><a href="#逐次超松弛迭代-Successive-Overrelaxation" class="headerlink" title="逐次超松弛迭代 (Successive Overrelaxation)"></a>逐次超松弛迭代 (Successive Overrelaxation)</h2><p>取 </p>
<p>$$<br>M=\frac{1}{\omega} D+L, \quad N=\frac{1-\omega}{\omega} D-U<br>$$<br>就得到了<br>$$<br>(D+\omega L) x^{(k+1)}=\left((1-\omega) D-\omega U\right) x^{(k)}+\omega b.<br>$$<br>其中 $\omega=1$ 时就是 Gauss-Seidel 迭代.</p>
<p>| <strong>定理: SOR 方法中 $\rho(M^{-1}N)\geq|\omega-1|$, 所以收敛时必有 $0&lt;\omega&lt;2$.</strong> |<br>|–|<br>| $\displaystyle\det(M^{-1}N)=\det\left((D+\omega L)^{-1}\left((1-\omega D)-\omega U\right)\right)=\det(D^{-1})\det\left((1-\omega)D\right)=(1-\omega)^n$ |<br>|于是 $\lambda_1\cdots\lambda_n=(1-\omega)^n$, 那么 $\max_i|\lambda_i|\geq |1-\omega|$|</p>
<p>可以证明对正定矩阵 SOR 对所有 $0&lt;\omega&lt;2$ 收敛.</p>
]]></content>
      <categories>
        <category>数学</category>
        <category>数值分析</category>
      </categories>
  </entry>
  <entry>
    <title>假设性检验</title>
    <url>/posts/24350/</url>
    <content><![CDATA[<p>假定原假设 $H_0$ 是正确的, 根据观测值决定是否推翻它.</p>
<span id="more"></span>

<img src="/posts/24350/tails.png">

<p>在 $H_0$ 的假定下, 出现了当前的观测值 (或出现更极端的结果) 的概率被称为 <strong>$p$ 值</strong>.</p>
<ul>
<li><p><strong>第一类错误</strong>: 拒绝了真的 $H_0$. (冤案)</p>
</li>
<li><p><strong>第二类错误</strong>: 未拒绝假的 $H_0$. (漏网)</p>
</li>
</ul>
<p>可能同时避免两类错误, 不可能同时犯两类错误.</p>
<hr>
<p>犯第一类错误的概率为 $\alpha$, 即显著性水平.</p>
<p>犯第二类错误的概率为 $\beta$. </p>
<img src="/posts/24350/H01.png" width="500">

<p>不犯第二类错误的概率, 即正确拒绝一个假的 $H_0$ 的概率为 $1-\beta$, 被称为<strong>功效</strong> (power).</p>
<h2 id="z-检验-已知总体的分布-或样本足够多"><a href="#z-检验-已知总体的分布-或样本足够多" class="headerlink" title="$z$ 检验: 已知总体的分布, 或样本足够多"></a>$z$ 检验: 已知总体的分布, 或样本足够多</h2><h3 id="一个组"><a href="#一个组" class="headerlink" title="一个组"></a>一个组</h3><p>标准寿命为 $10$. 抽取 $100$ 个样本, 样本均值为 $11.2$, 样本方差为 $0.25$. 是否可以判断样本的寿命比标准的长?</p>
<blockquote>
<p>样本容量超过 $30$, 用样本方差来代替原方差.</p>
</blockquote>
<p>$$<br>z = {11.2-10\over \sqrt{0.25/100}}=24<br>$$</p>
<p>$p$ 值 $=F_{\text {normal}}(-24)\ll 0.01$, 拒绝原假设.</p>
<hr>
<p>扔 $10$ 次硬币有 $6$ 次正面向上, 是否 biased?</p>
<p>$$<br>z = {0.6-0.5\over\sqrt{0.5\times(1-0.5)/10}} = 0.632<br>$$</p>
<p>不能拒绝原假设.</p>
<h3 id="两个组"><a href="#两个组" class="headerlink" title="两个组"></a>两个组</h3><p>$$<br>z = {\mu_1-\mu_2\over\sqrt{\sigma_1^2/n_1+\sigma_2^2/n_2}}<br>$$<br>第一组 $1000$ 个, 均值 $1000$; 第二组 $500$ 个, 均值 $600$. 哪一组均值更大?</p>
<p>$$<br>z = {p_1-p_2\over\sqrt{p(1-p)(1/n_1+1/n_2)}}<br>$$<br>第一组 $1000$ 个有 $100$ 次点击, 第二组 $500$ 个有 $60$ 次点击, 哪个转化率更高?</p>
<h2 id="t-检验-未知总体方差-且样本少"><a href="#t-检验-未知总体方差-且样本少" class="headerlink" title="$t$ 检验: 未知总体方差, 且样本少"></a>$t$ 检验: 未知总体方差, 且样本少</h2><p>样本量足够大时, $t$ 检验趋于 $z$ 检验.</p>
]]></content>
      <categories>
        <category>数学</category>
        <category>统计</category>
      </categories>
  </entry>
  <entry>
    <title>计算定积分</title>
    <url>/posts/46715/</url>
    <content><![CDATA[<p>计算定积分<br>$$<br>I_n=\int_0^1(1-x^2)^n\d x.<br>$$</p>
<span id="more"></span>

<h2 id="递推"><a href="#递推" class="headerlink" title="递推"></a>递推</h2><p>$$<br>\begin{align*}<br>I_n&amp;=\int_0^1(1-x^2)^n,\mathrm dx\<br>&amp;=\int_0^1(1-x^2)(1-x^2)^{n-1},\mathrm dx\<br>&amp;=\int_0^1(1-x^2)^{n-1},\mathrm dx-\int_0^1x^2(1-x^2)^{n-1},\mathrm dx\<br>&amp;=I_{n-1}+\frac{1}{2n}\int_0^1x,\mathrm d(1-x^2)^{n}\<br>&amp;=I_{n-1}+\frac{1}{2n}\left.x(1-x^2)^n\right|<em>0^1-\frac{1}{2n}\int_0^1(1-x^2)^n,\mathrm dx\<br>&amp;=I</em>{n-1}-\frac{1}{2n}I_n\<br>&amp;={2n\over2n+1}I_{n-1},<br>%&amp;=\left.t(1-t^2)\right|<em>{0}^1-n\int_0^1t(1-t^2)^{n-1},\mathrm dt\<br>%&amp;=-n\left(\left.t^2(1-t^2)^{n-1}\right|<em>0^1-\int_0^1\left((1-t^2)^{n-1}-2(n-1)t^2(1-t^2)^{n-2}\right),\mathrm dt\right)\<br>%&amp;=n\int_0^1(1-t^2)^{n-1},\mathrm dt+2n(n-1)\int_0^1t^2(1-t^2)^{n-2},\mathrm dt<br>%&amp;=\int_0^1\sum</em>{k=0}^n{n\choose k}(-t^2)^k,\mathrm dt\<br>%&amp;=\int_0^1\sum</em>{k=0}^n{n\choose k}(-1)^kt^{2k},\mathrm dt\<br>%&amp;=\sum_{k=0}^n{n\choose k}(-1)^k\int_0^1t^{2k},\mathrm dt\<br>%&amp;=\sum_{k=0}^n{(-1)^k{n\choose k}\over 2k+1}<br>\end{align*}<br>$$</p>
<p>利用 $I_0=1$ 递推可得<br>$$<br>I_n={(2n)!!\over(2n+1)!!}.<br>$$</p>
<h2 id="Gamma-函数"><a href="#Gamma-函数" class="headerlink" title="Gamma 函数"></a>Gamma 函数</h2><p>作代换 $x=\sqrt{t}$，可得<br>$$<br>\begin{align*}<br>\int_0^1(1-x^2)^n\d x &amp;= \frac12\int_0^1 (1-t)^n t^{-\frac12}\d t\<br>&amp;= \frac12 \B\left(n+1, \frac12\right)\<br>&amp;= \frac12 {\Gamma(n+1)\Gamma\left(\frac12\right)\over\Gamma\left(n+\frac32\right)}\<br>&amp;=\frac12{n!\cdot\Gamma\left(\frac12\right)\over\frac{2n+1}{2}\times\cdots\times\frac32\times\frac12 \Gamma\left(\frac12\right)}\<br>&amp;= {2^nn!\over (2n+1)!!}\<br>&amp;={(2n)!!\over (2n+1)!!}.<br>\end{align*}<br>$$</p>
]]></content>
      <categories>
        <category>数学</category>
        <category>分析</category>
        <category>微积分</category>
        <category>单变量微积分</category>
      </categories>
  </entry>
  <entry>
    <title>自习</title>
    <url>/posts/12721/</url>
    <content><![CDATA[<p>屋外的松树轻柔地律动，都贴到窗上来了。白茫茫的远空，不缓不急的阳光，飘香的槐花，清凉的音乐。</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
  </entry>
  <entry>
    <title>自然</title>
    <url>/posts/28624/</url>
    <content><![CDATA[<p>傍晚的热闹休闲沙滩，午夜的萤火魔幻森林，与异域篝火、冬不拉。</p>
<p>人从自然中来，回不到自然中去。那对山幽鸟虫鸣的向往，会因为几声平凡不过的响动，转为惶恐。</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
  </entry>
  <entry>
    <title>英国的上午</title>
    <url>/posts/34132/</url>
    <content><![CDATA[<p>我看见透蓝的天空，茵绿的草地，金黄的落叶。我闻到湿润的泥土，幽香的野花，沁凉的空气。我看见喜鹊圆滚的肚子和松鼠蓬松的尾巴。</p>
<p>我看见倾洒下来的阳光和摇曳的树影。</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
  </entry>
  <entry>
    <title>翻转二叉树</title>
    <url>/posts/22393/</url>
    <content><![CDATA[<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">    1            4</span><br><span class="line">   / \          / \</span><br><span class="line">  2   3   -&gt;   5   2</span><br><span class="line"> / \              / \</span><br><span class="line">4   5            3   1</span><br></pre></td></tr></tbody></table></figure>
<p>单元:</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">  A          B</span><br><span class="line"> / \   -&gt;   / \</span><br><span class="line">B   C      C   A</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight py"><table><tbody><tr><td class="code"><pre><span class="line">root.left.left = root.right</span><br><span class="line">root.left.right = root</span><br><span class="line">root.left = <span class="literal">None</span></span><br><span class="line">root.right = <span class="literal">None</span></span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight py"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">upside</span>(<span class="params">root</span>):</span><br><span class="line">    <span class="keyword">if</span> root <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">return</span> root</span><br><span class="line">    <span class="keyword">if</span> root.left <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">and</span> root.right <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">return</span> root</span><br><span class="line">    new_root = upside(root.left)</span><br><span class="line">    root.left.left = root.right</span><br><span class="line">    root.left.right = root</span><br><span class="line">    root.left = <span class="literal">None</span></span><br><span class="line">    root.right = <span class="literal">None</span></span><br><span class="line">    <span class="keyword">return</span> new_root</span><br></pre></td></tr></tbody></table></figure>
<p>时间: $O(n/3)=O(n)$</p>
<p>空间: $O(n/3)=O(n)$</p>
]]></content>
      <categories>
        <category>计算机</category>
        <category>算法</category>
      </categories>
  </entry>
  <entry>
    <title>计算定积分</title>
    <url>/posts/45803/</url>
    <content><![CDATA[<p>计算<br>$$<br>\int_0^1{\ln\left(x+\sqrt{1-x^2}\right)\over x},\mathrm dx.<br>$$</p>
<span id="more"></span>

<hr>
<h2 id="方法一-（Feynman’s-Trick）"><a href="#方法一-（Feynman’s-Trick）" class="headerlink" title="方法一 （Feynman’s Trick）"></a>方法一 （Feynman’s Trick）</h2><p>定义<br>$$<br>I(a)=\int_{0}^{1} \frac{\ln \left(a x+\sqrt{1-x^{2}}\right)}{x},\mathrm d x,<br>$$<br>那么<br>$$<br>\begin{align*}I^{\prime}(a)&amp;=\int_0^1{x\over ax+\sqrt{1-x^2}}\frac1x,\mathrm dx\<br>&amp;=\int_{0}^{1} \frac{\mathrm d x}{a x+\sqrt{1-x^{2}}}\<br>&amp;=\int_0^{\frac\pi2}{\cos t\over a\sin t+\cos t},\mathrm dt<br>\&amp;=: I\end{align*}<br>$$<br>定义<br>$$<br>J=\int_0^{\frac\pi2}{\sin t\over a\sin t +\cos t},\mathrm dt,<br>$$<br>组合积分法：<br>$$<br>I+aJ=\int_0^\frac\pi2{a\sin t+\cos t\over a\sin t +\cos t},\mathrm dt=\frac\pi2<br>$$</p>
<p>$$<br>\begin{align*}<br>aI-J&amp;=\int_0^\frac\pi2{a\cos t-\sin t\over a\sin t+\cos t},\mathrm dx\<br>&amp;=\int_0^\frac\pi2{\mathrm d(a\sin t+\cos t)\over a\sin t+\cos t}\<br>&amp;=\left.\ln(a\sin t+\cos t)\right|_0^\frac\pi2\<br>&amp;=\ln a<br>\end{align*}<br>$$</p>
<p>解得 (Cramer法则)<br>$$<br>\begin{align*}<br>I&amp;={\begin{vmatrix}\frac\pi2&amp;a\\ln a&amp;-1\end{vmatrix}\over\begin{vmatrix}1&amp;a\a&amp;-1\end{vmatrix}}\&amp;=\frac{1}{1+a^{2}}\left(\frac{\pi}{2}+a \ln a\right).<br>\end{align*}<br>$$<br>此外，<br>$$<br>\begin{align*}I(0)&amp;=\int_0^1{\ln\sqrt{1-x^2}\over x},\mathrm dx\&amp;=\int_0^1{\ln\sqrt{1-t}\over\sqrt{t}}{\mathrm dt\over 2<br>\sqrt t}&amp;&amp;\text{by $x^2=t$}\&amp;=\frac14\int_0^1{\ln(1-t)\over t},\mathrm dx\&amp;=-\frac14\int_0^1\sum_{n=1}^\infty{x^{n-1}\over n},\mathrm dx&amp;&amp;\text{by Taylor Series}\<br>&amp;=-\frac14\sum_{n=1}^\infty\frac1n\int_0^1x^{n-1},\mathrm dx\&amp;=-\frac14\sum_{n=1}^\infty\frac{1}{n^2}\&amp;=-\frac{\pi^2}{24},\end{align*}<br>$$<br>于是<br>$$<br>\begin{align*}\text{原积分}&amp;=I(1)\&amp;=I(0)+\int_0^1I’(a),\mathrm da\<br>&amp;=-\frac{\pi^2}{24}+\int_0^1\frac{1}{1+a^{2}}\left(\frac{\pi}{2}+a \ln a\right),\mathrm da\<br>&amp;=-\frac{\pi^2}{24}+\frac{\pi}{2}\int_0^1\frac{1}{1+a^{2}},\mathrm dx+\int_0^1\frac{a}{1+a^{2}}\ln a,\mathrm da\<br>&amp;=-\frac{\pi^2}{24}+\frac\pi2\cdot\frac\pi4+<br>\int_0^1\sum_{n=0}^\infty(-1)^na^{2n+1}\ln a,\mathrm da\<br>&amp;=\frac{\pi^2}{12}+\sum_{n=0}^\infty{(-1)^{n+1}\over(2n+2)^2}\<br>&amp;=\frac{\pi^2}{12}-\frac14\sum_{n=1}^\infty{(-1)^{n}\over n^2}\<br>&amp;=\frac{\pi^2}{12}-\frac14\cdot\frac{\pi^2}{12}\<br>&amp;=\frac{\pi^2}{16}.\end{align*}<br>$$<br><em>注：积分号下求导、积分与求和换序需要有定理保障.</em></p>
<hr>
<h2 id="方法二（Feynman’s-Trick）"><a href="#方法二（Feynman’s-Trick）" class="headerlink" title="方法二（Feynman’s Trick）"></a>方法二（Feynman’s Trick）</h2><p>$$<br>I=\int_0^1{\ln(x+\sqrt{1-x^2})\over x},\mathrm dx<br>=\int_0^1{\ln \left[x\left(1+{\sqrt{1-x^2\over x^2}}\right)\right]\over x},\mathrm dx<br>$$</p>
<p>故作代换$t=\sqrt{1-x^2\over x^2}$, 那么$x=\frac{1}{\sqrt{1+t^2}}$, $\mathrm dx=-t(1+t^2)^{-\frac32},\mathrm dt:$<br>$$<br>\begin{align*}<br>I&amp;=\int_0^\infty{\ln\left[(1+t^2)^{-\frac12}(1+t)\right]\over(1+t^2)^{-\frac12}}\cdot t(1+t^2)^{-\frac32},\mathrm dt\<br>&amp;=\int_0^\infty{t\ln\left({1+t\over\sqrt{1+t^2}}\right)\over 1+t^2},\mathrm dt\<br>&amp;=\frac12\int_0^\infty{t\ln\left({(1+t)^2\over{1+t^2}}\right)\over 1+t^2},\mathrm dt\<br>&amp;=\frac12\int_0^\infty{t\ln\left(1+{2t\over 1+t^2}\right)\over 1+t^2},\mathrm dt\<br>\end{align*}<br>$$<br>定义<br>$$<br>I(a)=\frac12\int_0^\infty{t\ln\left(1+{2at\over 1+t^2}\right)\over 1+t^2},\mathrm dt,<br>$$<br>那么<br>$$<br>\begin{align*}I’(a)&amp;=\frac12\int_0^\infty {t\over 1+t^2}\cdot{1\over 1+{2at\over 1+t^2}}\cdot{2t\over 1+t^2},\mathrm dt\<br>&amp;=\int_0^\infty{t^2\over(t^2+1)(t^2+2at+1)},\mathrm d t\<br>&amp;=\frac{1}{2a}\int_0^\infty\left({t\over t^2+1}-{t\over t^2+2at+1}\right),\mathrm dt\<br>&amp;=\frac{1}{2a}\int_0^\infty\left(\frac12\cdot{\mathrm d(t^2+1)\over t^2+1}-\frac12\cdot{\mathrm d(t^2+2at+1)\over t^2+2at+1}+{a\over t^2+2at+1},\mathrm dt\right)\<br>&amp;=\frac{1}{4a}\left.\ln({t^2+1\over t^2+2at+1})\right|<em>{t=0}^\infty+\frac12\int_0^\infty{1\over(t+a)^2+1-a^2},\mathrm dt\<br>&amp;=0+\frac12\cdot{1\over1-a^2}\int_0^\infty{1\over1+\left({t+a\over\sqrt{1-a^2}}\right)^2},\mathrm dt\<br>&amp;=0+\frac12\cdot{1\over\sqrt{1-a^2}}\int_0^\infty{1\over1+\left({t+a\over\sqrt{1-a^2}}\right)^2},\mathrm d\left(t+a\over\sqrt{1-a^2}\right)\<br>&amp;={1\over 2\sqrt{1-a^2}}\left.\arctan\left(t+a\over\sqrt{1-a^2}\right)\right|</em>{t=0}^\infty\<br>&amp;={\frac\pi2-\arctan\left(a\over\sqrt{1-a^2}\right)\over2\sqrt{1-a^2}}\<br>&amp;={\arctan\left(\sqrt{1-a^2}\over a\right)\over 2\sqrt{1-a^2}}<br>\end{align*}<br>$$<br>且$I(0)=0$, 于是<br>$$<br>\begin{align*}\text{原积分}&amp;=I(1)\&amp;=I(0)+\int_0^1 I’(a),\mathrm da\<br>&amp;=\int_0^1{\arctan\left(\sqrt{1-a^2}\over a\right)\over 2\sqrt{1-a^2}},\mathrm da\<br>&amp;=\int_0^\frac\pi2{\arctan({\sin x\over\cos x})\over 2\sin x}\sin x,\mathrm dx\<br>&amp;=\int_0^\frac\pi2\frac x2,\mathrm dx\<br>&amp;={\pi^2\over16}.<br>\end{align*}<br>$$</p>
]]></content>
      <categories>
        <category>数学</category>
        <category>分析</category>
        <category>微积分</category>
        <category>单变量微积分</category>
      </categories>
  </entry>
  <entry>
    <title>过年</title>
    <url>/posts/22344/</url>
    <content><![CDATA[<p>写完春联，躺在窗边的床上，阳光晒着肚皮，窗外是湛蓝的天空，屋外是油锅的噼啪声</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
  </entry>
  <entry>
    <title>这种教育的意义就是磨灭所有人的学习热情</title>
    <url>/posts/51371/</url>
    <content><![CDATA[<p>今天我们学习检索，首先，文献分为以下几类，这几类有这样的联系，检索有以下几种方法，它们有这样那样的优缺点，这个检索是在这个时间由这家公司创办的。<br>下面我们做检索的练习，检索分为以下几个步骤，首先就是检索准备。要明确学科属性，弄清信息类型，明确信息要求。</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
  </entry>
  <entry>
    <title>计算级数</title>
    <url>/posts/42963/</url>
    <content><![CDATA[<p>计算<br>$$<br>\sum_{n=1}^\infty<br>{n!\over(2n+1)!!}\cdot{1\over n+1}.<br>$$</p>
<span id="more"></span>

<hr>
<h2 id="方法一：-arcsin-2x-的展开"><a href="#方法一：-arcsin-2x-的展开" class="headerlink" title="方法一：$\arcsin^2x$的展开"></a>方法一：$\arcsin^2x$的展开</h2><p>把双阶乘改写成阶乘。定义<br>$$<br>\begin{align*}<br>a_n&amp;={n!\over(2n+1)!!}\cdot{1\over n+1}\<br>&amp;={n!\over 1\cdot3\cdot5\cdots(2n+1)}\cdot{1\over n+1}\<br>&amp;={2\cdot4\cdots(2n+2)\cdot n!\over1\cdot2\cdot3\cdots(2n+1)\cdot(2n+2)}\cdot{1\over n+1}\<br>&amp;={2^{n+1}(n+1)!\cdot n!\over(2n+2)!}\cdot{1\over n+1}\<br>&amp;={2^{n+1}(n!)^2\over(2n+2)!}\<br>&amp;={2^{n+1}(n!)^2\over(2n+2)(2n+1)(2n)!}\<br>&amp;={2^n(n!)^2\over(n+1)(2n+1)(2n)!}\<br>&amp;={2^n\over(n+1)(2n+1){(2n)!\over(n!)^2}}\<br>&amp;={2^n\over(n+1)(2n+1){2n\choose n}}<br>\end{align*}<br>$$<br>求和的时候移动一下下标，把分母的$n+1$变成$n$：<br>$$<br>\begin{align*}<br>\sum_{n=1}^\infty a_n&amp;=\sum_{n=1}^\infty {2^n\over(n+1)(2n+1){2n\choose n}}\<br>&amp;=\sum_{n=2}^\infty{2^{n-1}\over n(2n-1){2n-2\choose n-1}}\<br>&amp;=\sum_{n=2}^\infty{2^{n}\over 2n(2n-1){(2n-2)!\over\left((n-1)!\right)^2}}\<br>&amp;=\sum_{n=2}^\infty{2^n\over{(2n)!\over\left((n-1)!\right)^2}}\<br>&amp;=\sum_{n=2}^\infty{2^n\over n^2{(2n)!\over (n!)^2}}\<br>&amp;=\sum_{n=2}^\infty{2^n\over n^2{2n\choose n}}<br>\end{align*}<br>$$<br>热知识：$\arcsin^2 x$的展开式满足<br>$$<br>2\arcsin^2\left(\frac x2\right)=\sum_{n=1}^\infty{x^{2n}\over n^2{2n\choose n}}.<br>$$<br>它的证明比较占篇幅，我写在<a href="/posts/20316/" title="这里">这里</a>.</p>
<p>其中令$x=\sqrt2$：<br>$$<br>2\arcsin^2\left(\frac{\sqrt2}{2}\right)=\sum_{n=1}^\infty{2^n\over n^2{2n\choose n}}=2\left(\frac{\pi}{4}\right)^2={\pi^2\over8}.<br>$$<br>于是<br>$$<br>\sum_{n=1}^\infty a_n=\sum_{n=2}^\infty{2^n\over n^2{2n\choose n}}={\pi^2\over8}-1.<br>$$</p>
<hr>
<h2 id="方法二：累次积分"><a href="#方法二：累次积分" class="headerlink" title="方法二：累次积分"></a>方法二：累次积分</h2><p>记<br>$$<br>a_n={n!\over(2n+1)!!}\cdot{1\over n+1}，<br>$$<br>把两个因子都表示成积分：<br>$$<br>{1\over n+1}=\int_0^1x^n,\mathrm dx<br>$$</p>
<p>$$<br>\begin{align*}<br>{n!\over(2n+1)!!}&amp;={n!\over 1\cdot3\cdot5\cdots(2n+1)}\<br>&amp;={2\cdot4\cdots(2n)\cdot n!\over1\cdot2\cdot3\cdots(2n)\cdot(2n+1)}\<br>&amp;={2^n(n!)^2\over(2n+1)!}\<br>&amp;={2^n(\Gamma(n+1))^2\over\Gamma(2n+2)}\<br>&amp;=2^n\cdot\mathrm B(n+1,n+1)\<br>&amp;=2^n\int_0^1y^n(1-y)^n,\mathrm dy\<br>&amp;=\int_0^1(2y(1-y))^n,\mathrm dy<br>\end{align*}<br>$$</p>
<p>其中后者我们利用了$\Gamma(n+1)=n!$，以及$\mathrm B(x,y)={\Gamma(x)\Gamma(y)\over\Gamma(x+y)}$.</p>
<p>于是（从$0$开始加使得级数结果更加简单），<br>$$<br>\begin{align*}<br>\sum_{n=0}^\infty a_n&amp;=\sum_{n=0}^\infty\left(\int_0^1x^n,\mathrm dx\right)\left(\int_0^1(2y(1-y))^n,\mathrm dy\right)\<br>&amp;=\int_0^1\int_0^1\sum_{n=0}^\infty(2xy(1-y))^n,\mathrm dx,\mathrm dy\<br>&amp;=\int_0^1\int_0^1{1\over1-2xy(1-y)},\mathrm dx,\mathrm dy.<br>\end{align*}<br>$$<br>做代换$y={1+u\over2}$，使得$y(1-y)={1+u\over2}\cdot{1-u\over2}={1-u^2\over4}.$</p>
<p>于是，<br>$$<br>\begin{align*}<br>\int_0^1\int_0^1{1\over1-2xy(1-y)},\mathrm dx,\mathrm dy&amp;=\int_0^1\left(\frac12\int_{-1}^1{1\over1-x\cdot{1-u^2\over2}},\mathrm du\right),\mathrm dx\<br>&amp;=\int_0^1\left(\int_{-1}^1{1\over2-x(1-u^2)},\mathrm du\right),\mathrm dx\<br>&amp;=\int_0^1\left(\int_{-1}^1{1\over2-x+xu^2},\mathrm du\right),\mathrm dx\<br>&amp;=\int_0^1\left(\frac1x\int_{-1}^1{1\over u^2+{2-x\over x}},\mathrm du\right),\mathrm dx\<br>&amp;=\int_0^1\left(\left.\frac1x\sqrt{x\over2-x}\arctan{u\over\sqrt{2-x\over x}}\right|_{u=-1}^{u=1}\right),\mathrm dx\<br>&amp;=\int_0^1\left(\frac2x\sqrt{x\over2-x}\arctan{1\over\sqrt{2-x\over x}}\right),\mathrm dx\<br>&amp;=\int_0^1\left({2\over \sqrt{x(2-x)}}\arctan{\sqrt{x\over 2-x}}\right),\mathrm dx.<br>\end{align*}<br>$$<br>做代换$x=1-t$，使得$x(2-x)=(1-t)(1+t)=1-t^2$.</p>
<p>于是，<br>$$<br>\begin{align*}<br>\text{原积分}=\int_0^1{2\over\sqrt{1-t^2}}\arctan\sqrt{1-t\over1+t},\mathrm dt<br>\end{align*}<br>$$<br>做代换$t=\cos\theta$，利用半角公式$\tan\frac\theta2=\sqrt{1-\cos\theta\over1+\cos\theta}$：<br>$$<br>\begin{align*}<br>\text{原积分}&amp;=\int_0^\frac\pi2{2\over\sin\theta}\arctan\left(\tan\frac\theta2\right)\sin\theta,\mathrm d\theta\<br>&amp;=\int_0^\frac\pi2\theta,\mathrm d\theta\<br>&amp;={\pi^2\over8}.<br>\end{align*}<br>$$<br>最终，<br>$$<br>\sum_{n=1}^\infty a_n=-a_0+\sum_{n=0}^\infty a_n={\pi^2\over8}-1.<br>$$</p>
]]></content>
      <categories>
        <category>数学</category>
        <category>分析</category>
        <category>微积分</category>
        <category>级数</category>
      </categories>
  </entry>
  <entry>
    <title>逆波兰表达式</title>
    <url>/posts/16754/</url>
    <content><![CDATA[<p><code>1 2 + 3 * 4 /</code> 代表 <code>(1 + 2) * 3 / 4</code>.</p>
<figure class="highlight py"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">evalRPN</span>(<span class="params">tokens</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(tokens) == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    stack = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(tokens)):</span><br><span class="line">        <span class="keyword">if</span> tokens[i] == <span class="string">'+'</span>:</span><br><span class="line">            r = stack.pop()</span><br><span class="line">            l = stack.pop()</span><br><span class="line">            stack.append(l + r)</span><br><span class="line">        <span class="keyword">elif</span> tokens[i] == <span class="string">'-'</span>:</span><br><span class="line">            r = stack.pop()</span><br><span class="line">            l = stack.pop()</span><br><span class="line">            stack.append(l - r)</span><br><span class="line">        <span class="keyword">elif</span> tokens[i] == <span class="string">'*'</span>:</span><br><span class="line">            r = stack.pop()</span><br><span class="line">            l = stack.pop()</span><br><span class="line">            stack.append(l * r)</span><br><span class="line">        <span class="keyword">elif</span> tokens[i] == <span class="string">'/'</span>:</span><br><span class="line">            r = stack.pop()</span><br><span class="line">            l = stack.pop()</span><br><span class="line">            stack.append(l // r)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            stack.append(<span class="built_in">int</span>(tokens[i]))</span><br><span class="line">    <span class="keyword">return</span> stack.pop()</span><br></pre></td></tr></tbody></table></figure>]]></content>
      <categories>
        <category>计算机</category>
        <category>算法</category>
      </categories>
  </entry>
  <entry>
    <title>链表中点</title>
    <url>/posts/19136/</url>
    <content><![CDATA[<p>用快慢指针的方法找链表的中点.</p>
<span id="more"></span>

<h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> fast <span class="keyword">and</span> fast.<span class="built_in">next</span>:</span><br><span class="line">    fast = fast.<span class="built_in">next</span>.<span class="built_in">next</span></span><br><span class="line">    slow = slow.<span class="built_in">next</span></span><br></pre></td></tr></tbody></table></figure>
<p>结果:</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">a -&gt; b -&gt; c -&gt; d -&gt; e</span><br><span class="line">          S         F</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">a -&gt; b -&gt; c -&gt; d -&gt; e -&gt; f</span><br><span class="line">               S            F</span><br></pre></td></tr></tbody></table></figure>

<h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> fast <span class="keyword">and</span> fast.<span class="built_in">next</span> <span class="keyword">and</span> fast.<span class="built_in">next</span>.<span class="built_in">next</span>:</span><br><span class="line">    fast = fast.<span class="built_in">next</span>.<span class="built_in">next</span></span><br><span class="line">    slow = slow.<span class="built_in">next</span></span><br></pre></td></tr></tbody></table></figure>
<p>结果:</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">a -&gt; b -&gt; c -&gt; d -&gt; e</span><br><span class="line">          S         F</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">a -&gt; b -&gt; c -&gt; d -&gt; e -&gt; f</span><br><span class="line">          S         F</span><br></pre></td></tr></tbody></table></figure>
<p>两种结果的区别就在于链表长度为偶数时, 慢指针的停留位置.</p>
]]></content>
      <categories>
        <category>计算机</category>
        <category>算法</category>
      </categories>
  </entry>
  <entry>
    <title>虚拟语气</title>
    <url>/posts/22564/</url>
    <content><![CDATA[<h2 id="不可能假设"><a href="#不可能假设" class="headerlink" title="不可能假设"></a>不可能假设</h2><p>现在:</p>
<ul>
<li>If I saw the rabbit now, I would bite him.</li>
</ul>
<p>将来:</p>
<ul>
<li>If I should (were to) see the rabbit tomorrow, I would bite him.</li>
</ul>
<p>过去:</p>
<ul>
<li>If I had seen the rabbit yesterday, I would have bitten him.</li>
</ul>
<span id="more"></span>

<h2 id="愿望"><a href="#愿望" class="headerlink" title="愿望"></a>愿望</h2><p>现在:</p>
<ul>
<li><p>I wish (that) I were a rabbit.</p>
</li>
<li><p>I would rather you didn’t eat the carrot.</p>
</li>
<li><p>I suggest/insist/order/demand that you (should) give me a carrot.</p>
</li>
<li><p>It is (high) time that you ate a carrot.</p>
</li>
</ul>
<p>过去:</p>
<ul>
<li><p>I wish I had eaten the carrot.</p>
</li>
<li><p>I would rather you hadn’t eaten the carrot.</p>
</li>
<li><p>I suggested/insisted/ordered/demanded that you (should) give me a carrot.</p>
</li>
</ul>
<p>将来:</p>
<ul>
<li>I wish I could eat the carrot.</li>
</ul>
]]></content>
      <categories>
        <category>英语</category>
      </categories>
  </entry>
  <entry>
    <title>雪</title>
    <url>/posts/47930/</url>
    <content><![CDATA[<p>满世界白茫茫的一片。<br>静谧而优雅。<br>惬意而自在。<br>踏着碎琼乱玉，咯吱咯吱的声音和触感。<br>沁凉的空气，明亮的阳光，反射着熠熠生辉。</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
  </entry>
  <entry>
    <title>青春万岁</title>
    <url>/posts/9178/</url>
    <content><![CDATA[<p>所有的日子，所有的日子都来吧</p>
<p>让我编织你们，用青春的金线，和幸福的璎珞，编织你们</p>
<p>有那小船上的微笑，月下校园的欢舞，细雨蒙蒙里踏青，初雪的早晨行军</p>
<p>还有热烈的争论，跃动的，温暖的心</p>
<p>是转眼过去的日子，也是充满遐想的日子</p>
<p>纷纷的心愿迷离，像春天的雨</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
  </entry>
  <entry>
    <title>链表删除值</title>
    <url>/posts/57079/</url>
    <content><![CDATA[<p>比如 <code>8 -&gt; 5 -&gt; 8 -&gt; 8 -&gt; 1 -&gt; 8</code> 删除 <code>8</code>, 返回 <code>5 -&gt; 1</code>.</p>
<figure class="highlight py"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">remove</span>(<span class="params">head, val</span>):</span><br><span class="line">    <span class="keyword">if</span> head <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">return</span> head</span><br><span class="line"></span><br><span class="line">    fake = ListNode(<span class="literal">None</span>)</span><br><span class="line">    fake.<span class="built_in">next</span> = head</span><br><span class="line">    prev, cur = fake, head</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> cur:</span><br><span class="line">        <span class="keyword">if</span> cur.val == val:</span><br><span class="line">            prev.<span class="built_in">next</span> = cur.<span class="built_in">next</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            prev = cur    </span><br><span class="line">        cur = cur.<span class="built_in">next</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> fake.<span class="built_in">next</span></span><br></pre></td></tr></tbody></table></figure>]]></content>
      <categories>
        <category>计算机</category>
        <category>算法</category>
      </categories>
  </entry>
  <entry>
    <title>链表相加</title>
    <url>/posts/30822/</url>
    <content><![CDATA[<p>比如一个链表是 <code>1 -&gt; 2 -&gt; 3</code>, 一个是 <code>2 -&gt; 7</code>, 结果应该返回 <code>1 -&gt; 5 -&gt; 0</code>. </p>
<p>因为 $123+27=150$.</p>
<span id="more"></span>

<p>有一个加法右对齐的问题, 因为给出两个 head 之后链表是左对齐的. 为了方便起见, 先进行<a href="/posts/967/" title="反转链表">反转链表</a>的操作.</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">add_list</span>(<span class="params">head1, head2</span>):</span><br><span class="line">    <span class="comment"># 反转两个链表</span></span><br><span class="line">    head1 = reverse(head1)</span><br><span class="line">    head2 = reverse(head2)</span><br><span class="line">    <span class="comment"># dummy head</span></span><br><span class="line">    fake = ListNode(<span class="literal">None</span>)</span><br><span class="line">    cur = fake</span><br><span class="line"></span><br><span class="line">    carry = <span class="number">0</span> <span class="comment"># 存储进位</span></span><br><span class="line">    <span class="comment"># 只要两个链表有一个没到结尾, 就可以继续</span></span><br><span class="line">    <span class="keyword">while</span> head1 <span class="keyword">or</span> head2: </span><br><span class="line">        tmp = carry <span class="comment"># 存储该位置的和, 完整的和是 head1.val + head2.val + carry</span></span><br><span class="line">        <span class="comment"># 分情况讨论, 哪个节点有值就加上哪个节点</span></span><br><span class="line">        <span class="comment"># 如果两个节点都有值就都加, 没有 else 的关系</span></span><br><span class="line">        <span class="keyword">if</span> head1:</span><br><span class="line">            tmp += head1.val</span><br><span class="line">            head1 = head1.<span class="built_in">next</span></span><br><span class="line">        <span class="keyword">if</span> head2:</span><br><span class="line">            tmp += head2.val</span><br><span class="line">            head2 = head2.<span class="built_in">next</span></span><br><span class="line">        <span class="comment"># 下一位应该是临时和的个位</span></span><br><span class="line">        cur.<span class="built_in">next</span> = ListNode(tmp % <span class="number">10</span>)</span><br><span class="line">        <span class="comment"># 进位是临时和的十位</span></span><br><span class="line">        carry = tmp // <span class="number">10</span></span><br><span class="line">        cur = cur.<span class="built_in">next</span></span><br><span class="line">    <span class="comment"># 如果遍历完成之后还有进位, 还要多一位</span></span><br><span class="line">    <span class="keyword">if</span> carry &gt; <span class="number">0</span>:</span><br><span class="line">        cur.<span class="built_in">next</span> = ListNode(carry)</span><br><span class="line">    <span class="keyword">return</span> reverse(fake.<span class="built_in">next</span>)</span><br></pre></td></tr></tbody></table></figure>]]></content>
      <categories>
        <category>计算机</category>
        <category>算法</category>
      </categories>
  </entry>
  <entry>
    <title>法语A1</title>
    <url>/posts/51760/</url>
    <content><![CDATA[<h2 id="动词变位"><a href="#动词变位" class="headerlink" title="动词变位"></a>动词变位</h2><h3 id="第一组规则动词"><a href="#第一组规则动词" class="headerlink" title="第一组规则动词"></a>第一组规则动词</h3><table>
<thead>
<tr>
<th>regarder</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>je regarde</td>
<td>nous regardons</td>
</tr>
<tr>
<td>tu regardes</td>
<td>vous regardez</td>
</tr>
<tr>
<td>il/elle regarde</td>
<td>ils/elles regardent</td>
</tr>
</tbody></table>
<h4 id="代词式动词的复合过去时"><a href="#代词式动词的复合过去时" class="headerlink" title="代词式动词的复合过去时"></a>代词式动词的复合过去时</h4><table>
<thead>
<tr>
<th>s’être + p.p.</th>
<th>-</th>
</tr>
</thead>
<tbody><tr>
<td>je me suis</td>
<td>nous nous sommes</td>
</tr>
<tr>
<td>tu t’es</td>
<td>vous vous êtes</td>
</tr>
<tr>
<td>il s’est</td>
<td>ils se sont</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>否定</th>
<th>-</th>
</tr>
</thead>
<tbody><tr>
<td>je ne me suis pas</td>
<td>nous ne nous sommes pas</td>
</tr>
<tr>
<td>tu ne t’es pas</td>
<td>vous ne vous êtes pas</td>
</tr>
<tr>
<td>il ne s’est pas</td>
<td>ils ne se sont pas</td>
</tr>
</tbody></table>
<h3 id="第二组规则动词"><a href="#第二组规则动词" class="headerlink" title="第二组规则动词"></a>第二组规则动词</h3><table>
<thead>
<tr>
<th>choisir</th>
<th>choisi</th>
</tr>
</thead>
<tbody><tr>
<td>je choisis</td>
<td>nous choisissons</td>
</tr>
<tr>
<td>tu choisis</td>
<td>vous choisissez</td>
</tr>
<tr>
<td>il choisit</td>
<td>ils choisissent</td>
</tr>
</tbody></table>
<h3 id="第三组不规则动词"><a href="#第三组不规则动词" class="headerlink" title="第三组不规则动词"></a>第三组不规则动词</h3><table>
<thead>
<tr>
<th>être 直陈式</th>
<th>été</th>
</tr>
</thead>
<tbody><tr>
<td>je suis</td>
<td>nous sommes</td>
</tr>
<tr>
<td>tu es</td>
<td>vous êtes</td>
</tr>
<tr>
<td>il/elle est</td>
<td>ils/elles sont</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>être 命令式</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>-</td>
<td>(nous) soyons</td>
</tr>
<tr>
<td>(tu) sois</td>
<td>(vous) soyez</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>aller</th>
<th>allé</th>
</tr>
</thead>
<tbody><tr>
<td>je vais</td>
<td>nous allons</td>
</tr>
<tr>
<td>tu vas</td>
<td>vous allez</td>
</tr>
<tr>
<td>il/elle va</td>
<td>ils/elles vont</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>avoir 直陈式</th>
<th>eu /y/</th>
</tr>
</thead>
<tbody><tr>
<td>j’ai</td>
<td>nous avons</td>
</tr>
<tr>
<td>tu as</td>
<td>vous avez</td>
</tr>
<tr>
<td>il/elle a</td>
<td>ils/elles ont</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>avoir 命令式</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td>(nous) ayons</td>
</tr>
<tr>
<td>(tu) aie</td>
<td>(vous) ayez</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>faire</th>
<th>fait</th>
</tr>
</thead>
<tbody><tr>
<td>je fais</td>
<td>nous faisons</td>
</tr>
<tr>
<td>tu fais</td>
<td>vous faites</td>
</tr>
<tr>
<td>il/elle fait</td>
<td>ils/elles font</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>prendre</th>
<th>pris</th>
</tr>
</thead>
<tbody><tr>
<td>je prends</td>
<td>nous prenons</td>
</tr>
<tr>
<td>tu prends</td>
<td>vous prenez</td>
</tr>
<tr>
<td>il prend</td>
<td>ils prennent</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>partir</th>
<th>parti</th>
</tr>
</thead>
<tbody><tr>
<td>je pars</td>
<td>nous partons</td>
</tr>
<tr>
<td>tu pars</td>
<td>vous partez</td>
</tr>
<tr>
<td>il part</td>
<td>ils partent</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>voir</th>
<th>vu</th>
</tr>
</thead>
<tbody><tr>
<td>je vois</td>
<td>nous voyons</td>
</tr>
<tr>
<td>tu vois</td>
<td>vous voyez</td>
</tr>
<tr>
<td>il voit</td>
<td>ils voient</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>écrire</th>
<th>écrit</th>
</tr>
</thead>
<tbody><tr>
<td>j’écris</td>
<td>nous écrivons</td>
</tr>
<tr>
<td>tu écris</td>
<td>vous écrivez</td>
</tr>
<tr>
<td>il écrit</td>
<td>ils écrivent</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>lire</th>
<th>lu</th>
</tr>
</thead>
<tbody><tr>
<td>je lis</td>
<td>nous lisons</td>
</tr>
<tr>
<td>tu lis</td>
<td>vous lisez</td>
</tr>
<tr>
<td>il lit</td>
<td>ils lisent</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>dormir</th>
<th>dormi</th>
</tr>
</thead>
<tbody><tr>
<td>je dors</td>
<td>nous dormons</td>
</tr>
<tr>
<td>tu dors</td>
<td>vous dormez</td>
</tr>
<tr>
<td>il dort</td>
<td>ils dorment</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>boire</th>
<th>bu</th>
</tr>
</thead>
<tbody><tr>
<td>je bois</td>
<td>nous buvons</td>
</tr>
<tr>
<td>tu bois</td>
<td>vous buvez</td>
</tr>
<tr>
<td>il boit</td>
<td>ils boivent</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>venir（来）</th>
<th>venu</th>
</tr>
</thead>
<tbody><tr>
<td>je viens</td>
<td>nous venons</td>
</tr>
<tr>
<td>tu viens</td>
<td>vous venez</td>
</tr>
<tr>
<td>il vient</td>
<td>ils viennent</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>descendre</th>
<th>descendu</th>
</tr>
</thead>
<tbody><tr>
<td>je descends</td>
<td>nous descendons</td>
</tr>
<tr>
<td>tu descends</td>
<td>vous descendez</td>
</tr>
<tr>
<td>il descend</td>
<td>ils descendent</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>pouvoir（能）</th>
<th>pu</th>
</tr>
</thead>
<tbody><tr>
<td>je peux</td>
<td>nous pouvons</td>
</tr>
<tr>
<td>tu peux</td>
<td>vous pouvez</td>
</tr>
<tr>
<td>il peut</td>
<td>ils peuvent</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>vouloir（想）</th>
<th>voulu</th>
</tr>
</thead>
<tbody><tr>
<td>je veux</td>
<td>nous voulons</td>
</tr>
<tr>
<td>tu veux</td>
<td>vous voulez</td>
</tr>
<tr>
<td>il veut</td>
<td>ils veulent</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>dire（说）</th>
<th>dit</th>
</tr>
</thead>
<tbody><tr>
<td>je dis</td>
<td>nous disons</td>
</tr>
<tr>
<td>tu dis</td>
<td>vous dites</td>
</tr>
<tr>
<td>il dit</td>
<td>ils disent</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>savoir（知道）</th>
<th>su</th>
</tr>
</thead>
<tbody><tr>
<td>je sais</td>
<td>nous savons</td>
</tr>
<tr>
<td>tu sais</td>
<td>vous savez</td>
</tr>
<tr>
<td>il sait</td>
<td>ils savent</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>devoir（应该）</th>
<th>dû</th>
</tr>
</thead>
<tbody><tr>
<td>je dois</td>
<td>nous devons</td>
</tr>
<tr>
<td>tu dois</td>
<td>vous devez</td>
</tr>
<tr>
<td>il doit</td>
<td>ils doivent</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>connaître（认识）</th>
<th>connu</th>
</tr>
</thead>
<tbody><tr>
<td>je connais</td>
<td>nous connaissons</td>
</tr>
<tr>
<td>tu connais</td>
<td>vous connaissez</td>
</tr>
<tr>
<td>il connaît</td>
<td>ils connaissent</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>offrir（给）</th>
<th>offert</th>
</tr>
</thead>
<tbody><tr>
<td>j’offre</td>
<td>nous offrons</td>
</tr>
<tr>
<td>tu offres</td>
<td>vous offrez</td>
</tr>
<tr>
<td>il offre</td>
<td>ils offrent</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>préférer（更喜欢）</th>
<th>préféré</th>
</tr>
</thead>
<tbody><tr>
<td>je préfère</td>
<td>nous préférons</td>
</tr>
<tr>
<td>tu préfères</td>
<td>vous préférez</td>
</tr>
<tr>
<td>il préfère</td>
<td>ils préfèrent</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>vivre（生活）</th>
<th>vécu</th>
</tr>
</thead>
<tbody><tr>
<td>je vis</td>
<td>nous vivons</td>
</tr>
<tr>
<td>tu vis</td>
<td>vous vivez</td>
</tr>
<tr>
<td>il vit</td>
<td>ils vivent</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>attendre（等）</th>
<th>attendu</th>
</tr>
</thead>
<tbody><tr>
<td>j’attends</td>
<td>nous attendons</td>
</tr>
<tr>
<td>tu attends</td>
<td>vous attendez</td>
</tr>
<tr>
<td>il attend</td>
<td>ils attendent</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>ennuyer（使烦恼）</th>
<th>ennuyé</th>
</tr>
</thead>
<tbody><tr>
<td>j’ennuie</td>
<td>nous ennuyons</td>
</tr>
<tr>
<td>tu ennuies</td>
<td>vous ennuyez</td>
</tr>
<tr>
<td>il ennuie</td>
<td>ils ennuient</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>suivre（跟随）</th>
<th>suivi</th>
</tr>
</thead>
<tbody><tr>
<td>je suis</td>
<td>nous suivons</td>
</tr>
<tr>
<td>tu suis</td>
<td>vous suivez</td>
</tr>
<tr>
<td>il suit</td>
<td>ils suivent</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>pleuvoir（下雨）</th>
<th>plu (pleuvait)</th>
</tr>
</thead>
<tbody><tr>
<td>il pleut</td>
<td></td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>croire（相信，觉得）</th>
<th>cru</th>
</tr>
</thead>
<tbody><tr>
<td>je crois</td>
<td>nous croyons</td>
</tr>
<tr>
<td>tu crois</td>
<td>vous croyez</td>
</tr>
<tr>
<td>il croit</td>
<td>ils croient</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>essayer（试图）</th>
<th>essayé</th>
</tr>
</thead>
<tbody><tr>
<td>j’essaie</td>
<td>nous essayons</td>
</tr>
<tr>
<td>tu essaies</td>
<td>vous essayez</td>
</tr>
<tr>
<td>il essaie</td>
<td>ils essaient</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>mettre（放置）</th>
<th>mis</th>
</tr>
</thead>
<tbody><tr>
<td>je mets</td>
<td>nous mettons</td>
</tr>
<tr>
<td>tu mets</td>
<td>vous mettez</td>
</tr>
<tr>
<td>il met</td>
<td>ils mettent</td>
</tr>
</tbody></table>
<h2 id="其他时态"><a href="#其他时态" class="headerlink" title="其他时态"></a>其他时态</h2><h3 id="复合过去时中-17-个用-etre-引导的不及物动词"><a href="#复合过去时中-17-个用-etre-引导的不及物动词" class="headerlink" title="复合过去时中 17 &nbsp;个用 être 引导的不及物动词"></a>复合过去时中 17 &nbsp;个用 être 引导的不及物动词</h3><table>
<thead>
<tr>
<th>aller/venir</th>
<th>allé</th>
</tr>
</thead>
<tbody><tr>
<td>entrer/sortir</td>
<td>entré/sorti</td>
</tr>
<tr>
<td>arriver/partir</td>
<td>arrivé/parti</td>
</tr>
<tr>
<td>monter/descendre</td>
<td>monté/descendu</td>
</tr>
<tr>
<td>naître/mourir</td>
<td>né/mort</td>
</tr>
<tr>
<td>rester/passer</td>
<td>resté/passé</td>
</tr>
<tr>
<td>rentrer/revenir/retourner</td>
<td>rentré/revenu/retourné</td>
</tr>
<tr>
<td>tomber</td>
<td>tombé</td>
</tr>
<tr>
<td>devenir（成为）</td>
<td>devenu</td>
</tr>
</tbody></table>
<h3 id="过去分词"><a href="#过去分词" class="headerlink" title="过去分词"></a>过去分词</h3><table>
<thead>
<tr>
<th>不定式</th>
<th>过去分词</th>
</tr>
</thead>
<tbody><tr>
<td>vendre</td>
<td>vendu</td>
</tr>
<tr>
<td>vivre</td>
<td>vécu</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
</tbody></table>
<h3 id="未完成过去时变位"><a href="#未完成过去时变位" class="headerlink" title="未完成过去时变位"></a>未完成过去时变位</h3><p>nous的变位去掉-ons：</p>
<table>
<thead>
<tr>
<th>je parlais</th>
<th>nous parlions</th>
</tr>
</thead>
<tbody><tr>
<td>tu parlais</td>
<td>vous parliez</td>
</tr>
<tr>
<td>il parlait</td>
<td>ils parlaient</td>
</tr>
</tbody></table>
<h3 id="最近过去时"><a href="#最近过去时" class="headerlink" title="最近过去时"></a>最近过去时</h3><p>venir de + 不定式，表示刚刚发生且完成的动作。</p>
<h3 id="简单将来时"><a href="#简单将来时" class="headerlink" title="简单将来时"></a>简单将来时</h3><table>
<thead>
<tr>
<th>parler</th>
<th>第一组规则</th>
</tr>
</thead>
<tbody><tr>
<td>je parlerai</td>
<td>nous parlerons</td>
</tr>
<tr>
<td>tu parleras</td>
<td>vous parlerez</td>
</tr>
<tr>
<td>il parlera</td>
<td>ils parleront</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>finir</th>
<th>第二组规则</th>
</tr>
</thead>
<tbody><tr>
<td>je finirai</td>
<td>nous finirons</td>
</tr>
<tr>
<td>tu finiras</td>
<td>vous finirez</td>
</tr>
<tr>
<td>il finira</td>
<td>ils finiront</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>prendre</th>
<th>第三组re结尾</th>
</tr>
</thead>
<tbody><tr>
<td>je prendrai</td>
<td>nous prendrons</td>
</tr>
<tr>
<td>tu prendra</td>
<td>vous prendrez</td>
</tr>
<tr>
<td>il prendra</td>
<td>ils prendront</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>avoir</th>
<th>j’aurai</th>
</tr>
</thead>
<tbody><tr>
<td>être</td>
<td>je serai</td>
</tr>
<tr>
<td>aller</td>
<td>j’irai</td>
</tr>
<tr>
<td>faire</td>
<td>je ferai</td>
</tr>
<tr>
<td>devoir</td>
<td>je devrai</td>
</tr>
<tr>
<td>pouvoir</td>
<td>je pourrai</td>
</tr>
<tr>
<td>savoir</td>
<td>je saurai</td>
</tr>
<tr>
<td>venir</td>
<td>je viendrai</td>
</tr>
<tr>
<td>voir</td>
<td>je verrai /e/</td>
</tr>
<tr>
<td>vouloir</td>
<td>je voudrai</td>
</tr>
<tr>
<td>falloir</td>
<td>il faudra</td>
</tr>
<tr>
<td>pleuvoir</td>
<td>il pleuvra</td>
</tr>
</tbody></table>
<h2 id="词汇"><a href="#词汇" class="headerlink" title="词汇"></a>词汇</h2><h3 id="动词"><a href="#动词" class="headerlink" title="动词"></a>动词</h3><table>
<thead>
<tr>
<th>traverser</th>
<th>穿过</th>
</tr>
</thead>
<tbody><tr>
<td>*heurter</td>
<td>碰撞</td>
</tr>
<tr>
<td>rencontrer</td>
<td>遇到</td>
</tr>
<tr>
<td>trouver</td>
<td>找到</td>
</tr>
<tr>
<td>apprendre</td>
<td>学习</td>
</tr>
<tr>
<td>ouvrir / fermer</td>
<td>打开/关闭（物理）</td>
</tr>
<tr>
<td>allumer / éteindre</td>
<td>打开/关闭（电子）</td>
</tr>
</tbody></table>
<h3 id="连词"><a href="#连词" class="headerlink" title="连词"></a>连词</h3><table>
<thead>
<tr>
<th>en plus</th>
<th>而且</th>
</tr>
</thead>
<tbody><tr>
<td>d’abord</td>
<td>首先</td>
</tr>
<tr>
<td>ensuite/après/puis</td>
<td>然后</td>
</tr>
<tr>
<td>enfin</td>
<td>最后</td>
</tr>
</tbody></table>
<h3 id="方位"><a href="#方位" class="headerlink" title="方位"></a>方位</h3><p><img src="/preposition.png"></p>
<img src="/posts/51760/截屏2022-11-19 16.34.12.png" width="50%">

<table>
<thead>
<tr>
<th>au bord de</th>
<th>在边上</th>
</tr>
</thead>
<tbody><tr>
<td>se trouver</td>
<td>位于</td>
</tr>
<tr>
<td>aller tout droit</td>
<td>直走</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>在……以南北东西</th>
<th>在……的南北东西部</th>
</tr>
</thead>
<tbody><tr>
<td>au sud de</td>
<td>dans le sud de</td>
</tr>
<tr>
<td>au nord de</td>
<td>dans le nord de</td>
</tr>
<tr>
<td>à l’est de</td>
<td>dans l’est de</td>
</tr>
<tr>
<td>à l’ouest de</td>
<td>dans l’ouest de</td>
</tr>
</tbody></table>
<h3 id="衣服"><a href="#衣服" class="headerlink" title="衣服"></a>衣服</h3><table>
<thead>
<tr>
<th>vêtement</th>
<th>衣服</th>
</tr>
</thead>
<tbody><tr>
<td>des baskets</td>
<td>运动鞋</td>
</tr>
<tr>
<td>une chemise</td>
<td>衬衫</td>
</tr>
<tr>
<td>des lunettes</td>
<td>眼镜</td>
</tr>
<tr>
<td>un jean</td>
<td>牛仔裤</td>
</tr>
<tr>
<td>un manteau</td>
<td>大衣</td>
</tr>
<tr>
<td>un blouson</td>
<td>夹克衫</td>
</tr>
<tr>
<td>un pantalon</td>
<td>长裤</td>
</tr>
<tr>
<td>une robe</td>
<td>裙子</td>
</tr>
<tr>
<td>une jupe</td>
<td>短裙</td>
</tr>
<tr>
<td>un tee-shirt</td>
<td>T恤</td>
</tr>
</tbody></table>
<h3 id="颜色"><a href="#颜色" class="headerlink" title="颜色"></a>颜色</h3><p>![](截屏2022-11-19 16.23.13.png)</p>
<h3 id="时间"><a href="#时间" class="headerlink" title="时间"></a>时间</h3><table>
<thead>
<tr>
<th>ce matin</th>
<th>今早</th>
</tr>
</thead>
<tbody><tr>
<td>ce midi</td>
<td>今天中午</td>
</tr>
<tr>
<td>ce soir</td>
<td>今晚</td>
</tr>
<tr>
<td>ce mois</td>
<td>这个月</td>
</tr>
<tr>
<td>cette semaine</td>
<td>这周</td>
</tr>
<tr>
<td>cette année</td>
<td>今年</td>
</tr>
<tr>
<td>l’après-midi</td>
<td>下午</td>
</tr>
<tr>
<td>hier</td>
<td>昨天</td>
</tr>
<tr>
<td>aujourd’hui</td>
<td>今天</td>
</tr>
<tr>
<td>demain</td>
<td>明天</td>
</tr>
<tr>
<td>l’année dernière</td>
<td>去年</td>
</tr>
<tr>
<td>l’année prochaine</td>
<td>明年</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>tout</th>
<th>-</th>
</tr>
</thead>
<tbody><tr>
<td>tous les jours</td>
<td>每一天</td>
</tr>
<tr>
<td>tous les samedis soirs</td>
<td>每周六晚</td>
</tr>
<tr>
<td>toute la journée</td>
<td>一整天</td>
</tr>
<tr>
<td>toute l’année</td>
<td>一整年</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>周一</th>
<th>周二</th>
<th>周三</th>
<th>周四</th>
<th>周五</th>
<th>周六</th>
<th>周日</th>
</tr>
</thead>
<tbody><tr>
<td>lundi</td>
<td>mardi</td>
<td>mercredi</td>
<td>jeudi</td>
<td>vendredi</td>
<td>samedi</td>
<td>dimanche</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>时间</th>
<th>口语表示法</th>
</tr>
</thead>
<tbody><tr>
<td>6:30</td>
<td>six heures <strong>et demie</strong></td>
</tr>
<tr>
<td>10:15</td>
<td>dix heures <strong>et quart</strong></td>
</tr>
<tr>
<td>3:45</td>
<td>quatre heures <strong>moins le quart</strong></td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>au printemps</th>
<th>en été</th>
<th>en automne</th>
<th>en hiver</th>
</tr>
</thead>
<tbody><tr>
<td>janvier</td>
<td>avril</td>
<td>juillet</td>
<td>octobre</td>
</tr>
<tr>
<td>février</td>
<td>mai</td>
<td>août</td>
<td>novembre</td>
</tr>
<tr>
<td>mars /s/</td>
<td>juin</td>
<td>septembre</td>
<td>décembre</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>Nous sommes en 1990.</th>
<th>在某年</th>
</tr>
</thead>
<tbody><tr>
<td><strong>en</strong> septembre = <strong>au mois de</strong> septembre</td>
<td>在某月</td>
</tr>
<tr>
<td>Nous sommes <strong>le</strong> 7/premier.</td>
<td>在某日</td>
</tr>
<tr>
<td>cinq ans <strong>plus tard</strong> / <strong>après</strong></td>
<td>五年后</td>
</tr>
<tr>
<td><strong>à partir de</strong> 6 ans</td>
<td>从六岁</td>
</tr>
<tr>
<td><strong>de</strong> 2000 <strong>à</strong> 2010</td>
<td>从……到</td>
</tr>
<tr>
<td><strong>du</strong> lundi <strong>au</strong> vendredi</td>
<td>从周一到周五</td>
</tr>
<tr>
<td><strong>jusqu’en</strong> 2008</td>
<td>直到</td>
</tr>
<tr>
<td><strong>pendant</strong> 10 jours</td>
<td>在……期间</td>
</tr>
<tr>
<td><strong>Il y a 10 jours que</strong> nous sommes arrivés.</td>
<td>有……了</td>
</tr>
<tr>
<td>dans les années soixante</td>
<td>60年代</td>
</tr>
<tr>
<td>à la fin d’année</td>
<td>年底</td>
</tr>
<tr>
<td>au début d’année</td>
<td>年初</td>
</tr>
<tr>
<td>depuis longtemps</td>
<td>很久以来</td>
</tr>
<tr>
<td>tout de suite</td>
<td>马上</td>
</tr>
</tbody></table>
<h3 id="交通工具"><a href="#交通工具" class="headerlink" title="交通工具"></a>交通工具</h3><p>![](截屏2022-11-19 16.45.26.png)</p>
<table>
<thead>
<tr>
<th>à</th>
<th>露天</th>
<th>en</th>
<th>不露天</th>
</tr>
</thead>
<tbody><tr>
<td>pied</td>
<td>步行</td>
<td>rollers</td>
<td>滑轮滑</td>
</tr>
<tr>
<td>moto</td>
<td>骑摩托车</td>
<td>voiture</td>
<td>坐车</td>
</tr>
<tr>
<td>cheval</td>
<td>骑马</td>
<td>bus</td>
<td>坐公交车</td>
</tr>
<tr>
<td>vélo</td>
<td>骑自行车</td>
<td>taxi</td>
<td>坐出租车</td>
</tr>
<tr>
<td>bicyclette</td>
<td>骑自行车</td>
<td>métro</td>
<td>坐地铁</td>
</tr>
<tr>
<td></td>
<td></td>
<td>train</td>
<td>坐火车</td>
</tr>
<tr>
<td></td>
<td></td>
<td>avion</td>
<td>坐飞机</td>
</tr>
</tbody></table>
<h3 id="演奏，运动"><a href="#演奏，运动" class="headerlink" title="演奏，运动"></a>演奏，运动</h3><table>
<thead>
<tr>
<th>jouer…</th>
<th>运动</th>
<th>jouer</th>
<th>乐器</th>
</tr>
</thead>
<tbody><tr>
<td>au foot</td>
<td>踢足球</td>
<td>du piano</td>
<td>弹钢琴</td>
</tr>
<tr>
<td>au tennis</td>
<td>打网球</td>
<td>du violon</td>
<td>拉小提琴</td>
</tr>
<tr>
<td>au basket-ball</td>
<td>打篮球</td>
<td>de la guitare</td>
<td>弹吉他</td>
</tr>
<tr>
<td>aux cartes</td>
<td>打牌</td>
<td>de la basse</td>
<td>弹贝斯</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>faire…</th>
<th>运动</th>
<th>faire</th>
<th>天气</th>
</tr>
</thead>
<tbody><tr>
<td>du sport</td>
<td>做运动</td>
<td>de la musique</td>
<td>玩音乐</td>
</tr>
<tr>
<td>du ski</td>
<td>滑雪</td>
<td>du piano</td>
<td>弹钢琴</td>
</tr>
<tr>
<td>du tennis</td>
<td>打网球</td>
<td>du violon</td>
<td>拉小提琴</td>
</tr>
<tr>
<td>du foot</td>
<td>踢足球</td>
<td></td>
<td></td>
</tr>
<tr>
<td>de la natation</td>
<td>游泳</td>
<td></td>
<td></td>
</tr>
</tbody></table>
<h3 id="食物"><a href="#食物" class="headerlink" title="食物"></a>食物</h3><table>
<thead>
<tr>
<th>du beurre</th>
<th>黄油</th>
</tr>
</thead>
<tbody><tr>
<td>de la farine</td>
<td>面粉</td>
</tr>
<tr>
<td>du sucre</td>
<td>糖</td>
</tr>
<tr>
<td>du sel</td>
<td>盐</td>
</tr>
<tr>
<td>de la viande</td>
<td>肉</td>
</tr>
<tr>
<td>du vin / une bouteille de vin</td>
<td>酒</td>
</tr>
<tr>
<td>du riz /ri/</td>
<td>米饭</td>
</tr>
<tr>
<td>du poisson</td>
<td>鱼肉</td>
</tr>
<tr>
<td>du fromage</td>
<td>奶酪</td>
</tr>
<tr>
<td>des céréales</td>
<td>谷物</td>
</tr>
<tr>
<td>du lait / un litre de lait</td>
<td>牛奶</td>
</tr>
<tr>
<td>du pain</td>
<td>面包</td>
</tr>
<tr>
<td>la pomme</td>
<td>苹果</td>
</tr>
<tr>
<td>de la confiture</td>
<td>果酱</td>
</tr>
<tr>
<td>du cidre</td>
<td>苹果酒</td>
</tr>
<tr>
<td>de l’eau minérale</td>
<td>矿泉水</td>
</tr>
<tr>
<td>des œufs</td>
<td>鸡蛋</td>
</tr>
<tr>
<td>des légumes</td>
<td>蔬菜</td>
</tr>
<tr>
<td>pomme de terre</td>
<td>土豆</td>
</tr>
</tbody></table>
<h3 id="代词式动词"><a href="#代词式动词" class="headerlink" title="代词式动词"></a>代词式动词</h3><table>
<thead>
<tr>
<th>se laver</th>
<th>洗漱/洗澡</th>
</tr>
</thead>
<tbody><tr>
<td>se lever</td>
<td>起床</td>
</tr>
<tr>
<td>se promener</td>
<td>散步</td>
</tr>
<tr>
<td>s’amuser</td>
<td>玩耍</td>
</tr>
<tr>
<td>se coucher</td>
<td>睡觉</td>
</tr>
<tr>
<td>s’ennuyer</td>
<td>感到厌倦</td>
</tr>
<tr>
<td>se passer</td>
<td>发生</td>
</tr>
<tr>
<td>s’inquiéter</td>
<td>担心</td>
</tr>
</tbody></table>
<h3 id="短语"><a href="#短语" class="headerlink" title="短语"></a>短语</h3><table>
<thead>
<tr>
<th>购物</th>
<th>faire du shopping</th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td>faire des/les courses</td>
</tr>
<tr>
<td></td>
<td>faire des/les magasins</td>
</tr>
<tr>
<td>度假</td>
<td>partir en vacances</td>
</tr>
<tr>
<td>上课</td>
<td>prendre le cours</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>tout le temps</th>
<th>总是</th>
</tr>
</thead>
<tbody><tr>
<td>tout le monde</td>
<td>大家</td>
</tr>
<tr>
<td>se souvenir de</td>
<td>想起</td>
</tr>
<tr>
<td>depuis longtemps</td>
<td>已经很久</td>
</tr>
<tr>
<td>à l’étranger</td>
<td>在外国</td>
</tr>
<tr>
<td>pour/dans un moment</td>
<td>现在/过一会</td>
</tr>
<tr>
<td>sur les lieux de</td>
<td>在……现场</td>
</tr>
<tr>
<td>faire les études</td>
<td>上学</td>
</tr>
<tr>
<td>se souvenir de</td>
<td>想起</td>
</tr>
<tr>
<td>être satisfait de</td>
<td>对……满意</td>
</tr>
<tr>
<td>être content de</td>
<td>对……开心</td>
</tr>
<tr>
<td>être fier de</td>
<td>对……自豪</td>
</tr>
<tr>
<td>être certain/sûr de</td>
<td>对……确定</td>
</tr>
<tr>
<td>s’inquiéter de/pour qch</td>
<td>对某事感到担心</td>
</tr>
<tr>
<td>ce type de</td>
<td>这种</td>
</tr>
<tr>
<td>prendre qch <strong>sur</strong> qn</td>
<td>带某物在某人身上</td>
</tr>
<tr>
<td>avant de dormir</td>
<td>睡前</td>
</tr>
<tr>
<td>avoir besoin de</td>
<td>需要</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>à</th>
<th>-</th>
</tr>
</thead>
<tbody><tr>
<td>donner qch à qn</td>
<td>给某人某物</td>
</tr>
<tr>
<td>offrir qch à qn</td>
<td>提供某人某物</td>
</tr>
<tr>
<td>dire qch à qn</td>
<td>告诉某人某事</td>
</tr>
<tr>
<td>apprendre qch à qn</td>
<td>教某人某事</td>
</tr>
<tr>
<td>apprendre à faire qch</td>
<td>学做某事</td>
</tr>
<tr>
<td>commencer à faire qch</td>
<td>开始做某事</td>
</tr>
<tr>
<td>aider qn à faire qch</td>
<td>帮助某人某事</td>
</tr>
<tr>
<td>parler à/avec qn</td>
<td>和某人讲话</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>de</th>
<th>-</th>
</tr>
</thead>
<tbody><tr>
<td>parler <strong>de</strong> qn / qch</td>
<td>谈论某人/某事</td>
</tr>
<tr>
<td>Il est interdit/important <strong>de</strong> faire qch</td>
<td>做某事被禁止/很重要</td>
</tr>
<tr>
<td>avoir l’habitude <strong>de</strong> faire qch</td>
<td>习惯于做某事</td>
</tr>
<tr>
<td>arrêter <strong>de</strong> faire qch</td>
<td>停止做某事</td>
</tr>
<tr>
<td>essayer <strong>de</strong> faire qch</td>
<td>力争做某事</td>
</tr>
<tr>
<td>avoir envie/besoin <strong>de</strong> (faire) qch</td>
<td>想要/需要做某事</td>
</tr>
</tbody></table>
<h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><ul>
<li><p>形容词前置（beau-belle/nouveau-nouvelle/vieux-vieille），名词前的复数不定冠词 des 变为 de</p>
<blockquote>
<p>des nouveaux films -&gt; de nouveaux films</p>
</blockquote>
</li>
<li><p>绝对否定：否定句中，直接宾语前的不定冠词/部分冠词变为 de</p>
<blockquote>
<p>Ils ont des lunettes. -&gt; Ils n’ont pas de lunettes.</p>
</blockquote>
</li>
<li><p>动词与主语人称代词倒装后元音相撞，加 t</p>
<blockquote>
<p>Comment va-t-elle au bureau?</p>
</blockquote>
</li>
<li><p>复杂倒装：名词主语 + 谓语动词 + 主语人称代词</p>
<blockquote>
<p>Comment Farid va-t-il au bureau?</p>
<p>Isabelle travaille-t-elle à Londres?</p>
</blockquote>
</li>
<li><p>我知道他没有给你说</p>
<blockquote>
<p>Je sais qu’il ne t’a pas dit.</p>
</blockquote>
</li>
<li><p>parler à qn 用间宾代词代替，parler de qch 用 en 代替，parler de qn 用 de + 重读人称代词</p>
</li>
<li><p>代词式动词过去分词的性数配合：被动意义和绝对意义无条件配合；自反意义和相互意义直宾配合，间宾不配合</p>
<blockquote>
<p>Elles se sont lavées hier.（直宾配合）</p>
<p>Elles se sont lavé les mains hier.（间宾不配合）</p>
<p>Elles se sont parlé hier.（间宾不配合）</p>
</blockquote>
</li>
</ul>
<h3 id="名词转阴"><a href="#名词转阴" class="headerlink" title="名词转阴"></a>名词转阴</h3><ul>
<li>étudiant - étudiante</li>
<li>direc<strong>teur</strong> - directrice</li>
<li>dans<strong>eur</strong> - danseuse, chanteur - chanteuse</li>
<li>boulang<strong>er</strong> - boulangère</li>
<li>jui<strong>f</strong> - juive</li>
<li>informati<strong>cien</strong> - informaticienne</li>
<li>secrétair<strong>e</strong> - secrétaire</li>
</ul>
<h3 id="名词复数"><a href="#名词复数" class="headerlink" title="名词复数"></a>名词复数</h3><ul>
<li>homme - hommes</li>
<li>fils - fils, nez - nez</li>
<li>noyau - noyaux, chapeau - chapeaux, feu - feux</li>
<li>cheval - chevaux</li>
</ul>
<h3 id="时态，代词，否定句"><a href="#时态，代词，否定句" class="headerlink" title="时态，代词，否定句"></a>时态，代词，否定句</h3><ul>
<li><p>avoir</p>
<blockquote>
<p>j’ai regardé -&gt; je n’ai pas regardé</p>
</blockquote>
</li>
<li><p>être</p>
<blockquote>
<p>Oui, nous y sommes allés.</p>
<p>Non, nous n’y sommes pas allés.</p>
</blockquote>
</li>
<li><p>COI（间接宾语人称代词）</p>
<blockquote>
<p>Il parle à ses parents.</p>
<p>Il leur parle.</p>
<p>Il ne leur parle pas.</p>
</blockquote>
</li>
<li><p>COI + 命令式</p>
<blockquote>
<p>Tu me racontes cette histoire.</p>
<p>Raconte-moi cette histoire.</p>
<p>Ne me raconte pas cette histoire.</p>
</blockquote>
</li>
<li><p>COI + aller（最近将来时）</p>
<blockquote>
<p>Oui, je vais lui téléphoner.</p>
<p>Non, je ne vais pas lui téléphoner.</p>
</blockquote>
</li>
<li><p>COI + avoir（复合过去时）</p>
<blockquote>
<p>Paul lui a téléphoné hier matin.</p>
<p>Je ne leur ai pas acheté ce livre.</p>
<p>Il ne nous a pas dit bonjour.</p>
</blockquote>
</li>
</ul>
<h3 id="en-x3D-de-ca"><a href="#en-x3D-de-ca" class="headerlink" title="en = de ça"></a>en = de ça</h3><ul>
<li>N’en parlez pas.</li>
<li>J’en suis certain.</li>
<li>Qu’est-ce que tu en penses?</li>
</ul>
]]></content>
      <categories>
        <category>法语</category>
      </categories>
  </entry>
  <entry>
    <title>法语A2</title>
    <url>/posts/52080/</url>
    <content><![CDATA[<h2 id="动词变位"><a href="#动词变位" class="headerlink" title="动词变位"></a>动词变位</h2><table>
<thead>
<tr>
<th>payer（支付）</th>
<th>-</th>
</tr>
</thead>
<tbody><tr>
<td>je paie /e/</td>
<td>nous payons</td>
</tr>
<tr>
<td>tu paies</td>
<td>vous payez</td>
</tr>
<tr>
<td>il paie</td>
<td>ils paient</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>compléter（完成）</th>
<th>-</th>
</tr>
</thead>
<tbody><tr>
<td>je complète</td>
<td>nous complétons</td>
</tr>
<tr>
<td>tu complètes</td>
<td>vous complétez</td>
</tr>
<tr>
<td>il complète</td>
<td>ils complètent</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>recevoir（收到）</th>
<th>reçu</th>
</tr>
</thead>
<tbody><tr>
<td>je reçois</td>
<td>nous recevons</td>
</tr>
<tr>
<td>tu reçois</td>
<td>vous recevez</td>
</tr>
<tr>
<td>il reçoit</td>
<td>ils reçoivent</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>promettre（答应）</th>
<th>promis</th>
</tr>
</thead>
<tbody><tr>
<td>je promets</td>
<td>nous promettons</td>
</tr>
<tr>
<td>tu promets</td>
<td>vous promettez</td>
</tr>
<tr>
<td>il promet</td>
<td>ils promettent</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>valoir（价值）</th>
<th>valu</th>
</tr>
</thead>
<tbody><tr>
<td>je vaux</td>
<td>nous valons</td>
</tr>
<tr>
<td>tu vaux</td>
<td>vous valez</td>
</tr>
<tr>
<td>il vaut</td>
<td>ils valent</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>perdre（丢失，错过，输）</th>
<th>perdu</th>
</tr>
</thead>
<tbody><tr>
<td>je perds</td>
<td>nous perdons</td>
</tr>
<tr>
<td>tu perds</td>
<td>vous perdez</td>
</tr>
<tr>
<td>il perd</td>
<td>ils perdent</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>accueillir（迎接、接受）</th>
<th>accueilli</th>
</tr>
</thead>
<tbody><tr>
<td>j’accueille</td>
<td>nous accueillons</td>
</tr>
<tr>
<td>tu accueilles</td>
<td>vous accueillez</td>
</tr>
<tr>
<td>il accueille</td>
<td>ils accueillent</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>paraître（出现）</th>
<th>paru</th>
</tr>
</thead>
<tbody><tr>
<td>je parais</td>
<td>nous paraissons</td>
</tr>
<tr>
<td>tu parais</td>
<td>vous paraissez</td>
</tr>
<tr>
<td>il paraît</td>
<td>ils paraissent</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>plaire（使高兴）</th>
<th>plu</th>
</tr>
</thead>
<tbody><tr>
<td>je plais</td>
<td>nous paisons</td>
</tr>
<tr>
<td>tu plais</td>
<td>vous plaisez</td>
</tr>
<tr>
<td>il plaît</td>
<td>ils plaisent</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>rire（笑）</th>
<th>ri</th>
</tr>
</thead>
<tbody><tr>
<td>je ris</td>
<td>nous rions</td>
</tr>
<tr>
<td>tu ris</td>
<td>vous riez</td>
</tr>
<tr>
<td>il rit</td>
<td>ils rient</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>éteindre（关掉）</th>
<th>éteint</th>
</tr>
</thead>
<tbody><tr>
<td>j’éteins</td>
<td>nous éteignons</td>
</tr>
<tr>
<td>tu éteins</td>
<td>vous éteignez</td>
</tr>
<tr>
<td>il éteint</td>
<td>ils éteignent</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>réduire（减少）</th>
<th>réduit</th>
</tr>
</thead>
<tbody><tr>
<td>je réduis</td>
<td>nous réduisons</td>
</tr>
<tr>
<td>tu réduis</td>
<td>vous réduisez</td>
</tr>
<tr>
<td>li réduit</td>
<td>ils réduisent</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>servir（服务、用来）</th>
<th>servi</th>
</tr>
</thead>
<tbody><tr>
<td>je sers</td>
<td>nous servons</td>
</tr>
<tr>
<td>tu sers</td>
<td>vous servez</td>
</tr>
<tr>
<td>il sert</td>
<td>ils servent</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>découvrir（发现、旅游）</th>
<th>découvert</th>
</tr>
</thead>
<tbody><tr>
<td>je décourvre</td>
<td>nous découvrons</td>
</tr>
<tr>
<td>tu découvre</td>
<td>vous découvrez</td>
</tr>
<tr>
<td>il découvre</td>
<td>ils découvrent</td>
</tr>
</tbody></table>
<h3 id="条件式现在时"><a href="#条件式现在时" class="headerlink" title="条件式现在时"></a>条件式现在时</h3><p>简单将来时词根+未完成过去时词尾</p>
<table>
<thead>
<tr>
<th>aimer</th>
<th>-</th>
</tr>
</thead>
<tbody><tr>
<td>j’aimerais</td>
<td>nous aimerions</td>
</tr>
<tr>
<td>tu aimerais</td>
<td>vous aimeriez</td>
</tr>
<tr>
<td>il aimerait</td>
<td>ils aimeraient</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>être</th>
<th>-</th>
</tr>
</thead>
<tbody><tr>
<td>je serais</td>
<td>nous serions</td>
</tr>
<tr>
<td>tu serais</td>
<td>vous seriez</td>
</tr>
<tr>
<td>il serait</td>
<td>ils seraient</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>avoir</th>
<th>-</th>
</tr>
</thead>
<tbody><tr>
<td>j’aurais</td>
<td>nous aurions</td>
</tr>
<tr>
<td>tu aurais</td>
<td>vous auriez</td>
</tr>
<tr>
<td>il aurait</td>
<td>ils auraient</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>faire</th>
<th>-</th>
</tr>
</thead>
<tbody><tr>
<td>je ferais</td>
<td>nous ferions</td>
</tr>
<tr>
<td>tu ferais</td>
<td>vous feriez</td>
</tr>
<tr>
<td>il ferait</td>
<td>ils feraient</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>vouloir</th>
<th>-</th>
</tr>
</thead>
<tbody><tr>
<td>je voudrais</td>
<td>nous voudrions</td>
</tr>
<tr>
<td>tu voudrais</td>
<td>vous voudriez</td>
</tr>
<tr>
<td>il voudrait</td>
<td>ils voudraient</td>
</tr>
</tbody></table>
<h3 id="虚拟式现在时"><a href="#虚拟式现在时" class="headerlink" title="虚拟式现在时"></a>虚拟式现在时</h3><p>第一小分队（je, tu, il/elle, ils/ellles）：直陈式现在时，复数第三人称（ils）变位去掉ent，加e, es, e, ent</p>
<p>第二小分队（nous, vous）：直陈式现在时，复数第一人称（nous）变位去掉ons，加ions, iez</p>
<table>
<thead>
<tr>
<th>parler</th>
<th>-</th>
</tr>
</thead>
<tbody><tr>
<td>que je parle</td>
<td>que nous parlions</td>
</tr>
<tr>
<td>que tu parles</td>
<td>que vous parliez</td>
</tr>
<tr>
<td>qu’il parle</td>
<td>qu’ils parlent</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>avoir</th>
<th>-</th>
</tr>
</thead>
<tbody><tr>
<td>que j’aie</td>
<td>que nous ayons</td>
</tr>
<tr>
<td>que tu aies</td>
<td>que vous ayez</td>
</tr>
<tr>
<td>qu’il ait</td>
<td>qu’ils aient</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>être</th>
<th>-</th>
</tr>
</thead>
<tbody><tr>
<td>que je sois</td>
<td>que nous soyons</td>
</tr>
<tr>
<td>que tu sois</td>
<td>que vous soyez</td>
</tr>
<tr>
<td>qu’il soit</td>
<td>qu’ils soient</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>faire</th>
<th>-</th>
</tr>
</thead>
<tbody><tr>
<td>que je fasse</td>
<td>que nous fassions</td>
</tr>
<tr>
<td>que tu fasses</td>
<td>que vous fassiez</td>
</tr>
<tr>
<td>qu’il fasse</td>
<td>qu’il fassent</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>aller</th>
<th>-</th>
</tr>
</thead>
<tbody><tr>
<td>que j’aille</td>
<td>que nous allions</td>
</tr>
<tr>
<td>que tu ailles</td>
<td>que vous alliez</td>
</tr>
<tr>
<td>qu’il aille</td>
<td>qu’ils aillent</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>vouloir</th>
<th>-</th>
</tr>
</thead>
<tbody><tr>
<td>que je veuille</td>
<td>que nous voulions</td>
</tr>
<tr>
<td>que tu veuilles</td>
<td>que vous vouliez</td>
</tr>
<tr>
<td>qu’il veuille</td>
<td>qu’ils veuillent</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>pouvoir</th>
<th>-</th>
</tr>
</thead>
<tbody><tr>
<td>que je puisse</td>
<td>que nous puissions</td>
</tr>
<tr>
<td>que tu puisses</td>
<td>que vous puissiez</td>
</tr>
<tr>
<td>qu’il puisse</td>
<td>qu’ils puissent</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>savoir</th>
<th>-</th>
</tr>
</thead>
<tbody><tr>
<td>que je sache</td>
<td>que nous sachions</td>
</tr>
<tr>
<td>que tu saches</td>
<td>que vous sachiez</td>
</tr>
<tr>
<td>qu’il sache</td>
<td>qu’ils sachent</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>devoir</th>
<th>-</th>
</tr>
</thead>
<tbody><tr>
<td>que je doive</td>
<td>que nous devions</td>
</tr>
<tr>
<td>que tu doives</td>
<td>que vous deviez</td>
</tr>
<tr>
<td>qu’il doive</td>
<td>qu’ils doivent</td>
</tr>
</tbody></table>
<p>pleuvoir: qu’il pleuve</p>
<p>falloir: qu’il faille</p>
<h2 id="词汇"><a href="#词汇" class="headerlink" title="词汇"></a>词汇</h2><h3 id="形容词的位置"><a href="#形容词的位置" class="headerlink" title="形容词的位置"></a>形容词的位置</h3><p>名词之后：颜色、国籍、形状、宗教、过去分词、-ant、带补语</p>
<p>名词前：品质形容词 beau, joli, jeune, vieux, petit, grand, bon, nouveau</p>
<p>根据位置改变意义：</p>
<table>
<thead>
<tr>
<th>adj</th>
<th>adj + n.</th>
<th>n. + adj.</th>
</tr>
</thead>
<tbody><tr>
<td>ancien</td>
<td>从前的、如今已不是的</td>
<td>古老的</td>
</tr>
<tr>
<td>brave</td>
<td>善良的、正直的</td>
<td>勇敢的</td>
</tr>
<tr>
<td>certain</td>
<td>有点、一些</td>
<td>不可怀疑的、明显的</td>
</tr>
<tr>
<td>cher</td>
<td>亲爱的</td>
<td>昂贵的</td>
</tr>
<tr>
<td>curieux</td>
<td>奇怪的</td>
<td>好奇的</td>
</tr>
<tr>
<td>grand</td>
<td>重要的、伟大的</td>
<td>身材高大的</td>
</tr>
<tr>
<td>jeune</td>
<td>新进的</td>
<td>年轻的</td>
</tr>
<tr>
<td>pauvre</td>
<td>可怜的</td>
<td>贫穷的</td>
</tr>
<tr>
<td>rare</td>
<td>不多的</td>
<td>稀有的</td>
</tr>
<tr>
<td>seul</td>
<td>唯一的</td>
<td>孤独的</td>
</tr>
<tr>
<td>vrai</td>
<td>重要的</td>
<td>真实的</td>
</tr>
<tr>
<td>propre</td>
<td>自己的</td>
<td>干净的</td>
</tr>
</tbody></table>
<h3 id="频率副词"><a href="#频率副词" class="headerlink" title="频率副词"></a>频率副词</h3><table>
<thead>
<tr>
<th>parfois</th>
<th>有时</th>
</tr>
</thead>
<tbody><tr>
<td>souvent</td>
<td>经常</td>
</tr>
<tr>
<td>toujours</td>
<td>总是</td>
</tr>
<tr>
<td>rarement</td>
<td>极少</td>
</tr>
<tr>
<td>ne…jamais</td>
<td>从不</td>
</tr>
</tbody></table>
<h3 id="强度副词"><a href="#强度副词" class="headerlink" title="强度副词"></a>强度副词</h3><table>
<thead>
<tr>
<th>beaucoup</th>
<th>非常</th>
</tr>
</thead>
<tbody><tr>
<td>un peu</td>
<td>稍微</td>
</tr>
<tr>
<td>peu</td>
<td>不太</td>
</tr>
<tr>
<td>très</td>
<td>很</td>
</tr>
<tr>
<td>trop</td>
<td>过于</td>
</tr>
<tr>
<td>tellement/si</td>
<td>如此地</td>
</tr>
<tr>
<td>vraiment</td>
<td>确实地</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>-</th>
<th>-</th>
</tr>
</thead>
<tbody><tr>
<td>trouver / se trouver</td>
<td>找到、认为/位于、处于</td>
</tr>
</tbody></table>
<h3 id="泛指形容词"><a href="#泛指形容词" class="headerlink" title="泛指形容词"></a>泛指形容词</h3><table>
<thead>
<tr>
<th>chaque</th>
<th>每个</th>
</tr>
</thead>
<tbody><tr>
<td>quelque</td>
<td>某个、某些</td>
</tr>
<tr>
<td>quelques</td>
<td>几个、少量</td>
</tr>
<tr>
<td>plusieurs</td>
<td>好几个</td>
</tr>
<tr>
<td>certain(e)</td>
<td>某个</td>
</tr>
<tr>
<td>certain(e)s</td>
<td>某些</td>
</tr>
<tr>
<td>tout</td>
<td>任何、整个、所有（见tout）</td>
</tr>
</tbody></table>
<h3 id="泛指代词"><a href="#泛指代词" class="headerlink" title="泛指代词"></a>泛指代词</h3><table>
<thead>
<tr>
<th>ne…rien</th>
<th>没有什么东西</th>
</tr>
</thead>
<tbody><tr>
<td>ne…personne</td>
<td>没有什么人</td>
</tr>
<tr>
<td>只能指物：rien, tout, quelque chose</td>
<td>什么事物，一切，某件事</td>
</tr>
<tr>
<td>只能指人：on，personne</td>
<td>人们（有人），任何人</td>
</tr>
<tr>
<td>un(e) autre, l’autre, d’autres, les autres</td>
<td>另一个，另外那个，其他一些，其他那些</td>
</tr>
<tr>
<td>quelqu’un(e)(s)</td>
<td>某人，某个，某些人</td>
</tr>
<tr>
<td>certain(e)s</td>
<td>某些人，某些事</td>
</tr>
<tr>
<td>chacun</td>
<td>每个人，每个事物</td>
</tr>
<tr>
<td>plusieurs</td>
<td>好几个人，好几个</td>
</tr>
</tbody></table>
<p>后面的形容词，加de，使用阳性单数</p>
<p>C’est quelque chose de nouveau.</p>
<h3 id="时间标记语"><a href="#时间标记语" class="headerlink" title="时间标记语"></a>时间标记语</h3><table>
<thead>
<tr>
<th>前天</th>
<th>avant-hier</th>
</tr>
</thead>
<tbody><tr>
<td>昨天</td>
<td>hier</td>
</tr>
<tr>
<td>今天</td>
<td>aujourd’hui</td>
</tr>
<tr>
<td>明天</td>
<td>demain</td>
</tr>
<tr>
<td>后天</td>
<td>après-demain</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>从前</th>
<th>avant</th>
</tr>
</thead>
<tbody><tr>
<td>以后</td>
<td>après / plus tard</td>
</tr>
<tr>
<td>不久</td>
<td>bientôt</td>
</tr>
<tr>
<td>即将</td>
<td>prochainement</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>在中午</th>
<th>à midi</th>
</tr>
</thead>
<tbody><tr>
<td>在10点</td>
<td>à 10 heures</td>
</tr>
<tr>
<td>在2020年</td>
<td>en 2020</td>
</tr>
<tr>
<td>在春天</td>
<td>au printemps</td>
</tr>
<tr>
<td>在冬天</td>
<td>en hiver</td>
</tr>
<tr>
<td>在4月</td>
<td>en avril</td>
</tr>
</tbody></table>
<h4 id="次序"><a href="#次序" class="headerlink" title="次序"></a>次序</h4><p>d’abord, … puis / ensuite / alors / après, … enfin … 首先，然后，最后</p>
<blockquote>
<p>Il est allé chez le médecin <strong>d’abord</strong> et <strong>puis</strong> au magasin, <strong>enfin</strong> à la librairie.</p>
<p>他先去了诊所，之后去了商场，最后到了书店。</p>
</blockquote>
<p>提前：avant l’heure / en avance</p>
<p>做运动之前：avant de faire du sport</p>
<p>下班之后：après le travail</p>
<p>读完之后：après avoir lu</p>
<h4 id="同时性"><a href="#同时性" class="headerlink" title="同时性"></a>同时性</h4><table>
<thead>
<tr>
<th>au moment où</th>
<th>在……的时候</th>
</tr>
</thead>
<tbody><tr>
<td>quand</td>
<td>当</td>
</tr>
<tr>
<td>pendant que</td>
<td>在……期间</td>
</tr>
</tbody></table>
<blockquote>
<p>Il est arrivé <strong>quand</strong> elle partait. 她要出发时，他到了。</p>
<p>Prépare le café <strong>pendant que</strong> je faire la vaisselle. 我洗碗的时候你准备咖啡。</p>
</blockquote>
<h4 id="具体时间"><a href="#具体时间" class="headerlink" title="具体时间"></a>具体时间</h4><ul>
<li><p>à un moment 在过去某个时候</p>
<p>À un moment, il s’est imaginé être une star.</p>
</li>
<li><p>à ce moment là 那时</p>
<p>À ce moment là, nous habitions dans une maison très petite.  那时我们住在一个很小的房子里。</p>
</li>
<li><p>en ce moment / maintenant / pour le moment / pour l’instant 现在</p>
<p>En ce moment, il a trop de problèmes personnels pour se concentrer à son travail.</p>
</li>
</ul>
<h4 id="持续时间"><a href="#持续时间" class="headerlink" title="持续时间"></a>持续时间</h4><p>Les gens travaillent 8 heures par jour. 人们每天工作8小时。</p>
<p>Ils rentreront dans 2 semaines. 他们两个星期后回来。</p>
<h4 id="花费时间"><a href="#花费时间" class="headerlink" title="花费时间"></a>花费时间</h4><p>J’ai fini cette lettre <strong>en</strong> 10 minutes. 我用十分钟写好了信。</p>
<h4 id="起始时间"><a href="#起始时间" class="headerlink" title="起始时间"></a>起始时间</h4><p>Il neige <strong>depuis</strong> 2 jours. 已经下了两天雪了。</p>
<p>On ne s’est jamais vu <strong>depuis</strong> cette rencontre. 自从这次相遇后，我们再没见过面。</p>
<h4 id="时间期限"><a href="#时间期限" class="headerlink" title="时间期限"></a>时间期限</h4><p>On ne l’a pas vu <strong>pendant</strong> plusieurs mois. 我们有好几个月没有看见他了。</p>
<h4 id="延续时间"><a href="#延续时间" class="headerlink" title="延续时间"></a>延续时间</h4><p>Elle part <strong>pour</strong> combien de temps? 她要离开多少时间？</p>
<h3 id="副词-ment"><a href="#副词-ment" class="headerlink" title="副词 ment"></a>副词 ment</h3><ul>
<li><p>辅音结尾，阴性单数 + ment</p>
<p>froid -&gt; froidement, vif -&gt; vivement</p>
</li>
<li><p>元音结尾：阳性单数 + ment</p>
<p>absolu -&gt; absolument</p>
</li>
<li><p>-ant，-ent：变为 -amment，-emment</p>
<p>suffisant -&gt; suffisamment, différent -&gt; différemment</p>
</li>
</ul>
<h3 id="短语"><a href="#短语" class="headerlink" title="短语"></a>短语</h3><table>
<thead>
<tr>
<th>la dernière semaine</th>
<th>最后一周</th>
</tr>
</thead>
<tbody><tr>
<td>la prochaine semaine</td>
<td>最近一周</td>
</tr>
<tr>
<td>comme d’habitude</td>
<td>和往常一样</td>
</tr>
<tr>
<td>il s’agit de</td>
<td>关于</td>
</tr>
<tr>
<td>être en danger / sécurité</td>
<td>处于危险/安全中</td>
</tr>
<tr>
<td>respecter qn / avoir respecte pour qn</td>
<td>尊重某人</td>
</tr>
<tr>
<td>s’en sortir</td>
<td>摆脱、搞定</td>
</tr>
<tr>
<td>maintenant / en ce moment / pour l’instant / pour le moment</td>
<td>目前，暂时</td>
</tr>
<tr>
<td>prendre la route</td>
<td>开车</td>
</tr>
<tr>
<td>en tout cas / de toute façon</td>
<td>无论如何</td>
</tr>
<tr>
<td>d’un côté…, de l’autre…</td>
<td>一边……另一边</td>
</tr>
<tr>
<td>en conformité avec</td>
<td>与……一致</td>
</tr>
<tr>
<td>à mon avis</td>
<td>在我看来</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>proposer qch à qch</th>
<th>向某人建议某事</th>
</tr>
</thead>
<tbody><tr>
<td>proposer à qn de faire qch</td>
<td>建议某人做某事</td>
</tr>
<tr>
<td>aider qch à faire qn</td>
<td>帮助某人做某事</td>
</tr>
<tr>
<td>laisser qn faire qch</td>
<td>让某人做某事</td>
</tr>
<tr>
<td>laisser qch à qn</td>
<td>留给某人某物</td>
</tr>
<tr>
<td>s’abonner (prendre un abonnement) à qch</td>
<td>订阅某事</td>
</tr>
<tr>
<td>souhaiter qch à qn</td>
<td>祝福某物给某人</td>
</tr>
<tr>
<td>penser à</td>
<td>想着、惦记</td>
</tr>
<tr>
<td>arriver à qn</td>
<td>做到某事</td>
</tr>
<tr>
<td>monter qch à qn</td>
<td>向某人展示某物</td>
</tr>
<tr>
<td>donner la priorité à qch / qn</td>
<td>优先选择某事、人</td>
</tr>
<tr>
<td>apprendre qch / à faire qch</td>
<td>学习做某事</td>
</tr>
<tr>
<td>apprendre qch à qn / apprendre à qn à faire qch</td>
<td>教某人做某事</td>
</tr>
<tr>
<td>chercher à faire</td>
<td>力求做某事</td>
</tr>
<tr>
<td>destiner qch à qn</td>
<td>留给某人某物</td>
</tr>
<tr>
<td>faire plaisir à qch</td>
<td>使某人高兴</td>
</tr>
<tr>
<td>inciter qn à faire qch</td>
<td>促使某人做某事</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>avoir l’habitude de faire qch</th>
<th>习惯于做某事</th>
</tr>
</thead>
<tbody><tr>
<td>s’occuper de qch/qn</td>
<td>负责某事/照顾某人</td>
</tr>
<tr>
<td>avoir besoin/envie/peur de qch</td>
<td>需要/想要/害怕某事</td>
</tr>
<tr>
<td>décider de faire qch</td>
<td>决定做某事</td>
</tr>
<tr>
<td>Il est dangereux de faire qch</td>
<td>做某事有危险</td>
</tr>
<tr>
<td>penser de</td>
<td>考虑、认为</td>
</tr>
<tr>
<td>à l’aide de</td>
<td>借助</td>
</tr>
<tr>
<td>avec l’aide de qn</td>
<td>在某人的帮助下</td>
</tr>
<tr>
<td>empêcher qn de faire qch</td>
<td>阻止某人做某事</td>
</tr>
<tr>
<td>ne pas s’empêcher de faire qch</td>
<td>忍不住去做某事</td>
</tr>
<tr>
<td>faire plaisir à qn de faire qch</td>
<td>做某事使某人高兴</td>
</tr>
<tr>
<td>avoir l’impression de / que</td>
<td>感觉到，仿佛觉得</td>
</tr>
</tbody></table>
<h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><h3 id="过去最近过去时（venir-de）"><a href="#过去最近过去时（venir-de）" class="headerlink" title="过去最近过去时（venir de）"></a>过去最近过去时（venir de）</h3><ul>
<li><p>On <strong>venait d</strong>‘entrer dans la maison.</p>
<p>我们当时刚刚进屋。</p>
</li>
<li><p>Hier, il <strong>venait de</strong> pleuvoir quand ils sont arrivés.</p>
<p>昨天他们到的时候，刚刚下过雨。</p>
</li>
</ul>
<h3 id="过去最近将来时（aller）"><a href="#过去最近将来时（aller）" class="headerlink" title="过去最近将来时（aller）"></a>过去最近将来时（aller）</h3><ul>
<li><p>Hier, on a dit que tu <strong>allais travailler</strong> à Lyon.</p>
<p>昨天有人说你要去里昂工作。</p>
</li>
</ul>
<h3 id="条件式现在时-1"><a href="#条件式现在时-1" class="headerlink" title="条件式现在时"></a>条件式现在时</h3><ul>
<li><p>委婉表示希望、礼貌请求、委婉表示建议、推测、感叹语气</p>
<p>J’aimerais (=Je voudrais) visiter cet appartement, est-ce possible?</p>
</li>
<li><p>主从复合句中，从句用si表假设（未完成过去时），主句用条件式现在时</p>
<p>Si <strong>j’étais</strong> vous, je <strong>ferais</strong> autrement. 如果我是您，我就不会这么做。</p>
<p>S’il <strong>faisait</strong> beau demain, <strong>j’irais</strong> au musée avec vous. 如果明天天气好，我就和你们去博物馆。</p>
</li>
</ul>
<h3 id="虚拟式现在时-1"><a href="#虚拟式现在时-1" class="headerlink" title="虚拟式现在时"></a>虚拟式现在时</h3><ul>
<li><p>意愿：aimer, désirer（希望）, souhaiter（祝愿）, vouloir（愿意）, demander, exiger（强求）, permettre（允许）, refuser</p>
<p>Je souhait <strong>qu’il parte</strong> tout de suite.</p>
<p>Le professeur veut <strong>qu’on fasse</strong> ces exercises aujourd’hui.</p>
</li>
<li><p>感情：content, satisfait, heureux, regretter（遗憾）, craindre（害怕）, avoir peur（害怕）</p>
<p>Je suis très content <strong>que vous alliez</strong> mieux. 我很高兴您身体好些了。</p>
<p>J’ai peur qu’il <strong>ne</strong> pleuve. 赘词ne无意义</p>
<p>Il regrette que ses parents ne le comprennent pas. 他很遗憾父母不理解他。</p>
</li>
<li><p>判断： il faut（应该）/semble（似乎）/suffit（只需）, il est important/mieux（最好）/possible/facile/naturel（自然）/nécessaire（必要）/temps（适时）</p>
<p>Il faut <strong>que vous finissiez</strong> ce travail tout de suite. 您应该马上完成这项工作。</p>
</li>
<li><p>肯定直陈，否定、倒装疑问句中虚拟: il est claire/certain/sûr/probable, croire/penser/espérer/trouver</p>
<p>Je pense que <strong>c’est</strong> nécessaire.</p>
<p>Je ne pense pas que ce <strong>soit</strong> possible.</p>
<p>相反的用法：douter（怀疑）</p>
</li>
</ul>
<h3 id="不定式"><a href="#不定式" class="headerlink" title="不定式"></a>不定式</h3><ul>
<li><p><strong>avant de + 不定式现在时：在做某事之前</strong></p>
<p>Avant de partir au restaurant, elle est allée au supermarché. 在去餐厅之前，她去了趟超市。</p>
</li>
<li><p>avant de + 不定式过去时：在做完某事之前</p>
</li>
<li><p>après + 不定式现在时：在做某事之后</p>
</li>
<li><p><strong>après + 不定式过去时：在做完某事之后</strong></p>
<p>Après être allée au supermarché, elle est partie au restaurant. 在去过超市之后，她去了餐厅。</p>
</li>
</ul>
<h3 id="被动态"><a href="#被动态" class="headerlink" title="被动态"></a>被动态</h3><p>être + 过去分词，施动者补语 par / de。只有直接及物动词才能被动态。</p>
<p>être可以有语式和语态：</p>
<ul>
<li>Elle <strong>est</strong> soignée par lui. 直陈式现在时</li>
<li>Elle <strong>a été</strong> soignée par lui. 复合过去时</li>
<li>Elle <strong>était</strong> soignée par lui. 未完成过去时</li>
<li>Elle <strong>va être</strong> soignée par lui. 最近将来时</li>
<li>Elle <strong>sera</strong> soignée par lui. 简单将来时</li>
<li>Elle <strong>serait</strong> soignée par lui. 条件式现在时</li>
</ul>
<p>情感或抽象动词（喜欢、尊敬……），补语用de：</p>
<ul>
<li>Il n’est aimé <strong>de</strong> personne.</li>
<li>Ce médecin est respecté <strong>de</strong> tous les malades.</li>
</ul>
<p>主语为事物，强调状态时用de：</p>
<ul>
<li>L’article est rempli d’erreurs.</li>
</ul>
<p>不突出施动者，可省略补语：</p>
<ul>
<li>Tous les gâteaux ont été mangés.</li>
<li>Sa voiture a été volée.</li>
</ul>
<h3 id="复合过去时中过去分词的配合"><a href="#复合过去时中过去分词的配合" class="headerlink" title="复合过去时中过去分词的配合"></a>复合过去时中过去分词的配合</h3><p><strong>avoir为助动词，直接宾语位于动词之前时，要与前置的直宾性数配合：</strong></p>
<ul>
<li>Cette pièce de théâtre? Je l’ai déjà vue. 这场戏吗？我看过。</li>
<li>Tu veux voir les photos que j’ai prises? 你想看看我拍的照片吗？</li>
<li>Quelles villes avez-vous visitées? 你们去过哪些城市？</li>
</ul>
<p><strong>代词式动词：</strong></p>
<ol>
<li>被动意义、绝对意义，无条件配合：<ul>
<li>Les pommes se sont <strong>vendues</strong> bien aujourd’hui.  苹果今天卖得好。</li>
<li>Les oiseaux se sont <strong>envolés</strong>.  鸟们飞起来了。</li>
</ul>
</li>
<li>自反意义、相互意义，直宾配合，间宾不配合：<ul>
<li>Elle s’est <strong>levée</strong> à 8h du matin.</li>
<li>Nadia et Alice se sont <strong>rencontrées</strong> à Paris en 2019.</li>
<li>Hier, elles se sont <strong>parlé</strong> avant le cours. &nbsp;（间宾不配合）</li>
</ul>
</li>
</ol>
<h3 id="Tout"><a href="#Tout" class="headerlink" title="Tout"></a>Tout</h3><ol>
<li><p>泛指形容词</p>
<p>单数：tout, toute；复数：tous /tu/ , toutes</p>
<ul>
<li>Je peux répondre à toute question. 无冠词：任何的</li>
<li>Je peux répondre à toute la question. 单数：整个的</li>
<li>Je peux répondre à toutes les questions. 复数：所有的</li>
<li>部分否定：Tous les étudiants ne sont pas rentrés. 不是所有的学生都回来了。</li>
</ul>
</li>
<li><p>泛指代词：一切、所有的事物、所有人</p>
<p>单数：tout；复数：tous /tus/, toutes</p>
<ul>
<li>Elle avait tout.</li>
<li>J’ai invité plusieurs amis: tous sont venus.</li>
</ul>
</li>
<li><p>名词：整体（tout）</p>
<ul>
<li><p>Les différents chapitres de ce livre forment un tout.</p>
<p>本书的各个章节形成一个整体。</p>
</li>
</ul>
</li>
<li><p>副词：十分地</p>
<p>一般为tout，在辅音（嘘音h）开头的阴性形容词前，用toute(s)</p>
<ul>
<li>Elle est tout heureuse.</li>
<li>Elle est toute honteuse.</li>
<li>Elles sont tout étonnées.</li>
<li>Elles sont toutes contentes.</li>
</ul>
</li>
</ol>
<h3 id="Depuis和il-y-a"><a href="#Depuis和il-y-a" class="headerlink" title="Depuis和il y a"></a>Depuis和il y a</h3><p>Depuis: 自……以来，可以接时间段、时间点</p>
<ul>
<li>J’habite ici depuis deux ans.</li>
<li>Il pleut depuis mardi.</li>
</ul>
<p>Il y a: 在……以前，只能接时间段</p>
<ul>
<li>J’ai rencontré Lucie il y a trois jours.</li>
</ul>
<h3 id="faire-faire-不可分"><a href="#faire-faire-不可分" class="headerlink" title="faire faire 不可分"></a>faire faire 不可分</h3><p>使、让、请某人做某事</p>
<p>Je te fait comprendre. 我让你明白。</p>
<ol>
<li>看不到宾语<ul>
<li>Elle fait venir ses enfants.  她让孩子们来：不及物，不定式主语为名词</li>
<li>Elle les fait venir. 她让他们来：不及物，不定式主语为人称代词，用直宾代词</li>
<li>Elle fait lire cet enfant. 她让孩子阅读：省略宾语的及物动词，不定式主语为名词</li>
<li>Elle le fait lire.  她让他阅读：省略宾语的及物动词，不定式主语为人称代词，用直宾代词</li>
</ul>
</li>
<li>有宾语<ul>
<li>Je fais mettre la table par/à Sophie. 我让Sophie布置桌子：及物带直宾，不定式主语为名词</li>
<li>Je lui fais mettre la table. 我让她布置桌子：及物带直宾，不定式主语为人称代词，用间宾代词。</li>
</ul>
</li>
</ol>
<h3 id="国名、城市前的介词"><a href="#国名、城市前的介词" class="headerlink" title="国名、城市前的介词"></a>国名、城市前的介词</h3><ul>
<li><p>en：阴性单数、元音开头的阳性单数</p>
<p>J’habite en France/Iran.</p>
</li>
<li><p>au：辅音开头的阳性单数</p>
<p>J’habite au Japon.</p>
</li>
<li><p>aux：复数</p>
<p>J’habite aux États-Unis.</p>
</li>
<li><p>à：城市</p>
<p>J’habite à Paris.</p>
</li>
<li><p>de：阴性单数、元音开头的阳性单数、城市</p>
<p>Il vient de France / d’Iran/ de Paris.</p>
</li>
<li><p>du：辅音开头的阳性单数</p>
<p>Il vient du Japon.</p>
</li>
<li><p>des：复数</p>
<p>Il vient des États-Unis.</p>
</li>
</ul>
<h3 id="关系代词-qui，que"><a href="#关系代词-qui，que" class="headerlink" title="关系代词 qui，que"></a>关系代词 qui，que</h3><ul>
<li><p>qui代替先行词，在从句中作主语，可指人或物。</p>
<p>J’aime bien cette actrice <strong>qui</strong> s’appelle Sophie.</p>
</li>
<li><p>que代替先行词，在从句中作直接宾语，可指人或物。</p>
<p>Nicolas est un chanteur <strong>que</strong> Sophie aime bien.</p>
</li>
<li><p>C’est … que 强调主语以外</p>
<p>C’est <u>ce matin</u> que Paul m’a donné un document.</p>
<p>C’est <u>à moi</u> que Paul a donné un document ce matin.</p>
</li>
<li><p>C’est … qui 强调主语</p>
<p>C’est <u>Paul</u> qui m’a donné un document ce matin.</p>
</li>
</ul>
<h3 id="关系代词-ou，dont"><a href="#关系代词-ou，dont" class="headerlink" title="关系代词 où，dont"></a>关系代词 où，dont</h3><ul>
<li><p>où在关系从句中做状语，代替地点、时间</p>
</li>
<li><p>dont在关系从句中</p>
<ul>
<li><p>做de引导的间接宾语</p>
<p>C’est le poste <strong>dont</strong> il s’est occupé depuis longtemps. 这是他负责很久的职位。</p>
<p>C’est le poste <strong>qu’il</strong> a cherché depuis longtemps. 这是他找了很久的职位。</p>
<p>Le cancer est une maladie <strong>dont</strong> tout le monde a peur.</p>
<p>C’est la personne <strong>dont</strong> j’ai parlé.</p>
</li>
<li><p>主语的补语</p>
<p>Je ne veux plus travailler dans une entreprise <strong>dont</strong> le patron est avare.</p>
</li>
<li><p>直接宾语的补语</p>
<p>Je cherche le magazine <strong>dont</strong> j’ai lu seulement quelques pages.</p>
</li>
<li><p>表语的补语</p>
<p>C’est une chose <strong>dont</strong> je sui très fier.</p>
</li>
</ul>
</li>
</ul>
<h3 id="副代词-en"><a href="#副代词-en" class="headerlink" title="副代词 en"></a>副代词 en</h3><ul>
<li><p>泛指的直接宾语，de + 名词</p>
<p>Oui, j’en ai une.</p>
</li>
<li><p>基数词 + 名词，数量副词 + de + 名词</p>
<p>J’en ai beaucoup.</p>
</li>
<li><p>de + 间接宾语</p>
<p>Son voyage? Il vient d’en parler.  （只能代物，不能代人）</p>
<p>Qu’est-ce que tu en penses?</p>
</li>
<li><p>de + 补语</p>
<p>Ton travail? J’en suis très satisfait.</p>
<p>C’est un enfant intelligent, son père est fier de lui. （不能代人）</p>
</li>
<li><p>de + 状语</p>
<p>Nathalie a ouvert son sac et en a sorti un livre.</p>
</li>
</ul>
<h3 id="副代词-y"><a href="#副代词-y" class="headerlink" title="副代词 y"></a>副代词 y</h3><ul>
<li><p>à, en, dans, chez, sur等引导的地点状语</p>
<p>Non, je n’y vais pas.</p>
</li>
<li><p>à引导的指物的间接宾语</p>
<p>J’aimerais m’arrêter de fumer, mais je n’y arrive pas.</p>
<p>Notre rendez-vous? Oui, j’y pense.</p>
</li>
</ul>
<h3 id="指示代词"><a href="#指示代词" class="headerlink" title="指示代词"></a>指示代词</h3><h4 id="简单形式"><a href="#简单形式" class="headerlink" title="简单形式"></a>简单形式</h4><p>单数：celui, celle；复数：ceux, celles</p>
<p>Nous prendrons le train de cinq heures, <strong>celui de</strong> huit heures arrive trop tard.</p>
<h4 id="复合形式"><a href="#复合形式" class="headerlink" title="复合形式"></a>复合形式</h4><p>单数：celui-ci, celui-là; celle-ci, celle-là</p>
<p>复数：ceux-ci, ceux-là; celles-ci, celles-là</p>
<p>Tu préfère quelles photos? Celles-ci ou celles-là?</p>
<h3 id="疑问代词"><a href="#疑问代词" class="headerlink" title="疑问代词"></a>疑问代词</h3><p>单数：lequel, laquelle；复数：lesquels, lesquelles</p>
<p>Lequel de ces restaurants est-ce que vous êtes allés? 你们去过这些餐厅中的哪一个？</p>
<h3 id="主有代词"><a href="#主有代词" class="headerlink" title="主有代词"></a>主有代词</h3><table>
<thead>
<tr>
<th>我的</th>
<th>le mien</th>
<th>la mienne</th>
<th>les miens</th>
<th>les miennes</th>
</tr>
</thead>
<tbody><tr>
<td>你的</td>
<td>le tien</td>
<td>la tienne</td>
<td>les tiens</td>
<td>les tiennes</td>
</tr>
<tr>
<td>TA的</td>
<td>le sien</td>
<td>la sienne</td>
<td>les siens</td>
<td>les siennes</td>
</tr>
<tr>
<td>我们的</td>
<td>le nôtre</td>
<td>la nôtre</td>
<td>les nôtres</td>
<td>les nôtres</td>
</tr>
<tr>
<td>你们的</td>
<td>le vôtre</td>
<td>la vôtre</td>
<td>les vôtres</td>
<td>les vôtres</td>
</tr>
<tr>
<td>TA们的</td>
<td>le leur</td>
<td>la leur</td>
<td>les leurs</td>
<td>les leurs</td>
</tr>
</tbody></table>
<h3 id="直接宾语人称代词-COD"><a href="#直接宾语人称代词-COD" class="headerlink" title="直接宾语人称代词 COD"></a>直接宾语人称代词 COD</h3><table>
<thead>
<tr>
<th>me</th>
<th>nous</th>
</tr>
</thead>
<tbody><tr>
<td>te</td>
<td>vous</td>
</tr>
<tr>
<td>le/la</td>
<td>les</td>
</tr>
</tbody></table>
<p>代替确指、特指的直接宾语。可以指人或者物。</p>
<p>Ils ne m’ont pas vu. 他们没有看见我。 </p>
<p>Ça ne vous intéresse pas? / Vous ne vous intéressez pas à cela? 您对此不感兴趣吗？</p>
<p>Si, ça m’intéresse. / Non, ça ne m’intéresse pas.</p>
<h3 id="间接宾语人称代词-COI"><a href="#间接宾语人称代词-COI" class="headerlink" title="间接宾语人称代词 COI"></a>间接宾语人称代词 COI</h3><table>
<thead>
<tr>
<th>me</th>
<th>nous</th>
</tr>
</thead>
<tbody><tr>
<td>te</td>
<td>vous</td>
</tr>
<tr>
<td>lui</td>
<td>leur</td>
</tr>
</tbody></table>
<p>代替à或者pour引导的，指人的间接宾语。</p>
<p>Elle ne t’a pas dit au revoir? 她没跟你说再见吗？</p>
<p>不能被代替的：</p>
<ul>
<li>penser à qch</li>
<li>se fier à qn</li>
<li>être à qn</li>
<li>faire attention à qn</li>
<li>avoir affaire à qn 打交道</li>
<li>s’habituer à qn</li>
<li>s’intéresser à qn</li>
<li>s’opposer à qn</li>
<li>s’adresser à qn</li>
</ul>
<h3 id="双宾语人称代词的位置"><a href="#双宾语人称代词的位置" class="headerlink" title="双宾语人称代词的位置"></a>双宾语人称代词的位置</h3><h4 id="一般原则"><a href="#一般原则" class="headerlink" title="一般原则"></a>一般原则</h4><table>
<thead>
<tr>
<th>1</th>
<th>2</th>
<th>3</th>
<th>4</th>
<th>5</th>
</tr>
</thead>
<tbody><tr>
<td>me<br>te<br>se<br>nous<br>vous</td>
<td>le<br>la<br>les</td>
<td>lui<br>leur</td>
<td>y</td>
<td>en</td>
</tr>
</tbody></table>
<blockquote>
<p>这道题很难，我向<strong>他</strong>讲解<strong>它</strong>。</p>
<p>不用代词：Cette question est difficile, j’explique cette question à lui.</p>
<p>只用间宾：…, je <strong>lui</strong> explique cette question.</p>
<p>只用直宾：…, je **l’**explique à lui.</p>
<p>双宾语：…, je <strong>la lui</strong> explique.</p>
</blockquote>
<p>这些照片不好看，你别给他们看：Ces photos ne sont pas belles, ne les leur montre pas.</p>
<p>他的地址吗，他今早给我了：Son adresse? Il me l’a donnée ce matin.</p>
<p>你洗手了吗，我洗了：Tu t’es lavé les mains? Oui, je me les suis lavé<strong>es</strong>.</p>
<ul>
<li><p>1和3不见面：</p>
<p>您把我介绍给他：Vous me présentez à lui.</p>
</li>
<li><p>3和4不见面：</p>
<p>他在那给他们打过电话：Il leur a téléphoné là-bas.  （不用y）</p>
</li>
</ul>
<h4 id="命令式肯定句"><a href="#命令式肯定句" class="headerlink" title="命令式肯定句"></a>命令式肯定句</h4><table>
<thead>
<tr>
<th>1</th>
<th>2</th>
<th>3</th>
<th>4</th>
</tr>
</thead>
<tbody><tr>
<td>le<br>la<br>les</td>
<td>moi<br>toi<br>lui<br>nous<br>vous<br>leur</td>
<td>y</td>
<td>en</td>
</tr>
</tbody></table>
<p>Cette question est difficile, expliquez-la-moi. 这道题很难，（您）给我讲解一下。</p>
<p>Montre-les-nous. （你）把他们给我们看一下。</p>
<p>Ne me les envoyez pas. （您）别把他们寄给我。</p>
<h3 id="比较级和最高级"><a href="#比较级和最高级" class="headerlink" title="比较级和最高级"></a>比较级和最高级</h3><h4 id="形容词比较级"><a href="#形容词比较级" class="headerlink" title="形容词比较级"></a>形容词比较级</h4><table>
<thead>
<tr>
<th>=</th>
<th>aussi adj. que</th>
<th>Il est aussi grand que son père.</th>
</tr>
</thead>
<tbody><tr>
<td>&gt;</td>
<td>plus adj. que</td>
<td>Il est plus grand que son père.</td>
</tr>
<tr>
<td>&lt;</td>
<td>moins adj. que</td>
<td>Il est moins grand que son père.</td>
</tr>
</tbody></table>
<p>尽可能：Je vais acheter une valise <strong>aussi légère que possible</strong>. 我要买一个尽可能轻的手提箱</p>
<table>
<thead>
<tr>
<th>adj.</th>
<th>=</th>
<th>&gt;</th>
<th>&lt;</th>
</tr>
</thead>
<tbody><tr>
<td>bon(ne)(s) 好</td>
<td>aussi bon(ne)(s)</td>
<td><strong>meilleur</strong>(e)(s)</td>
<td>moins bon(ne)(s)</td>
</tr>
<tr>
<td>mauvais(e)(s) 坏</td>
<td>aussi mauvais</td>
<td><strong>pire</strong>; plus mauvais</td>
<td>moins mauvais</td>
</tr>
<tr>
<td>petit(e) 小</td>
<td>aussi petit</td>
<td><strong>moindre</strong>; plus petit</td>
<td>moins petit</td>
</tr>
</tbody></table>
<p>pire更为强调；plus petite修饰具体名词，moindre修饰抽象名词</p>
<h4 id="副词比较级"><a href="#副词比较级" class="headerlink" title="副词比较级"></a>副词比较级</h4><p>Laura nage <strong>plus souvent que</strong> son petit frère, mais elle nage <strong>moins vite que</strong> lui.</p>
<p>洛拉比她弟弟更常游泳，但她游得不如他快。</p>
<table>
<thead>
<tr>
<th>adv.</th>
<th>=</th>
<th>&gt;</th>
<th>&lt;</th>
</tr>
</thead>
<tbody><tr>
<td>bien 好</td>
<td>aussi bien</td>
<td><strong>mieux</strong></td>
<td>moins bien</td>
</tr>
<tr>
<td>beaucoup 多</td>
<td><strong>autant</strong></td>
<td><strong>plus</strong> /plys/</td>
<td>-</td>
</tr>
<tr>
<td>peu 少</td>
<td>aussi peu</td>
<td><strong>moins</strong></td>
<td>-</td>
</tr>
</tbody></table>
<p>J’ai plus/autant/moins d’amis que Paul.</p>
<h4 id="形容词最高级"><a href="#形容词最高级" class="headerlink" title="形容词最高级"></a>形容词最高级</h4><p><strong>le plus/moins grand</strong> océan <strong>du</strong> monde</p>
<p><strong>le</strong> fleuve <strong>le plus long de</strong> votre pays</p>
<ul>
<li><p>定冠词可被主有形容词替代，省略补语</p>
<p>mon plus grand ami 我最要好的朋友</p>
</li>
<li><p>特殊形式的词形和比较级相同：le meilleur restaurant de cette région</p>
</li>
</ul>
<h4 id="副词最高级"><a href="#副词最高级" class="headerlink" title="副词最高级"></a>副词最高级</h4><p>Louis court <strong>le plus vite de</strong> tous ces garçons. 跑得最快</p>
<p><strong>De</strong> toutes les étudiantes, c’est Marie qui court <strong>le moins vite</strong>. 跑得最慢</p>
<table>
<thead>
<tr>
<th>adv.</th>
<th>+</th>
<th>-</th>
</tr>
</thead>
<tbody><tr>
<td>bien</td>
<td>le mieux</td>
<td>le moins bien</td>
</tr>
<tr>
<td>beaucoup</td>
<td>le plus (de)</td>
<td>-</td>
</tr>
<tr>
<td>peu</td>
<td>le moins (de)</td>
<td>-</td>
</tr>
</tbody></table>
<p>Tu dois dire “non” le moins souvent possible. 你应该尽可能少说‘不’。</p>
<h3 id="ne…que"><a href="#ne…que" class="headerlink" title="ne…que"></a>ne…que</h3><p>表示限制，ne在谓语动词前，que在被限定部分前</p>
<p>Je ne sais parler que l’anglais. 我只会说英语。</p>
<p>Il ne boit que de l’eau. 他只喝水。</p>
<p>Il ne mange plus que des fruits. 他现在只吃水果了。</p>
<p>Il n’ya pas que mes amis. 不仅仅有我的朋友。</p>
<h3 id="原因的表达"><a href="#原因的表达" class="headerlink" title="原因的表达"></a>原因的表达</h3><ul>
<li>à cause de（负面）</li>
<li>grâce à（正面）</li>
<li>parce que、car</li>
<li>comme</li>
<li>puisque（既然）</li>
</ul>
<h3 id="结果的表达"><a href="#结果的表达" class="headerlink" title="结果的表达"></a>结果的表达</h3><ul>
<li>Il était là tout à l’heure, il ne doit <strong>donc</strong> pas être bien loin. 他刚刚在这，所以他现在不会太远。</li>
<li>Il n’y a pas de bus, <strong>alors</strong> je suis venu à pied. 没车了，于是我走路来了。</li>
<li>J’étais malade, <strong>c’est pourquoi</strong> je ne t’ai pas répondu. 我病了，所以我没有答复你。</li>
<li>Je suis fatigué, <strong>c’est pour ça que</strong> je ne veux plus travailler ici. 我累了，所以我不想再在这工作了。</li>
<li>Il est <strong>tellement</strong>/<strong>si</strong> triste <strong>qu</strong>‘il est parti hier. 他如此伤心，以至于昨天就走了。</li>
<li>Il y a <strong>tellement de</strong> personnes <strong>que</strong> je n’ai pas entrer. 人太多了，我都没进去。</li>
<li>Il se sont <strong>assez</strong> entraîné <strong>pour</strong> gagner ce match. 他们训练得足够多，足以赢得这场比赛。</li>
<li>Ce chauffeur a <strong>trop</strong> bu <strong>pour</strong> conduire. 这个司机喝太多了以至于不能开车。</li>
</ul>
<h3 id="让步和对立的表达"><a href="#让步和对立的表达" class="headerlink" title="让步和对立的表达"></a>让步和对立的表达</h3><ul>
<li>Ils sont sortis <strong>malgré</strong> le mauvais temps. <strong>尽管</strong>天气不好，他们还是出去了。</li>
<li>Je vais y aller **même s’**il ne fais pas beau. <strong>即使</strong>天气不好，我也要去。</li>
<li>Il reste au lit <strong>au lieu de</strong> travailler. 他躺在床上<strong>而不是</strong>工作。</li>
<li>Il n’a pas plu <strong>contrairement</strong> aux prévisions. <strong>与</strong>预报<strong>相反</strong>，没有下雨。</li>
<li>Elle n’est pas fatiguée, <strong>au contraire</strong>, elle est en pleine forme. 她不累，<strong>相反地</strong>，她很精神。</li>
<li>Il est gros <strong>alors que</strong> son frère est maigre. 他很胖<strong>而</strong>他的哥哥很瘦。</li>
<li>Dans la classe, les uns travaillent, <strong>tandis que</strong> les autre bavardent. 班级里有一些在学习，<strong>而</strong>另一些在聊天。</li>
<li>Nous sommes partis **tandis qu’**il dormait. <strong>当</strong>他睡觉的时候我们出去了。</li>
<li>Il est le dernier <strong>pourtant</strong> il se croit le premier. 他是最后一名<strong>而</strong>自认为是第一名。</li>
</ul>
<h3 id="ce-qui-ce-que"><a href="#ce-qui-ce-que" class="headerlink" title="ce qui, ce que"></a>ce qui, ce que</h3><h4 id="关系从句"><a href="#关系从句" class="headerlink" title="关系从句"></a>关系从句</h4><p>ce做先行词，qui代替ce在从句中做主语，que代替ce在从句中做直宾或表语。</p>
<blockquote>
<p>On ne sait pas <strong>ce qui</strong> lui plaît. 我们不知道什么使他满意。</p>
<p>Voilà tout <strong>ce que</strong> je sais. 这就是我所知道的一切。</p>
<p>Je ne comprends pas <strong>ce que</strong> c’est. 我不明白这是什么。</p>
</blockquote>
<h4 id="强调句"><a href="#强调句" class="headerlink" title="强调句"></a>强调句</h4><p>ce qui强调指物的主语，ce que强调指物的直宾。</p>
<blockquote>
<p><strong>Ce qui</strong> l’intéresse, c’est la musique classique. 让他感兴趣的东西，正是音乐。</p>
<p><strong>Ce que</strong> j’apprécie le plus chez toi, c’est ton honnêteté. 我最欣赏你的地方，正是你的正直。</p>
</blockquote>
<h4 id="疑问句"><a href="#疑问句" class="headerlink" title="疑问句"></a>疑问句</h4><p>qu’est-ce que 对人或物作表语或宾语提问，qu’est-ce qui 对人或物作主语提问。</p>
<blockquote>
<p><strong>Qu’est-ce que</strong> vous cherchez? 您找什么？</p>
<p><strong>Qu’est-ce qui</strong> vous arrive? 什么发生在了您身上？</p>
</blockquote>
<h3 id="间接引语"><a href="#间接引语" class="headerlink" title="间接引语"></a>间接引语</h3><h4 id="陈述句：que"><a href="#陈述句：que" class="headerlink" title="陈述句：que"></a>陈述句：que</h4><blockquote>
<p>Elle dit: &lt;&lt;J’adore la France!&gt;&gt;</p>
<p>Elle dit **qu’**elle adore la France.</p>
</blockquote>
<h4 id="命令式：de-不定式"><a href="#命令式：de-不定式" class="headerlink" title="命令式：de+不定式"></a>命令式：de+不定式</h4><blockquote>
<p>Il me dit: &lt;&lt;Fais tes exercices!&gt;&gt;</p>
<p>Il me dit <strong>de faire</strong> mes exercices.</p>
</blockquote>
<h4 id="疑问句：陈述句，不能主谓倒装，不能加est-ce-que"><a href="#疑问句：陈述句，不能主谓倒装，不能加est-ce-que" class="headerlink" title="疑问句：陈述句，不能主谓倒装，不能加est-ce que"></a>疑问句：陈述句，不能主谓倒装，不能加est-ce que</h4><h5 id="一般疑问句：si"><a href="#一般疑问句：si" class="headerlink" title="一般疑问句：si"></a>一般疑问句：si</h5><blockquote>
<p>Je demande: &lt;&lt;Est-ce qu’il y a de la place?&gt;&gt;</p>
<p>Je demande **s’**il y a de la place. 我问是否有位置。</p>
</blockquote>
<h5 id="特殊疑问句"><a href="#特殊疑问句" class="headerlink" title="特殊疑问句"></a>特殊疑问句</h5><p>que / qu’est-ce que : ce que</p>
<blockquote>
<p>Il me demande: &lt;&lt;Que fais-tu demain?&gt;&gt;</p>
<p>Il me demande <strong>ce que</strong> je fais demain. 他问我我明天做什么。</p>
</blockquote>
<p>qu’est-ce qui: ce qui</p>
<blockquote>
<p>Il demande: &lt;&lt;Qu’est-ce qui fait ce bruit?&gt;&gt;</p>
<p>Il demande <strong>ce qui</strong> fait ce bruit. 他问什么发出的噪音。</p>
</blockquote>
<p>其他疑问词：保留疑问词</p>
<blockquote>
<p>Il me demande: &lt;&lt;Où habites-tu?&gt;&gt;</p>
<p>Il me demande <strong>où</strong> j’habite.  他问我住在哪。</p>
</blockquote>
]]></content>
      <categories>
        <category>法语</category>
      </categories>
  </entry>
</search>
